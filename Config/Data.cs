// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Data.proto
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace Config {

  /// <summary>Holder for reflection information generated from Data.proto</summary>
  public static partial class DataReflection {

    #region Descriptor
    /// <summary>File descriptor for Data.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static DataReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "CgpEYXRhLnByb3RvIkIKB1N1YlRlc3QSCgoCSUQYASABKAUSDQoFVGVzdDEY",
            "AiABKAUSDQoFVGVzdDIYAyABKAUSDQoFVGVzdDMYBCABKAUijAIKBFRlc3QS",
            "CgoCSUQYASABKAUSEgoKQVJSQVlfVEVTVBgCIAMoCRIdCgRURVNUGAMgAygL",
            "Mg8uVGVzdC5URVNURW50cnkSHAoKT2JqZWN0VGVzdBgEIAEoCzIILlN1YlRl",
            "c3QSFAoMQVJSQVlfTk9STUFMGAUgAygFEigKCk1BUF9OT1JNQUwYBiADKAsy",
            "FC5UZXN0Lk1BUE5PUk1BTEVudHJ5GjUKCVRFU1RFbnRyeRILCgNrZXkYASAB",
            "KAUSFwoFdmFsdWUYAiABKAsyCC5TdWJUZXN0OgI4ARowCg5NQVBOT1JNQUxF",
            "bnRyeRILCgNrZXkYASABKAUSDQoFdmFsdWUYAiABKAU6AjgBIvkBCgpEYXRh",
            "SGVscGVyEhMKC21lc3NhZ2VUeXBlGAEgAygJEjIKDFN1YlRlc3RfZGljdBgC",
            "IAMoCzIcLkRhdGFIZWxwZXIuU3ViVGVzdERpY3RFbnRyeRIsCglUZXN0X2Rp",
            "Y3QYAyADKAsyGS5EYXRhSGVscGVyLlRlc3REaWN0RW50cnkaPAoQU3ViVGVz",
            "dERpY3RFbnRyeRILCgNrZXkYASABKAUSFwoFdmFsdWUYAiABKAsyCC5TdWJU",
            "ZXN0OgI4ARo2Cg1UZXN0RGljdEVudHJ5EgsKA2tleRgBIAEoBRIUCgV2YWx1",
            "ZRgCIAEoCzIFLlRlc3Q6AjgBQgmqAgZDb25maWdiBnByb3RvMw=="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { },
          new pbr::GeneratedClrTypeInfo(null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::Config.SubTest), global::Config.SubTest.Parser, new[]{ "ID", "Test1", "Test2", "Test3" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Config.Test), global::Config.Test.Parser, new[]{ "ID", "ARRAYTEST", "TEST", "ObjectTest", "ARRAYNORMAL", "MAPNORMAL" }, null, null, new pbr::GeneratedClrTypeInfo[] { null, null, }),
            new pbr::GeneratedClrTypeInfo(typeof(global::Config.DataHelper), global::Config.DataHelper.Parser, new[]{ "MessageType", "SubTestDict", "TestDict" }, null, null, new pbr::GeneratedClrTypeInfo[] { null, null, })
          }));
    }
    #endregion

  }
  #region Messages
  public sealed partial class SubTest : pb::IMessage<SubTest> {
    private static readonly pb::MessageParser<SubTest> _parser = new pb::MessageParser<SubTest>(() => new SubTest());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SubTest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Config.DataReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SubTest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SubTest(SubTest other) : this() {
      iD_ = other.iD_;
      test1_ = other.test1_;
      test2_ = other.test2_;
      test3_ = other.test3_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SubTest Clone() {
      return new SubTest(this);
    }

    /// <summary>Field number for the "ID" field.</summary>
    public const int IDFieldNumber = 1;
    private int iD_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ID {
      get { return iD_; }
      set {
        iD_ = value;
      }
    }

    /// <summary>Field number for the "Test1" field.</summary>
    public const int Test1FieldNumber = 2;
    private int test1_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Test1 {
      get { return test1_; }
      set {
        test1_ = value;
      }
    }

    /// <summary>Field number for the "Test2" field.</summary>
    public const int Test2FieldNumber = 3;
    private int test2_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Test2 {
      get { return test2_; }
      set {
        test2_ = value;
      }
    }

    /// <summary>Field number for the "Test3" field.</summary>
    public const int Test3FieldNumber = 4;
    private int test3_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Test3 {
      get { return test3_; }
      set {
        test3_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SubTest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SubTest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (ID != other.ID) return false;
      if (Test1 != other.Test1) return false;
      if (Test2 != other.Test2) return false;
      if (Test3 != other.Test3) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (ID != 0) hash ^= ID.GetHashCode();
      if (Test1 != 0) hash ^= Test1.GetHashCode();
      if (Test2 != 0) hash ^= Test2.GetHashCode();
      if (Test3 != 0) hash ^= Test3.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (ID != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(ID);
      }
      if (Test1 != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Test1);
      }
      if (Test2 != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(Test2);
      }
      if (Test3 != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(Test3);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ID != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ID);
      }
      if (Test1 != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Test1);
      }
      if (Test2 != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Test2);
      }
      if (Test3 != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Test3);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SubTest other) {
      if (other == null) {
        return;
      }
      if (other.ID != 0) {
        ID = other.ID;
      }
      if (other.Test1 != 0) {
        Test1 = other.Test1;
      }
      if (other.Test2 != 0) {
        Test2 = other.Test2;
      }
      if (other.Test3 != 0) {
        Test3 = other.Test3;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            ID = input.ReadInt32();
            break;
          }
          case 16: {
            Test1 = input.ReadInt32();
            break;
          }
          case 24: {
            Test2 = input.ReadInt32();
            break;
          }
          case 32: {
            Test3 = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class Test : pb::IMessage<Test> {
    private static readonly pb::MessageParser<Test> _parser = new pb::MessageParser<Test>(() => new Test());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Test> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Config.DataReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Test() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Test(Test other) : this() {
      iD_ = other.iD_;
      aRRAYTEST_ = other.aRRAYTEST_.Clone();
      tEST_ = other.tEST_.Clone();
      ObjectTest = other.objectTest_ != null ? other.ObjectTest.Clone() : null;
      aRRAYNORMAL_ = other.aRRAYNORMAL_.Clone();
      mAPNORMAL_ = other.mAPNORMAL_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Test Clone() {
      return new Test(this);
    }

    /// <summary>Field number for the "ID" field.</summary>
    public const int IDFieldNumber = 1;
    private int iD_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ID {
      get { return iD_; }
      set {
        iD_ = value;
      }
    }

    /// <summary>Field number for the "ARRAY_TEST" field.</summary>
    public const int ARRAYTESTFieldNumber = 2;
    private static readonly pb::FieldCodec<string> _repeated_aRRAYTEST_codec
        = pb::FieldCodec.ForString(18);
    private readonly pbc::RepeatedField<string> aRRAYTEST_ = new pbc::RepeatedField<string>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<string> ARRAYTEST {
      get { return aRRAYTEST_; }
    }

    /// <summary>Field number for the "TEST" field.</summary>
    public const int TESTFieldNumber = 3;
    private static readonly pbc::MapField<int, global::Config.SubTest>.Codec _map_tEST_codec
        = new pbc::MapField<int, global::Config.SubTest>.Codec(pb::FieldCodec.ForInt32(8), pb::FieldCodec.ForMessage(18, global::Config.SubTest.Parser), 26);
    private readonly pbc::MapField<int, global::Config.SubTest> tEST_ = new pbc::MapField<int, global::Config.SubTest>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::MapField<int, global::Config.SubTest> TEST {
      get { return tEST_; }
    }

    /// <summary>Field number for the "ObjectTest" field.</summary>
    public const int ObjectTestFieldNumber = 4;
    private global::Config.SubTest objectTest_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Config.SubTest ObjectTest {
      get { return objectTest_; }
      set {
        objectTest_ = value;
      }
    }

    /// <summary>Field number for the "ARRAY_NORMAL" field.</summary>
    public const int ARRAYNORMALFieldNumber = 5;
    private static readonly pb::FieldCodec<int> _repeated_aRRAYNORMAL_codec
        = pb::FieldCodec.ForInt32(42);
    private readonly pbc::RepeatedField<int> aRRAYNORMAL_ = new pbc::RepeatedField<int>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<int> ARRAYNORMAL {
      get { return aRRAYNORMAL_; }
    }

    /// <summary>Field number for the "MAP_NORMAL" field.</summary>
    public const int MAPNORMALFieldNumber = 6;
    private static readonly pbc::MapField<int, int>.Codec _map_mAPNORMAL_codec
        = new pbc::MapField<int, int>.Codec(pb::FieldCodec.ForInt32(8), pb::FieldCodec.ForInt32(16), 50);
    private readonly pbc::MapField<int, int> mAPNORMAL_ = new pbc::MapField<int, int>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::MapField<int, int> MAPNORMAL {
      get { return mAPNORMAL_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Test);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Test other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (ID != other.ID) return false;
      if(!aRRAYTEST_.Equals(other.aRRAYTEST_)) return false;
      if (!TEST.Equals(other.TEST)) return false;
      if (!object.Equals(ObjectTest, other.ObjectTest)) return false;
      if(!aRRAYNORMAL_.Equals(other.aRRAYNORMAL_)) return false;
      if (!MAPNORMAL.Equals(other.MAPNORMAL)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (ID != 0) hash ^= ID.GetHashCode();
      hash ^= aRRAYTEST_.GetHashCode();
      hash ^= TEST.GetHashCode();
      if (objectTest_ != null) hash ^= ObjectTest.GetHashCode();
      hash ^= aRRAYNORMAL_.GetHashCode();
      hash ^= MAPNORMAL.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (ID != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(ID);
      }
      aRRAYTEST_.WriteTo(output, _repeated_aRRAYTEST_codec);
      tEST_.WriteTo(output, _map_tEST_codec);
      if (objectTest_ != null) {
        output.WriteRawTag(34);
        output.WriteMessage(ObjectTest);
      }
      aRRAYNORMAL_.WriteTo(output, _repeated_aRRAYNORMAL_codec);
      mAPNORMAL_.WriteTo(output, _map_mAPNORMAL_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ID != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ID);
      }
      size += aRRAYTEST_.CalculateSize(_repeated_aRRAYTEST_codec);
      size += tEST_.CalculateSize(_map_tEST_codec);
      if (objectTest_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(ObjectTest);
      }
      size += aRRAYNORMAL_.CalculateSize(_repeated_aRRAYNORMAL_codec);
      size += mAPNORMAL_.CalculateSize(_map_mAPNORMAL_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Test other) {
      if (other == null) {
        return;
      }
      if (other.ID != 0) {
        ID = other.ID;
      }
      aRRAYTEST_.Add(other.aRRAYTEST_);
      tEST_.Add(other.tEST_);
      if (other.objectTest_ != null) {
        if (objectTest_ == null) {
          objectTest_ = new global::Config.SubTest();
        }
        ObjectTest.MergeFrom(other.ObjectTest);
      }
      aRRAYNORMAL_.Add(other.aRRAYNORMAL_);
      mAPNORMAL_.Add(other.mAPNORMAL_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            ID = input.ReadInt32();
            break;
          }
          case 18: {
            aRRAYTEST_.AddEntriesFrom(input, _repeated_aRRAYTEST_codec);
            break;
          }
          case 26: {
            tEST_.AddEntriesFrom(input, _map_tEST_codec);
            break;
          }
          case 34: {
            if (objectTest_ == null) {
              objectTest_ = new global::Config.SubTest();
            }
            input.ReadMessage(objectTest_);
            break;
          }
          case 42:
          case 40: {
            aRRAYNORMAL_.AddEntriesFrom(input, _repeated_aRRAYNORMAL_codec);
            break;
          }
          case 50: {
            mAPNORMAL_.AddEntriesFrom(input, _map_mAPNORMAL_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class DataHelper : pb::IMessage<DataHelper> {
    private static readonly pb::MessageParser<DataHelper> _parser = new pb::MessageParser<DataHelper>(() => new DataHelper());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<DataHelper> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Config.DataReflection.Descriptor.MessageTypes[2]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DataHelper() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DataHelper(DataHelper other) : this() {
      messageType_ = other.messageType_.Clone();
      subTestDict_ = other.subTestDict_.Clone();
      testDict_ = other.testDict_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DataHelper Clone() {
      return new DataHelper(this);
    }

    /// <summary>Field number for the "messageType" field.</summary>
    public const int MessageTypeFieldNumber = 1;
    private static readonly pb::FieldCodec<string> _repeated_messageType_codec
        = pb::FieldCodec.ForString(10);
    private readonly pbc::RepeatedField<string> messageType_ = new pbc::RepeatedField<string>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<string> MessageType {
      get { return messageType_; }
    }

    /// <summary>Field number for the "SubTest_dict" field.</summary>
    public const int SubTestDictFieldNumber = 2;
    private static readonly pbc::MapField<int, global::Config.SubTest>.Codec _map_subTestDict_codec
        = new pbc::MapField<int, global::Config.SubTest>.Codec(pb::FieldCodec.ForInt32(8), pb::FieldCodec.ForMessage(18, global::Config.SubTest.Parser), 18);
    private readonly pbc::MapField<int, global::Config.SubTest> subTestDict_ = new pbc::MapField<int, global::Config.SubTest>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::MapField<int, global::Config.SubTest> SubTestDict {
      get { return subTestDict_; }
    }

    /// <summary>Field number for the "Test_dict" field.</summary>
    public const int TestDictFieldNumber = 3;
    private static readonly pbc::MapField<int, global::Config.Test>.Codec _map_testDict_codec
        = new pbc::MapField<int, global::Config.Test>.Codec(pb::FieldCodec.ForInt32(8), pb::FieldCodec.ForMessage(18, global::Config.Test.Parser), 26);
    private readonly pbc::MapField<int, global::Config.Test> testDict_ = new pbc::MapField<int, global::Config.Test>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::MapField<int, global::Config.Test> TestDict {
      get { return testDict_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as DataHelper);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(DataHelper other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!messageType_.Equals(other.messageType_)) return false;
      if (!SubTestDict.Equals(other.SubTestDict)) return false;
      if (!TestDict.Equals(other.TestDict)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= messageType_.GetHashCode();
      hash ^= SubTestDict.GetHashCode();
      hash ^= TestDict.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      messageType_.WriteTo(output, _repeated_messageType_codec);
      subTestDict_.WriteTo(output, _map_subTestDict_codec);
      testDict_.WriteTo(output, _map_testDict_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += messageType_.CalculateSize(_repeated_messageType_codec);
      size += subTestDict_.CalculateSize(_map_subTestDict_codec);
      size += testDict_.CalculateSize(_map_testDict_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(DataHelper other) {
      if (other == null) {
        return;
      }
      messageType_.Add(other.messageType_);
      subTestDict_.Add(other.subTestDict_);
      testDict_.Add(other.testDict_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            messageType_.AddEntriesFrom(input, _repeated_messageType_codec);
            break;
          }
          case 18: {
            subTestDict_.AddEntriesFrom(input, _map_subTestDict_codec);
            break;
          }
          case 26: {
            testDict_.AddEntriesFrom(input, _map_testDict_codec);
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
