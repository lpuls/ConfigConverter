// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Out/Data.proto
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace Config {

  /// <summary>Holder for reflection information generated from Out/Data.proto</summary>
  public static partial class DataReflection {

    #region Descriptor
    /// <summary>File descriptor for Out/Data.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static DataReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "Cg5PdXQvRGF0YS5wcm90byJmCgRUZXN0EhIKCkFSUkFZX1RFU1QYASADKAUS",
            "HQoEVEVTVBgCIAMoCzIPLlRlc3QuVEVTVEVudHJ5GisKCVRFU1RFbnRyeRIL",
            "CgNrZXkYASABKAUSDQoFdmFsdWUYAiABKAU6AjgBIiYKCkRhdGFIZWxwZXIS",
            "GAoJVGVzdF9saXN0GAEgAygLMgUuVGVzdEIJqgIGQ29uZmlnYgZwcm90bzM="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { },
          new pbr::GeneratedClrTypeInfo(null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::Config.Test), global::Config.Test.Parser, new[]{ "ARRAYTEST", "TEST" }, null, null, new pbr::GeneratedClrTypeInfo[] { null, }),
            new pbr::GeneratedClrTypeInfo(typeof(global::Config.DataHelper), global::Config.DataHelper.Parser, new[]{ "TestList" }, null, null, null)
          }));
    }
    #endregion

  }
  #region Messages
  public sealed partial class Test : pb::IMessage<Test> {
    private static readonly pb::MessageParser<Test> _parser = new pb::MessageParser<Test>(() => new Test());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Test> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Config.DataReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Test() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Test(Test other) : this() {
      aRRAYTEST_ = other.aRRAYTEST_.Clone();
      tEST_ = other.tEST_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Test Clone() {
      return new Test(this);
    }

    /// <summary>Field number for the "ARRAY_TEST" field.</summary>
    public const int ARRAYTESTFieldNumber = 1;
    private static readonly pb::FieldCodec<int> _repeated_aRRAYTEST_codec
        = pb::FieldCodec.ForInt32(10);
    private readonly pbc::RepeatedField<int> aRRAYTEST_ = new pbc::RepeatedField<int>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<int> ARRAYTEST {
      get { return aRRAYTEST_; }
    }

    /// <summary>Field number for the "TEST" field.</summary>
    public const int TESTFieldNumber = 2;
    private static readonly pbc::MapField<int, int>.Codec _map_tEST_codec
        = new pbc::MapField<int, int>.Codec(pb::FieldCodec.ForInt32(8), pb::FieldCodec.ForInt32(16), 18);
    private readonly pbc::MapField<int, int> tEST_ = new pbc::MapField<int, int>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::MapField<int, int> TEST {
      get { return tEST_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Test);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Test other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!aRRAYTEST_.Equals(other.aRRAYTEST_)) return false;
      if (!TEST.Equals(other.TEST)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= aRRAYTEST_.GetHashCode();
      hash ^= TEST.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      aRRAYTEST_.WriteTo(output, _repeated_aRRAYTEST_codec);
      tEST_.WriteTo(output, _map_tEST_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += aRRAYTEST_.CalculateSize(_repeated_aRRAYTEST_codec);
      size += tEST_.CalculateSize(_map_tEST_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Test other) {
      if (other == null) {
        return;
      }
      aRRAYTEST_.Add(other.aRRAYTEST_);
      tEST_.Add(other.tEST_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10:
          case 8: {
            aRRAYTEST_.AddEntriesFrom(input, _repeated_aRRAYTEST_codec);
            break;
          }
          case 18: {
            tEST_.AddEntriesFrom(input, _map_tEST_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class DataHelper : pb::IMessage<DataHelper> {
    private static readonly pb::MessageParser<DataHelper> _parser = new pb::MessageParser<DataHelper>(() => new DataHelper());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<DataHelper> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Config.DataReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DataHelper() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DataHelper(DataHelper other) : this() {
      testList_ = other.testList_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DataHelper Clone() {
      return new DataHelper(this);
    }

    /// <summary>Field number for the "Test_list" field.</summary>
    public const int TestListFieldNumber = 1;
    private static readonly pb::FieldCodec<global::Config.Test> _repeated_testList_codec
        = pb::FieldCodec.ForMessage(10, global::Config.Test.Parser);
    private readonly pbc::RepeatedField<global::Config.Test> testList_ = new pbc::RepeatedField<global::Config.Test>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Config.Test> TestList {
      get { return testList_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as DataHelper);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(DataHelper other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!testList_.Equals(other.testList_)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= testList_.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      testList_.WriteTo(output, _repeated_testList_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += testList_.CalculateSize(_repeated_testList_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(DataHelper other) {
      if (other == null) {
        return;
      }
      testList_.Add(other.testList_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            testList_.AddEntriesFrom(input, _repeated_testList_codec);
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
