// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Temp/Config.proto
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace Config {

  /// <summary>Holder for reflection information generated from Temp/Config.proto</summary>
  public static partial class ConfigReflection {

    #region Descriptor
    /// <summary>File descriptor for Temp/Config.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static ConfigReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "ChFUZW1wL0NvbmZpZy5wcm90byJVCiFBdXRvX0dlbmVyYXRlX0FiaWxpdHlf",
            "U3RhdGVfSW5kZXgSCgoCSUQYASABKAUSEgoKR3JvdXBJbmRleBgCIAEoBRIQ",
            "CghEZXNjcmliZRgDIAEoCSLKBQoMSGl0Q2hlY2tJbmZvEhIKCkhpdENoZWNr",
            "SUQYASABKAUSDQoFU3RhcnQYAiABKAUSEQoJUmFuZ2VUeXBlGAMgASgFEg0K",
            "BVJhbmdlGAQgASgFEg4KBlJhZGl1cxgFIAEoBRINCgVBbmdsZRgGIAEoBRIO",
            "CgZMZW5ndGgYByABKAUSDQoFV2lkdGgYCCABKAUSFAoMQ2VudGVyT2Zmc2V0",
            "GAkgASgFEhgKEEhvcml6b250YWxPZmZzZXQYCiABKAUSFwoPSG9yaXpvbnRh",
            "bFNwZWVkGAsgASgFEiMKG0hvcml6b250YWxBY2NlbGVyYXRlZEFTcGVlZBgM",
            "IAEoBRIVCg1WZXJ0aWNhbFNwZWVkGA0gASgFEiAKGFZlcnRpY2FsQWNjZWxl",
            "cmF0ZWRTcGVlZBgOIAEoBRIRCglIaXRIZWlnaHQYDyABKAUSFgoOVmFsaWRI",
            "aXRIZWlnaHQYECABKAUSHgoWSG9yaXpvbnRhbFNwZWVkT25GbG9hdBgRIAEo",
            "BRIQCghEdXJhdGlvbhgSIAEoBRIaChJBdHRhY2tlckthcnR1blRpbWUYEyAB",
            "KAUSFQoNSGl0S2FydHVuVGltZRgUIAEoBRIYChBJZ25vcmVIaXRIaXN0b3J5",
            "GBUgASgFEh4KFklzVXNlQXR0YWNrZXJEaXJlY3Rpb24YFiABKAUSFwoPSGl0",
            "RG93bkR1cmF0aW9uGBcgASgFEg8KB0lzVGh1bXAYGCABKAUSHQoVTm9SZW92",
            "ZXJIaXRLYXJ0dW5UaW1lGBkgASgFEhoKElVzZUhpdERvd25EdXJhdGlvbhga",
            "IAEoBRIWCg5Jc0xhcmdlSGl0QmFjaxgbIAEoBRIbChNJc1RhcmdldENoYW5n",
            "ZVNwZWVkGBwgASgFEhMKC1RhcmdldFNwZWVkGB0gASgFEhcKD0NoYW5nZVNw",
            "ZWVkVGltZRgeIAEoBSJTChBBYmlsaXR5U3BlZWRJbmZvEg0KBVN0YXJ0GAEg",
            "ASgFEhAKCER1cmF0aW9uGAIgASgFEh4KFkFiaWxpdHlTcGVlZEJ5VGltZWxp",
            "bmUYAyABKAUiSgoLVGFsa0NvbnRlbnQSCgoCSUQYASABKAUSDwoHU3BlYWtl",
            "chgCIAEoCRIPCgdDb250ZW50GAMgASgJEg0KBURlbHRhGAQgASgFIu4ICghU",
            "aW1lbGluZRIVCg1USUNLX0lOVEVSVkFMGAEgASgFEgoKAklEGAIgASgFEg4K",
            "BklzTG9vcBgDIAEoBRIQCghEdXJhdGlvbhgEIAEoBRITCgtSZWNvdmVyVGlt",
            "ZRgFIAEoBRIVCg1Db21ib092ZXJUaW1lGAYgASgFEhUKDUlzRmluYWxBY3Rp",
            "b24YByABKAUSEgoKSXNOZWVkTG9jaxgIIAEoBRIUCgxJc1VzZUNvbmZpZ1kY",
            "CSABKAUSFAoMSXNVc2VDb25maWdYGAogASgFEhkKEVRocm93bklnbm9yZUdy",
            "YXBoGAsgASgFEhkKEVRocm93bkNhbk91dFJhbmdlGAwgASgFEh0KFVRocm93",
            "bk91dFJhbmdlU3Bhd25JRBgNIAEoBRIlCh1BcnJpdmVkQ3JlYXRlVGhyb3du",
            "VGltZWxpbmVJRBgOIAEoBRIfChdJc0RlcGVuZENhc3RlckZvclRocm93bhgP",
            "IAEoBRIWCg5Vc2VUYW5nZW50TW92ZRgQIAEoBRIYChBVc2VEZWZhdWx0Q2Ft",
            "ZXJhGBEgASgFEhUKDVVzZUNhbWVyYU1vdmUYEiABKAUSGwoTVHJhbnNmb3Jt",
            "QWN0aW9uSW5mbxgTIAEoBRIRCglSYW5nZVR5cGUYFCABKAUSDgoGUmFkaXVz",
            "GBUgASgFEg0KBUFuZ2xlGBYgASgFEg4KBkxlbmd0aBgXIAEoBRINCgVXaWR0",
            "aBgYIAEoBRISCgpTdGFydEZyYW1lGBkgASgFEhAKCEVuZEZyYW1lGBogASgF",
            "EhsKE0lzQ3VzdG9tQXR0YWNrUG9pbnQYGyABKAUSIQoZQ3VzdG9tQXR0YWNr",
            "UG9pbnREaXN0YW5jZRgcIAEoBRIaChJDRENvbXBlbnNhdGlvbkxpc3QYHSAB",
            "KAUSHQoVUG9zdFNwd2FuVGhyb3duRXZlbnRzGB4gASgFEh4KFlBvc3REZXNw",
            "b3duVGhyb25FdmVudHMYHyABKAUSEwoLSGl0VGltZUxpc3QYICABKAUSHgoW",
            "TW92ZUFjdGlvblRpbWVsaW5lTm9kZRghIAEoBRIfChdJbnB1dEFjdGlvblRp",
            "bWVsaW5lTm9kZRgiIAEoBRIVCg1Mb2NrQWNpb25MaXN0GCMgASgFEiQKHFRo",
            "cm93bkNvbGxpc2lvbkNoZWNrSW5mb0xpc3QYJCABKAUSIAoYVGhyb3duTG9j",
            "a0FjdGlvbkluZm9MaXN0GCUgASgFEhoKEkNhbWVyYVR5cGVJbmZvTGlzdBgm",
            "IAEoBRIgChhUaHJvd25CYWNrQWN0aW9uSW5mb0xpc3QYJyABKAUSGwoTU2hh",
            "cGVFbmFibGVJbmZvTGlzdBgoIAEoBRIcChRBYmlsaXR5U3RhdGVJbmZvTGlz",
            "dBgpIAEoBRIcChRBYmlsaXR5U3BlZWRJbmZvTGlzdBgqIAEoBRIVCg1TaGFw",
            "ZUluZm9MaXN0GCsgASgFEiIKGkV4cG9ydFJlbGF0aXZlRGlzcGxhY2VtZW50",
            "GCwgASgFIkcKCVNoYXBlSW5mbxINCgVTdGFydBgBIAEoBRIQCghEdXJhdGlv",
            "bhgCIAEoBRIZChFTaGFwZUl0ZW1JbmZvTGlzdBgDIAEoBSJAChxBdXRvX0dl",
            "bmVyYXRlX0ludGVycnVwdF9TZWxmEgoKAklEGAEgASgFEhQKDENhbkludGVy",
            "cnVwdBgCIAEoCCItCgpWZWN0b3JJbnQzEgkKAVgYASABKAUSCQoBWRgCIAEo",
            "BRIJCgFaGAMgASgFIlQKDVNoYXBlSXRlbUluZm8SFQoNU2hhcGVQYXJ0VHlw",
            "ZRgBIAEoBRIOCgZPZmZzZXQYAiABKAUSDAoEU2l6ZRgDIAEoBRIOCgZFbmFi",
            "bGUYBCABKAUi4QEKDUFiaWxpdHlDb25maWcSCgoCSUQYASABKAUSCgoCQ0QY",
            "AiABKAUSEwoLTWF4VXNlQ291bnQYAyABKAUSFAoMQWJpbGl0eUNsYXNzGAQg",
            "ASgFEhcKD0hpdERhbWFnZUJhc2ljcxgFIAMoBRIUCgxIaXREYW1hZ2VQZWMY",
            "BiADKAUSGwoTUG9zdHVyZVZhbHVlQ29uc3VtZRgHIAMoBRIbChNCYWxhbmNl",
            "VmFsdWVDb25zdW1lGAggAygFEg8KB0xhc3RIaXQYCSABKAUSEwoLUmVsYXRl",
            "U2tpbGwYCiADKAUi+AgKClJvbGVDb25maWcSCgoCSUQYASABKAUSGQoRQWRk",
            "aXRpb25hbFJvbGVJRHMYAiADKAUSIwoMUm9sZUNhdGVnb3J5GAMgASgOMg0u",
            "Um9sZUNhdGVnb3J5EiYKDlNoYXBlUGFydFR5cGVzGAQgAygOMg4uU2hhcGVQ",
            "YXJ0VHlwZRIOCgZSYWRpdXMYBSADKAUSFgoOQ2FtZXJhRGlzdGFuY2UYBiAB",
            "KAUSFAoMQ2FtZXJhSGVpZ2h0GAcgASgFEhoKEkNhbWVyYUxvb2tBdEhlaWdo",
            "dBgIIAEoBRIhCglEZWF0aFRpbWUYCSABKA4yDi5EZWF0aFRpbWVUeXBlEhEK",
            "CU1vZGVsUGF0aBgKIAEoCRIRCglNb2RlbE5hbWUYCyABKAkSDgoGTWVsZWVz",
            "GAwgAygFEg8KB0FiaWxpdHkYDSADKAUSEwoLUmFnZUFiaWxpdHkYDiADKAUS",
            "FAoMQXZvaWRBYmlsaXR5GA8gAygFEg4KBkJhc2VIUBgQIAEoBRISCgpCYXNl",
            "QXR0YWNrGBEgASgFEhIKCkJhc2VEZWZlbmQYEiABKAUSFQoNR3Jvd0hQQnlM",
            "ZXZlbBgTIAEoBRIZChFHcm93QXR0YWNrQnlMZXZlbBgUIAEoBRIZChFHcm93",
            "RGVmZW5kQnlMZXZlbBgVIAEoBRIUCgxHcm93SFBCeVN0YXIYFiABKAUSGAoQ",
            "R3Jvd0F0dGFja0J5U3RhchgXIAEoBRIXCg9Vc2VSdW5Nb3ZlQ3VydmUYGCAB",
            "KAgSDQoFU3BlZWQYGSABKAUSGAoQR3Jvd0RlZmVuZEJ5U3RhchgaIAEoBRIb",
            "CghSb2xlVHlwZRgbIAEoDjIJLlJvbGVUeXBlEhQKDEhpdFJlY292ZXJJRBgc",
            "IAMoBRIYChBIaXRCYWNrUmVjb3ZlcklEGB0gASgFEhAKCEhpdEFpcklEGB4g",
            "ASgFEg8KB0hpdFVwSUQYHyABKAUSEQoJSGl0RG93bklEGCAgASgFEhIKCkhp",
            "dEZsb29ySUQYISABKAUSDwoHR2V0VXBJRBgiIAEoBRISCgpIaXRVcEFpcklE",
            "GCMgASgFEgsKA1J1bhgkIAEoBRIMCgRJZGxlGCUgASgFEg4KBldlaWdodBgm",
            "IAEoBRIPCgdSdW5MZWZ0GCcgASgFEhAKCFJ1blJpZ2h0GCggASgFEg0KBURl",
            "YXRoGCkgASgFEhgKEE5vQW5pbWF0aW9uRGVhdGgYKiABKAUSEAoIQWlyRGVh",
            "dGgYKyABKAUSDgoGQXBwZWFyGCwgASgFEhQKDE1vdmVtZW50U3RvcBgtIAEo",
            "BRISCgpDYW5IaXRCYWNrGC4gASgIEhAKCENhbkhpdFVwGC8gASgIEhgKEFVz",
            "ZVJ1c2hNb3ZlQ3VydmUYMCABKAgSDgoGUnVzaElEGDEgASgFEhIKClJ1c2hT",
            "dG9wSUQYMiABKAUSEQoJUnVzaFNwZWVkGDMgASgFEhgKEEhpdEJhY2tWYWxp",
            "ZFRpbWUYNCADKAUSFAoMQmFsYW5jZVZhbHVlGDUgASgFIqsBCgRidWZmEgoK",
            "AklEGAEgASgFEg8KB2J1ZmZfaWQYAiABKAUSDAoEbmFtZRgDIAEoCRIOCgZy",
            "ZW1hcmsYBCABKAkSDAoEdHlwZRgFIAEoBRIQCghzdWJfdHlwZRgGIAEoBRIT",
            "CgtkYW1hZ2VfdHlwZRgHIAEoBRIRCglrZWVwX3RpbWUYCCABKAUSDQoFZmxv",
            "b3IYCSABKAUSEQoJc3ViX2Zsb29yGAogASgFIjEKDkxvY2tBY3Rpb25Ob2Rl",
            "Eg0KBVN0YXJ0GAEgASgFEhAKCER1cmF0aW9uGAIgASgFIkEKHUF1dG9fR2Vu",
            "ZXJhdGVfSW50ZXJydXB0X090aGVyEgoKAklEGAEgASgFEhQKDENhbkludGVy",
            "cnVwdBgCIAEoCCK5AQoYVGltZWxpbmVSb290TW90aW9uQ29uZmlnEgoKAklE",
            "GAEgASgFEg8KB01vZGVsSUQYAiABKAUSEgoKQWN0aW9uTmFtZRgDIAEoCRIW",
            "Cg5ZX0Jha2VJbnRvUG9zZRgEIAEoBRIcChRZX09yaWdpbmFsT3JSb290Tm9k",
            "ZRgFIAEoBRIXCg9YWl9CYWtlSW50b1Bvc2UYBiABKAUSHQoVWFpfT3JpZ2lu",
            "YWxPclJvb3ROb2RlGAcgASgFIkQKD1NoYXBlRW5hYmxlSW5mbxINCgVTdGFy",
            "dBgBIAEoBRIQCghEdXJhdGlvbhgCIAEoBRIQCghJc0VuYWJsZRgDIAEoBSI2",
            "Cg5JbnRlcmVzdENvbmZpZxIKCgJJRBgBIAEoBRIYCgVHcm91cBgCIAMoDjIJ",
            "LlJvbGVUeXBlIq8CChhUaHJvd25Db2xsaXNpb25DaGVja0luZm8SDQoFU3Rh",
            "cnQYASABKAUSEAoIRHVyYXRpb24YAiABKAUSEQoJUmFuZ2VUeXBlGAMgASgF",
            "Eg4KBlJhZGl1cxgEIAEoBRINCgVBbmdsZRgFIAEoBRIOCgZMZW5ndGgYBiAB",
            "KAUSDQoFV2lkdGgYByABKAUSDgoGSGVpZ2h0GAggASgFEhQKDENlbnRlck9m",
            "ZnNldBgJIAEoBRIYChBJZ25vcmVIaXRIaXN0b3J5GAogASgFEiIKGlRocm93",
            "bkJlaGF2aW91ck9uQ29sbGlzaW9uGAsgASgFEh0KFVNwYXduVGhyb3duVGlt",
            "ZWxpbmVJRBgMIAEoBRIeChZDaGFuZ2VUYXJnZXRDb3VudExpbWl0GA0gASgF",
            "InsKCEhpdEF1ZGlvEgoKAklEGAEgASgFEicKDldlYXBvbkNhdGVnb3J5GAIg",
            "ASgOMg8uV2VhcG9uQ2F0ZWdvcnkSIwoMUm9sZUNhdGVnb3J5GAMgASgOMg0u",
            "Um9sZUNhdGVnb3J5EhUKDUF1ZGlvQ2xpcFBhdGgYBCABKAkiYAoWTW92ZUFj",
            "dGlvblRpbWVsaW5lTm9kZRIOCgZFbmFibGUYASABKAUSDQoFU3RhcnQYAiAB",
            "KAUSEAoIRHVyYXRpb24YAyABKAUSFQoNQW5pbWF0aW9uTW92ZRgEIAEoBSK9",
            "AgoUVGhyb3duTG9ja0FjdGlvbkluZm8SDQoFU3RhcnQYASABKAUSEAoIRHVy",
            "YXRpb24YAiABKAUSEQoJUmFuZ2VUeXBlGAMgASgFEg4KBlJhZGl1cxgEIAEo",
            "BRINCgVBbmdsZRgFIAEoBRIOCgZMZW5ndGgYBiABKAUSDQoFV2lkdGgYByAB",
            "KAUSDgoGSGVpZ2h0GAggASgFEhQKDENlbnRlck9mZnNldBgJIAEoBRIiChpU",
            "aHJvd25CZWhhdmlvdXJPbkNvbGxpc2lvbhgKIAEoBRIdChVTcGF3blRocm93",
            "blRpbWVsaW5lSUQYCyABKAUSHgoWQ2hhbmdlVGFyZ2V0Q291bnRMaW1pdBgM",
            "IAEoBRIQCghUdXJuUmF0ZRgNIAEoBRIYChBMb2NrRW5kT3BlcmF0aW9uGA4g",
            "ASgFIicKBEludDMSCQoBeBgBIAEoBRIJCgF5GAIgASgFEgkKAXoYAyABKAUi",
            "NwoaUG9zdERlc3Bhd25UaHJvd25FdmVudEluZm8SDQoFU3RhcnQYASABKAUS",
            "CgoCSUQYAiABKAUiTQoSQ0RDb21wZW5zYXRpb25JbmZvEg0KBVN0YXJ0GAEg",
            "ASgFEhAKCER1cmF0aW9uGAIgASgFEhYKDkNEQ29tcGVuc2F0aW9uGAMgASgF",
            "IkgKC0hlcm9fQXR0cmliEgoKAklEGAEgASgFEg8KB3Zhcm5hbWUYAiABKAkS",
            "DAoETmFtZRgDIAEoCRIOCgZyZW1hcmsYBCABKAkiSgoXSW5wdXRBY3Rpb25U",
            "aW1lbGluZU5vZGUSDgoGRW5hYmxlGAEgASgFEg0KBVN0YXJ0GAIgASgFEhAK",
            "CER1cmF0aW9uGAMgASgFIocCChhQb3N0U3B3YW5UaHJvd25FdmVudEluZm8S",
            "DQoFU3RhcnQYASABKAUSCgoCSUQYAiABKAUSFgoOVGFyZ2V0Q2FtcFR5cGUY",
            "AyABKAUSFAoMQ2VudGVyT2Zmc2V0GAQgASgFEhQKDFNwYXduRm9yd2FyZBgF",
            "IAEoBRIRCglSYW5nZVR5cGUYBiABKAUSDgoGUmFkaXVzGAcgASgFEg0KBUFu",
            "Z2xlGAggASgFEg4KBkxlbmd0aBgJIAEoBRINCgVXaWR0aBgKIAEoBRIOCgZI",
            "ZWlnaHQYCyABKAUSGAoQVGFyZ2V0U2VsZWN0VHlwZRgMIAEoBRIRCglVc2VD",
            "b21tb24YDSABKAUiKQoNRW50aXR5VmFyTmFtZRIKCgJJRBgBIAEoBRIMCgRO",
            "YW1lGAIgASgJItUDCgpCdWZmQ29uZmlnEgoKAklEGAEgASgFEgwKBFR5cGUY",
            "AiABKAUSDAoETmFtZRgDIAEoCRIOCgZTdGF0dXMYBCABKAUSDgoGVGFyZ2V0",
            "GAUgASgFEg0KBUNvdW50GAYgASgFEg4KBkR1cmluZxgHIAEoBRIMCgRUaWNr",
            "GAggASgFEhYKDkNvbXB1bHNvcnlMaWZ0GAkgASgFEhgKEFRyaWdnZXJSYW5n",
            "ZVR5cGUYCiABKAUSDQoFUmFuZ2UYCyABKAUSGAoQRGFtYWdlRWZmZWN0VHlw",
            "ZRgMIAEoBRIZChFEYW1hZ2VFZmZlY3RWYWx1ZRgNIAEoBRIZChFBZGR0aXZl",
            "RWZmZWN0VHlwZRgOIAEoBRIbChNBZGR0aXZlRWZmZWN0RmFjdG9yGA8gASgF",
            "EhQKDExpbWl0QWJpbGl0eRgQIAEoBRITCgtTaGllbGRWYWx1ZRgRIAEoBRIV",
            "Cg1MZWVjaExpZmVUeXBlGBIgASgFEhYKDkxlZWNoTGlmZVBhcmFtGBMgASgF",
            "EhMKC1RyYW5zZm9ybUlEGBQgASgFEhoKElRyYW5zZm9ybUF0dGFja0FychgV",
            "IAMoBRIZChFUcmFuc2Zvcm1Ta2lsbEFychgWIAMoBSJaCg5DYW1lcmFUeXBl",
            "SW5mbxINCgVTdGFydBgBIAEoBRIQCghEdXJhdGlvbhgCIAEoBRISCgpDYW1l",
            "cmFUeXBlGAMgASgFEhMKC0VuZFBvc2l0aW9uGAQgASgFIk4KEEFiaWxpdHlT",
            "dGF0ZUluZm8SDQoFU3RhcnQYASABKAUSEAoIRHVyYXRpb24YAiABKAUSGQoR",
            "QWJpbGl0eVN0YXRlSW5kZXgYAyABKAUijAIKCFNjZW5lTWFwEgoKAklEGAEg",
            "ASgFEhMKC01hcERhdGFQYXRoGAIgASgJEhoKEk1vbnN0ZXJOb3JtYWxMZXZl",
            "bBgDIAEoBRIaChJNb25zdGVyRWxpdGVsTGV2ZWwYBCABKAUSGAoQTW9uc3Rl",
            "ckJvc3NMZXZlbBgFIAEoBRIaChJNb25zdGVyU3RhTXVsdGlwbGUYBiABKAUS",
            "GgoSTW9uc3RlckF0a011bHRpcGxlGAcgASgFEhwKFE1vbnN0ZXJSYXRpb011",
            "bHRpcGxlGAggASgFEiAKGE1vbnN0ZXJCb3NzSFBTdHJpcE51bWJlchgJIAEo",
            "BRIVCg1FeHRlcm5hbFBhcmFtGAogASgJIn0KFFRocm93bkJhY2tBY3Rpb25J",
            "bmZvEg0KBVN0YXJ0GAEgASgFEhAKCER1cmF0aW9uGAIgASgFEhAKCE9uY2VD",
            "YWxjGAMgASgFEg4KBk9mZnNldBgEIAEoBRIQCghNaW5TcGVlZBgFIAEoBRIQ",
            "CghNYXhTcGVlZBgGIAEoBSJYChNUcmFuc2Zvcm1BY3Rpb25JbmZvEg0KBVN0",
            "YXJ0GAEgASgFEhcKD1RyYW5zZm9ybVJvbGVJRBgCIAEoBRIZChFUcmFuc2Zv",
            "cm1BY3Rpb25JRBgDIAEoBSq/AQoRQWJpbGl0eVN0YWdlQ2xhc3MSGgoWQWJp",
            "bGl0eVN0YWdlQ2xhc3NfTk9ORRAAEiMKH0FiaWxpdHlTdGFnZUNsYXNzX0NB",
            "U1RBTklNQVRJT04QARIfChtBYmlsaXR5U3RhZ2VDbGFzc19DQVNUUE9JTlQQ",
            "AhIjCh9BYmlsaXR5U3RhZ2VDbGFzc19DQVNUQkFDS1NXSU5HEAMSIwofQWJp",
            "bGl0eVN0YWdlQ2xhc3NfQ0FTVE1PVkVTV0lORxAEKikKDkl0ZW1EZXRhaWxU",
            "eXBlEhcKE0l0ZW1EZXRhaWxUeXBlX05PTkUQACpvCgxSb2xlQ2F0ZWdvcnkS",
            "FQoRUm9sZUNhdGVnb3J5X05PTkUQABIWChJSb2xlQ2F0ZWdvcnlfSFVNQU4Q",
            "ARIYChRSb2xlQ2F0ZWdvcnlfVklSVFVBTBACEhYKElJvbGVDYXRlZ29yeV9N",
            "RVRBTBADKsIBCghSb2xlVHlwZRIRCg1Sb2xlVHlwZV9OT05FEAASEwoPUm9s",
            "ZVR5cGVfUExBWUVSEAESEgoOUm9sZVR5cGVfRU5FTVkQAhIUChBSb2xlVHlw",
            "ZV9ORVVUUkFMEAQSEwoPUm9sZVR5cGVfQlVOS0VSEAgSFAoQUm9sZVR5cGVf",
            "VFJJR0dFUhAQEhEKDVJvbGVUeXBlX1RSQVAQIBIQCgxSb2xlVHlwZV9CT1gQ",
            "QBIUCg9Sb2xlVHlwZV9GUklFTkQQgAEqkQ0KCUJ1ZmZDbGFzcxISCg5CdWZm",
            "Q2xhc3NfTk9ORRAAEh4KGkJ1ZmZDbGFzc19TVEFUVVNfVFlQRV9TTE9XEAES",
            "HwobQnVmZkNsYXNzX1NUQVRVU19UWVBFX0JMSU5EEAISHwobQnVmZkNsYXNz",
            "X1NUQVRVU19UWVBFX0NIQU9TEAMSIAocQnVmZkNsYXNzX1NUQVRVU19UWVBF",
            "X0RJU0FSTRAEEiAKHEJ1ZmZDbGFzc19TVEFUVVNfVFlQRV9TSUxFTlQQBRIe",
            "ChpCdWZmQ2xhc3NfU1RBVFVTX1RZUEVfU1RPUBAGEh8KG0J1ZmZDbGFzc19T",
            "VEFUVVNfVFlQRV9GUk9TVBAHEh4KGkJ1ZmZDbGFzc19TVEFUVVNfVFlQRV9T",
            "V0lNEAgSIwofQnVmZkNsYXNzX1NUQVRVU19UWVBFX1BBUkFMWVNJUxAJEiAK",
            "HEJ1ZmZDbGFzc19TVEFUVVNfVFlQRV9USE9STlMQChIfChtCdWZmQ2xhc3Nf",
            "U1RBVFVTX1RZUEVfRlJBSUwQCxIeChpCdWZmQ2xhc3NfU1RBVFVTX1RZUEVf",
            "TE9DSxAMEh8KG0J1ZmZDbGFzc19TVEFUVVNfVFlQRV9CTE9PRBANEiAKHEJ1",
            "ZmZDbGFzc19TVEFUVVNfVFlQRV9QT0lTT04QDhIgChxCdWZmQ2xhc3NfU1RB",
            "VFVTX1RZUEVfRklSSU5HEA8SIAocQnVmZkNsYXNzX1NUQVRVU19UWVBFX0ZF",
            "RUJMRRAQEh4KGkJ1ZmZDbGFzc19TVEFUVVNfVFlQRV9CQUJBEBESJAogQnVm",
            "ZkNsYXNzX1NUQVRVU19UWVBFX1NVUEVSQVJNT1IQEhIhCh1CdWZmQ2xhc3Nf",
            "U1RBVFVTX1RZUEVfUkVDT1ZFUhATEh8KG0J1ZmZDbGFzc19TVEFUVVNfVFlQ",
            "RV9NQVhIUBAUEiAKHEJ1ZmZDbGFzc19TVEFUVVNfVFlQRV9BVFRBQ0sQFRIh",
            "Ch1CdWZmQ2xhc3NfU1RBVFVTX1RZUEVfREVGRU5TRRAWEiQKIEJ1ZmZDbGFz",
            "c19TVEFUVVNfVFlQRV9QSFlERUZFTlNFEBcSJAogQnVmZkNsYXNzX1NUQVRV",
            "U19UWVBFX1NQRURFRkVOU0UQGBIgChxCdWZmQ2xhc3NfU1RBVFVTX1RZUEVf",
            "REFNQUdFEBkSIwofQnVmZkNsYXNzX1NUQVRVU19UWVBFX09SRERBTUFHRRAa",
            "EiUKIUJ1ZmZDbGFzc19TVEFUVVNfVFlQRV9TS0lMTERBTUFHRRAbEh4KGkJ1",
            "ZmZDbGFzc19TVEFUVVNfVFlQRV9DUklUEBwSJAogQnVmZkNsYXNzX1NUQVRV",
            "U19UWVBFX0NSSVREQU1BR0UQHRIiCh5CdWZmQ2xhc3NfU1RBVFVTX1RZUEVf",
            "Q09PTERPV04QHhIfChtCdWZmQ2xhc3NfU1RBVFVTX1RZUEVfU1BFRUQQHxIi",
            "Ch5CdWZmQ2xhc3NfU1RBVFVTX1RZUEVfVEVOQUNJVFkQIBIqCiZCdWZmQ2xh",
            "c3NfU1RBVFVTX1RZUEVfSElUX0FDVElPTl9TUEVFRBAhEiIKHEJ1ZmZDbGFz",
            "c19TVEFUVVNfVFlQRV8xMDM0XzEQ6acGEiIKHEJ1ZmZDbGFzc19TVEFUVVNf",
            "VFlQRV8xMDM0XzIQ6qcGEiIKHEJ1ZmZDbGFzc19TVEFUVVNfVFlQRV8xMDM5",
            "XzEQ3asGEiIKHEJ1ZmZDbGFzc19TVEFUVVNfVFlQRV8xMDQ2XzEQmbEGEiIK",
            "HEJ1ZmZDbGFzc19TVEFUVVNfVFlQRV8xMDQ1XzEQtbAGEiIKHEJ1ZmZDbGFz",
            "c19TVEFUVVNfVFlQRV8xMDQ4XzEQ4bIGEiIKHEJ1ZmZDbGFzc19TVEFUVVNf",
            "VFlQRV8xMDQ4XzIQ4rIGEiIKHEJ1ZmZDbGFzc19TVEFUVVNfVFlQRV8xMDUw",
            "XzEQqbQGEiIKHEJ1ZmZDbGFzc19TVEFUVVNfVFlQRV8xMDY2XzEQ6cAGEiIK",
            "HEJ1ZmZDbGFzc19TVEFUVVNfVFlQRV8xMDY2XzIQ6sAGEiIKHEJ1ZmZDbGFz",
            "c19TVEFUVVNfVFlQRV8xMDY2XzMQ68AGEiIKHEJ1ZmZDbGFzc19TVEFUVVNf",
            "VFlQRV8xMDY2XzQQ7MAGEiIKHEJ1ZmZDbGFzc19TVEFUVVNfVFlQRV8xMDY2",
            "XzUQ7cAGEiIKHEJ1ZmZDbGFzc19TVEFUVVNfVFlQRV8xMDY2XzYQ7sAGKocF",
            "ChJBYmlsaXR5RGV0YWlsQ2xhc3MSGwoXQWJpbGl0eURldGFpbENsYXNzX05P",
            "TkUQABIiCh5BYmlsaXR5RGV0YWlsQ2xhc3NfTElHSFRBVFRBQ0sQARIcChhB",
            "YmlsaXR5RGV0YWlsQ2xhc3NfU0tJTEwQAhIcChhBYmlsaXR5RGV0YWlsQ2xh",
            "c3NfQVZPSUQQAxIbChdBYmlsaXR5RGV0YWlsQ2xhc3NfREVBRBAEEh4KGkFi",
            "aWxpdHlEZXRhaWxDbGFzc19ERUZFTlNFEAUSIAocQWJpbGl0eURldGFpbENs",
            "YXNzX1NLSUxMTU9WRRAGEiIKHkFiaWxpdHlEZXRhaWxDbGFzc19IRUFWWUFU",
            "VEFDSxAHEh8KG0FiaWxpdHlEZXRhaWxDbGFzc19VTFRJTUFURRAIEhoKFkFi",
            "aWxpdHlEZXRhaWxDbGFzc19SVU4QCRIbChdBYmlsaXR5RGV0YWlsQ2xhc3Nf",
            "SURMRRAKEh0KGUFiaWxpdHlEZXRhaWxDbGFzc19FTkRVUkUQCxIaChZBYmls",
            "aXR5RGV0YWlsQ2xhc3NfSElUEAwSKQolQWJpbGl0eURldGFpbENsYXNzX01P",
            "TlNURVJFTElURUFUVEFDSxANEigKJEFiaWxpdHlEZXRhaWxDbGFzc19NT05T",
            "VEVSRUxJVEVTS0lMTBAOEh0KGUFiaWxpdHlEZXRhaWxDbGFzc19DSEFSR0UQ",
            "DxIjCh9BYmlsaXR5RGV0YWlsQ2xhc3NfTU9OU1RFUlNLSUxMEBASIAocQWJp",
            "bGl0eURldGFpbENsYXNzX0hJVEdST1VORBAREiEKHUFiaWxpdHlEZXRhaWxD",
            "bGFzc19GQUxMR1JPVU5EEBIqiAIKEFRyaWdnZXJFdmVudFR5cGUSHAoYVHJp",
            "Z2dlckV2ZW50VHlwZV9NQVBJTklUEAASIgoeVHJpZ2dlckV2ZW50VHlwZV9V",
            "TklURU5URVJBUkVBEAESHAoYVHJpZ2dlckV2ZW50VHlwZV9VTklURElFEAIS",
            "IwofVHJpZ2dlckV2ZW50VHlwZV9VTklUQVRUUkNIQU5HRRADEiQKIFRyaWdn",
            "ZXJFdmVudFR5cGVfVU5JVFBSRVBBUkVDQVNUEAQSIgoeVHJpZ2dlckV2ZW50",
            "VHlwZV9DSEFOR0VBVFRBUkdFEAUSJQohVHJpZ2dlckV2ZW50VHlwZV9VTklU",
            "QUNDRVBUREFNQUdFEAYqYgoOQ29udmVyc2lvblR5cGUSFwoTQ29udmVyc2lv",
            "blR5cGVfTk9ORRAAEhgKFENvbnZlcnNpb25UeXBlX0ZJWEVEEAESHQoZQ29u",
            "dmVyc2lvblR5cGVfUEVSQ0VOVEFHRRACKl0KDVNoYXBlUGFydFR5cGUSFgoS",
            "U2hhcGVQYXJ0VHlwZV9CT0RZEAASGQoVU2hhcGVQYXJ0VHlwZV9GT1JFTEVH",
            "EAESGQoVU2hhcGVQYXJ0VHlwZV9ISU5ETEVHEAIqOwoFU2hhcGUSDgoKU2hh",
            "cGVfTk9ORRAAEhAKDFNoYXBlX0NJUkNMRRABEhAKDFNoYXBlX1NFQ1RPUhAC",
            "KmgKEUFiaWxpdHlTcGFjZUNsYXNzEhoKFkFiaWxpdHlTcGFjZUNsYXNzX05P",
            "TkUQABIcChhBYmlsaXR5U3BhY2VDbGFzc19HUk9VTkQQARIZChVBYmlsaXR5",
            "U3BhY2VDbGFzc19BSVIQAiqiAQoJUmFuZ2VUeXBlEhIKDlJhbmdlVHlwZV9O",
            "T05FEAASGgoWUmFuZ2VUeXBlX1NUUkFJR0hUTElORRABEhQKEFJhbmdlVHlw",
            "ZV9TRUNUT1IQAhIXChNSYW5nZVR5cGVfUk9VTkRORVNTEAMSFwoTUmFuZ2VU",
            "eXBlX1JFQ1RBTkdMRRAEEh0KGVJhbmdlVHlwZV9NVUxUSV9ESVJFQ1RJT04Q",
            "BSpgCg5UcmlnZ2VyUG9zVHlwZRIXChNUcmlnZ2VyUG9zVHlwZV9OT05FEAAS",
            "GgoWVHJpZ2dlclBvc1R5cGVfT05FU0VMRhABEhkKFVRyaWdnZXJQb3NUeXBl",
            "X1RBUkdFVBACKsUFCg5CdWZmU3RhdHVzVHlwZRIXChNCdWZmU3RhdHVzVHlw",
            "ZV9OT05FEAASGAoUQnVmZlN0YXR1c1R5cGVfQkxFRUQQARIZChVCdWZmU3Rh",
            "dHVzVHlwZV9GSVJJTkcQAhIbChdCdWZmU3RhdHVzVHlwZV9FTlRBTkdMRRAD",
            "Eh0KGUJ1ZmZTdGF0dXNUeXBlX0lNTU9CSUxJWkUQBBIXChNCdWZmU3RhdHVz",
            "VHlwZV9TVFVOEAUSGgoWQnVmZlN0YXR1c1R5cGVfU0lMRU5DRRAGEhgKFEJ1",
            "ZmZTdGF0dXNUeXBlX1NMRUVQEAcSFwoTQnVmZlN0YXR1c1R5cGVfRkVBUhAI",
            "EhwKGEJ1ZmZTdGF0dXNUeXBlX1BPSVNPTklORxAJEh0KGUJ1ZmZTdGF0dXNU",
            "eXBlX0lOVklOQ0lCTEUQChIcChhCdWZmU3RhdHVzVHlwZV9MT1dFUl9ERUYQ",
            "CxIhCh1CdWZmU3RhdHVzVHlwZV9MT1dFUl9BQ0NVUkFDWRAMEiIKHkJ1ZmZT",
            "dGF0dXNUeXBlX0NPTlRJTlVFX1JFR0FJThANEh4KGkJ1ZmZTdGF0dXNUeXBl",
            "X0VOSEFOQ0VfREVGEA4SHgoaQnVmZlN0YXR1c1R5cGVfRU5IQU5DRV9BVEsQ",
            "DxIYChRCdWZmU3RhdHVzVHlwZV9ERUFUSBAQEhkKFUJ1ZmZTdGF0dXNUeXBl",
            "X0ZSRUVaRRAREhwKGEJ1ZmZTdGF0dXNUeXBlX1BBUkFMWVNJUxASEhkKFUJ1",
            "ZmZTdGF0dXNUeXBlX1NUVVBJRBATEhkKFUJ1ZmZTdGF0dXNUeXBlX0RJU0FS",
            "TRAUEhkKFUJ1ZmZTdGF0dXNUeXBlX1NISUVMRBAVEh0KGUJ1ZmZTdGF0dXNU",
            "eXBlX0xFRUNIX0xJRkUQFhIcChhCdWZmU3RhdHVzVHlwZV9UUkFOU0ZPUk0Q",
            "FypyCg1EZWF0aFRpbWVUeXBlEiIKHkRlYXRoVGltZVR5cGVfSU1NRURJQVRF",
            "TFlERUFUSBAAEiAKHERlYXRoVGltZVR5cGVfV0FJVEhJVFJFQ09WRVIQARIb",
            "ChdEZWF0aFRpbWVUeXBlX1dBSVRHRVRVUBACKpEBCg5XZWFwb25DYXRlZ29y",
            "eRIXChNXZWFwb25DYXRlZ29yeV9OT05FEAASGQoVV2VhcG9uQ2F0ZWdvcnlf",
            "R0xPVkVTEAESGAoUV2VhcG9uQ2F0ZWdvcnlfVEFDSEkQAhIXChNXZWFwb25D",
            "YXRlZ29yeV9XSElQEAMSGAoUV2VhcG9uQ2F0ZWdvcnlfUVVJVEUQBCpFCghC",
            "dWZmVHlwZRIRCg1CdWZmVHlwZV9OT05FEAASEQoNQnVmZlR5cGVfQlVGRhAB",
            "EhMKD0J1ZmZUeXBlX0RFQlVGRhACKoABCgpFZmZlY3RUeXBlEhMKD0VmZmVj",
            "dFR5cGVfTk9ORRAAEhsKF0VmZmVjdFR5cGVfR0VORVJBTF9IQVJNEAESEwoP",
            "RWZmZWN0VHlwZV9IQVJNEAISFQoRRWZmZWN0VHlwZV9FRkZFQ1QQAxIUChBF",
            "ZmZlY3RUeXBlX0RFQVRIEAQqjgEKDlRhcmdldENhbXBUeXBlEhcKE1Rhcmdl",
            "dENhbXBUeXBlX05PTkUQABIVChFUYXJnZXRDYW1wVHlwZV9XRRABEhgKFFRh",
            "cmdldENhbXBUeXBlX0VORU1ZEAISGgoWVGFyZ2V0Q2FtcFR5cGVfT05FU0VM",
            "RhADEhYKElRhcmdldENhbXBUeXBlX0FMTBAEKvABChBUYXJnZXRTZWxlY3RU",
            "eXBlEhkKFVRhcmdldFNlbGVjdFR5cGVfTk9ORRAAEhwKGFRhcmdldFNlbGVj",
            "dFR5cGVfTkVBUkVTVBABEh0KGVRhcmdldFNlbGVjdFR5cGVfRkFSVEhFU1QQ",
            "AhIdChlUYXJnZXRTZWxlY3RUeXBlX0hQX0xFQVNUEAMSHwobVGFyZ2V0U2Vs",
            "ZWN0VHlwZV9IUF9NQVhJTVVNEAQSJwojVGFyZ2V0U2VsZWN0VHlwZV9CQVRU",
            "TEVfQUJJTElUWV9NQVgQBRIbChdUYXJnZXRTZWxlY3RUeXBlX1JBTkRPTRAG",
            "QgmqAgZDb25maWdiBnByb3RvMw=="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { },
          new pbr::GeneratedClrTypeInfo(new[] {typeof(global::Config.AbilityStageClass), typeof(global::Config.ItemDetailType), typeof(global::Config.RoleCategory), typeof(global::Config.RoleType), typeof(global::Config.BuffClass), typeof(global::Config.AbilityDetailClass), typeof(global::Config.TriggerEventType), typeof(global::Config.ConversionType), typeof(global::Config.ShapePartType), typeof(global::Config.Shape), typeof(global::Config.AbilitySpaceClass), typeof(global::Config.RangeType), typeof(global::Config.TriggerPosType), typeof(global::Config.BuffStatusType), typeof(global::Config.DeathTimeType), typeof(global::Config.WeaponCategory), typeof(global::Config.BuffType), typeof(global::Config.EffectType), typeof(global::Config.TargetCampType), typeof(global::Config.TargetSelectType), }, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::Config.Auto_Generate_Ability_State_Index), global::Config.Auto_Generate_Ability_State_Index.Parser, new[]{ "ID", "GroupIndex", "Describe" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Config.HitCheckInfo), global::Config.HitCheckInfo.Parser, new[]{ "HitCheckID", "Start", "RangeType", "Range", "Radius", "Angle", "Length", "Width", "CenterOffset", "HorizontalOffset", "HorizontalSpeed", "HorizontalAcceleratedASpeed", "VerticalSpeed", "VerticalAcceleratedSpeed", "HitHeight", "ValidHitHeight", "HorizontalSpeedOnFloat", "Duration", "AttackerKartunTime", "HitKartunTime", "IgnoreHitHistory", "IsUseAttackerDirection", "HitDownDuration", "IsThump", "NoReoverHitKartunTime", "UseHitDownDuration", "IsLargeHitBack", "IsTargetChangeSpeed", "TargetSpeed", "ChangeSpeedTime" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Config.AbilitySpeedInfo), global::Config.AbilitySpeedInfo.Parser, new[]{ "Start", "Duration", "AbilitySpeedByTimeline" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Config.TalkContent), global::Config.TalkContent.Parser, new[]{ "ID", "Speaker", "Content", "Delta" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Config.Timeline), global::Config.Timeline.Parser, new[]{ "TICKINTERVAL", "ID", "IsLoop", "Duration", "RecoverTime", "ComboOverTime", "IsFinalAction", "IsNeedLock", "IsUseConfigY", "IsUseConfigX", "ThrownIgnoreGraph", "ThrownCanOutRange", "ThrownOutRangeSpawnID", "ArrivedCreateThrownTimelineID", "IsDependCasterForThrown", "UseTangentMove", "UseDefaultCamera", "UseCameraMove", "TransformActionInfo", "RangeType", "Radius", "Angle", "Length", "Width", "StartFrame", "EndFrame", "IsCustomAttackPoint", "CustomAttackPointDistance", "CDCompensationList", "PostSpwanThrownEvents", "PostDespownThronEvents", "HitTimeList", "MoveActionTimelineNode", "InputActionTimelineNode", "LockAcionList", "ThrownCollisionCheckInfoList", "ThrownLockActionInfoList", "CameraTypeInfoList", "ThrownBackActionInfoList", "ShapeEnableInfoList", "AbilityStateInfoList", "AbilitySpeedInfoList", "ShapeInfoList", "ExportRelativeDisplacement" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Config.ShapeInfo), global::Config.ShapeInfo.Parser, new[]{ "Start", "Duration", "ShapeItemInfoList" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Config.Auto_Generate_Interrupt_Self), global::Config.Auto_Generate_Interrupt_Self.Parser, new[]{ "ID", "CanInterrupt" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Config.VectorInt3), global::Config.VectorInt3.Parser, new[]{ "X", "Y", "Z" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Config.ShapeItemInfo), global::Config.ShapeItemInfo.Parser, new[]{ "ShapePartType", "Offset", "Size", "Enable" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Config.AbilityConfig), global::Config.AbilityConfig.Parser, new[]{ "ID", "CD", "MaxUseCount", "AbilityClass", "HitDamageBasics", "HitDamagePec", "PostureValueConsume", "BalanceValueConsume", "LastHit", "RelateSkill" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Config.RoleConfig), global::Config.RoleConfig.Parser, new[]{ "ID", "AdditionalRoleIDs", "RoleCategory", "ShapePartTypes", "Radius", "CameraDistance", "CameraHeight", "CameraLookAtHeight", "DeathTime", "ModelPath", "ModelName", "Melees", "Ability", "RageAbility", "AvoidAbility", "BaseHP", "BaseAttack", "BaseDefend", "GrowHPByLevel", "GrowAttackByLevel", "GrowDefendByLevel", "GrowHPByStar", "GrowAttackByStar", "UseRunMoveCurve", "Speed", "GrowDefendByStar", "RoleType", "HitRecoverID", "HitBackRecoverID", "HitAirID", "HitUpID", "HitDownID", "HitFloorID", "GetUpID", "HitUpAirID", "Run", "Idle", "Weight", "RunLeft", "RunRight", "Death", "NoAnimationDeath", "AirDeath", "Appear", "MovementStop", "CanHitBack", "CanHitUp", "UseRushMoveCurve", "RushID", "RushStopID", "RushSpeed", "HitBackValidTime", "BalanceValue" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Config.buff), global::Config.buff.Parser, new[]{ "ID", "BuffId", "Name", "Remark", "Type", "SubType", "DamageType", "KeepTime", "Floor", "SubFloor" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Config.LockActionNode), global::Config.LockActionNode.Parser, new[]{ "Start", "Duration" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Config.Auto_Generate_Interrupt_Other), global::Config.Auto_Generate_Interrupt_Other.Parser, new[]{ "ID", "CanInterrupt" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Config.TimelineRootMotionConfig), global::Config.TimelineRootMotionConfig.Parser, new[]{ "ID", "ModelID", "ActionName", "YBakeIntoPose", "YOriginalOrRootNode", "XZBakeIntoPose", "XZOriginalOrRootNode" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Config.ShapeEnableInfo), global::Config.ShapeEnableInfo.Parser, new[]{ "Start", "Duration", "IsEnable" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Config.InterestConfig), global::Config.InterestConfig.Parser, new[]{ "ID", "Group" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Config.ThrownCollisionCheckInfo), global::Config.ThrownCollisionCheckInfo.Parser, new[]{ "Start", "Duration", "RangeType", "Radius", "Angle", "Length", "Width", "Height", "CenterOffset", "IgnoreHitHistory", "ThrownBehaviourOnCollision", "SpawnThrownTimelineID", "ChangeTargetCountLimit" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Config.HitAudio), global::Config.HitAudio.Parser, new[]{ "ID", "WeaponCategory", "RoleCategory", "AudioClipPath" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Config.MoveActionTimelineNode), global::Config.MoveActionTimelineNode.Parser, new[]{ "Enable", "Start", "Duration", "AnimationMove" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Config.ThrownLockActionInfo), global::Config.ThrownLockActionInfo.Parser, new[]{ "Start", "Duration", "RangeType", "Radius", "Angle", "Length", "Width", "Height", "CenterOffset", "ThrownBehaviourOnCollision", "SpawnThrownTimelineID", "ChangeTargetCountLimit", "TurnRate", "LockEndOperation" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Config.Int3), global::Config.Int3.Parser, new[]{ "X", "Y", "Z" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Config.PostDespawnThrownEventInfo), global::Config.PostDespawnThrownEventInfo.Parser, new[]{ "Start", "ID" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Config.CDCompensationInfo), global::Config.CDCompensationInfo.Parser, new[]{ "Start", "Duration", "CDCompensation" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Config.Hero_Attrib), global::Config.Hero_Attrib.Parser, new[]{ "ID", "Varname", "Name", "Remark" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Config.InputActionTimelineNode), global::Config.InputActionTimelineNode.Parser, new[]{ "Enable", "Start", "Duration" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Config.PostSpwanThrownEventInfo), global::Config.PostSpwanThrownEventInfo.Parser, new[]{ "Start", "ID", "TargetCampType", "CenterOffset", "SpawnForward", "RangeType", "Radius", "Angle", "Length", "Width", "Height", "TargetSelectType", "UseCommon" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Config.EntityVarName), global::Config.EntityVarName.Parser, new[]{ "ID", "Name" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Config.BuffConfig), global::Config.BuffConfig.Parser, new[]{ "ID", "Type", "Name", "Status", "Target", "Count", "During", "Tick", "CompulsoryLift", "TriggerRangeType", "Range", "DamageEffectType", "DamageEffectValue", "AddtiveEffectType", "AddtiveEffectFactor", "LimitAbility", "ShieldValue", "LeechLifeType", "LeechLifeParam", "TransformID", "TransformAttackArr", "TransformSkillArr" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Config.CameraTypeInfo), global::Config.CameraTypeInfo.Parser, new[]{ "Start", "Duration", "CameraType", "EndPosition" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Config.AbilityStateInfo), global::Config.AbilityStateInfo.Parser, new[]{ "Start", "Duration", "AbilityStateIndex" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Config.SceneMap), global::Config.SceneMap.Parser, new[]{ "ID", "MapDataPath", "MonsterNormalLevel", "MonsterElitelLevel", "MonsterBossLevel", "MonsterStaMultiple", "MonsterAtkMultiple", "MonsterRatioMultiple", "MonsterBossHPStripNumber", "ExternalParam" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Config.ThrownBackActionInfo), global::Config.ThrownBackActionInfo.Parser, new[]{ "Start", "Duration", "OnceCalc", "Offset", "MinSpeed", "MaxSpeed" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Config.TransformActionInfo), global::Config.TransformActionInfo.Parser, new[]{ "Start", "TransformRoleID", "TransformActionID" }, null, null, null)
          }));
    }
    #endregion

  }
  #region Enums
  public enum AbilityStageClass {
    [pbr::OriginalName("AbilityStageClass_NONE")] None = 0,
    [pbr::OriginalName("AbilityStageClass_CASTANIMATION")] Castanimation = 1,
    [pbr::OriginalName("AbilityStageClass_CASTPOINT")] Castpoint = 2,
    [pbr::OriginalName("AbilityStageClass_CASTBACKSWING")] Castbackswing = 3,
    [pbr::OriginalName("AbilityStageClass_CASTMOVESWING")] Castmoveswing = 4,
  }

  public enum ItemDetailType {
    [pbr::OriginalName("ItemDetailType_NONE")] None = 0,
  }

  public enum RoleCategory {
    [pbr::OriginalName("RoleCategory_NONE")] None = 0,
    [pbr::OriginalName("RoleCategory_HUMAN")] Human = 1,
    [pbr::OriginalName("RoleCategory_VIRTUAL")] Virtual = 2,
    [pbr::OriginalName("RoleCategory_METAL")] Metal = 3,
  }

  public enum RoleType {
    [pbr::OriginalName("RoleType_NONE")] None = 0,
    [pbr::OriginalName("RoleType_PLAYER")] Player = 1,
    [pbr::OriginalName("RoleType_ENEMY")] Enemy = 2,
    [pbr::OriginalName("RoleType_NEUTRAL")] Neutral = 4,
    [pbr::OriginalName("RoleType_BUNKER")] Bunker = 8,
    [pbr::OriginalName("RoleType_TRIGGER")] Trigger = 16,
    [pbr::OriginalName("RoleType_TRAP")] Trap = 32,
    [pbr::OriginalName("RoleType_BOX")] Box = 64,
    [pbr::OriginalName("RoleType_FRIEND")] Friend = 128,
  }

  public enum BuffClass {
    [pbr::OriginalName("BuffClass_NONE")] None = 0,
    [pbr::OriginalName("BuffClass_STATUS_TYPE_SLOW")] StatusTypeSlow = 1,
    [pbr::OriginalName("BuffClass_STATUS_TYPE_BLIND")] StatusTypeBlind = 2,
    [pbr::OriginalName("BuffClass_STATUS_TYPE_CHAOS")] StatusTypeChaos = 3,
    [pbr::OriginalName("BuffClass_STATUS_TYPE_DISARM")] StatusTypeDisarm = 4,
    [pbr::OriginalName("BuffClass_STATUS_TYPE_SILENT")] StatusTypeSilent = 5,
    [pbr::OriginalName("BuffClass_STATUS_TYPE_STOP")] StatusTypeStop = 6,
    [pbr::OriginalName("BuffClass_STATUS_TYPE_FROST")] StatusTypeFrost = 7,
    [pbr::OriginalName("BuffClass_STATUS_TYPE_SWIM")] StatusTypeSwim = 8,
    [pbr::OriginalName("BuffClass_STATUS_TYPE_PARALYSIS")] StatusTypeParalysis = 9,
    [pbr::OriginalName("BuffClass_STATUS_TYPE_THORNS")] StatusTypeThorns = 10,
    [pbr::OriginalName("BuffClass_STATUS_TYPE_FRAIL")] StatusTypeFrail = 11,
    [pbr::OriginalName("BuffClass_STATUS_TYPE_LOCK")] StatusTypeLock = 12,
    [pbr::OriginalName("BuffClass_STATUS_TYPE_BLOOD")] StatusTypeBlood = 13,
    [pbr::OriginalName("BuffClass_STATUS_TYPE_POISON")] StatusTypePoison = 14,
    [pbr::OriginalName("BuffClass_STATUS_TYPE_FIRING")] StatusTypeFiring = 15,
    [pbr::OriginalName("BuffClass_STATUS_TYPE_FEEBLE")] StatusTypeFeeble = 16,
    [pbr::OriginalName("BuffClass_STATUS_TYPE_BABA")] StatusTypeBaba = 17,
    [pbr::OriginalName("BuffClass_STATUS_TYPE_SUPERARMOR")] StatusTypeSuperarmor = 18,
    [pbr::OriginalName("BuffClass_STATUS_TYPE_RECOVER")] StatusTypeRecover = 19,
    [pbr::OriginalName("BuffClass_STATUS_TYPE_MAXHP")] StatusTypeMaxhp = 20,
    [pbr::OriginalName("BuffClass_STATUS_TYPE_ATTACK")] StatusTypeAttack = 21,
    [pbr::OriginalName("BuffClass_STATUS_TYPE_DEFENSE")] StatusTypeDefense = 22,
    [pbr::OriginalName("BuffClass_STATUS_TYPE_PHYDEFENSE")] StatusTypePhydefense = 23,
    [pbr::OriginalName("BuffClass_STATUS_TYPE_SPEDEFENSE")] StatusTypeSpedefense = 24,
    [pbr::OriginalName("BuffClass_STATUS_TYPE_DAMAGE")] StatusTypeDamage = 25,
    [pbr::OriginalName("BuffClass_STATUS_TYPE_ORDDAMAGE")] StatusTypeOrddamage = 26,
    [pbr::OriginalName("BuffClass_STATUS_TYPE_SKILLDAMAGE")] StatusTypeSkilldamage = 27,
    [pbr::OriginalName("BuffClass_STATUS_TYPE_CRIT")] StatusTypeCrit = 28,
    [pbr::OriginalName("BuffClass_STATUS_TYPE_CRITDAMAGE")] StatusTypeCritdamage = 29,
    [pbr::OriginalName("BuffClass_STATUS_TYPE_COOLDOWN")] StatusTypeCooldown = 30,
    [pbr::OriginalName("BuffClass_STATUS_TYPE_SPEED")] StatusTypeSpeed = 31,
    [pbr::OriginalName("BuffClass_STATUS_TYPE_TENACITY")] StatusTypeTenacity = 32,
    [pbr::OriginalName("BuffClass_STATUS_TYPE_HIT_ACTION_SPEED")] StatusTypeHitActionSpeed = 33,
    [pbr::OriginalName("BuffClass_STATUS_TYPE_1034_1")] StatusType10341 = 103401,
    [pbr::OriginalName("BuffClass_STATUS_TYPE_1034_2")] StatusType10342 = 103402,
    [pbr::OriginalName("BuffClass_STATUS_TYPE_1039_1")] StatusType10391 = 103901,
    [pbr::OriginalName("BuffClass_STATUS_TYPE_1046_1")] StatusType10461 = 104601,
    [pbr::OriginalName("BuffClass_STATUS_TYPE_1045_1")] StatusType10451 = 104501,
    [pbr::OriginalName("BuffClass_STATUS_TYPE_1048_1")] StatusType10481 = 104801,
    [pbr::OriginalName("BuffClass_STATUS_TYPE_1048_2")] StatusType10482 = 104802,
    [pbr::OriginalName("BuffClass_STATUS_TYPE_1050_1")] StatusType10501 = 105001,
    [pbr::OriginalName("BuffClass_STATUS_TYPE_1066_1")] StatusType10661 = 106601,
    [pbr::OriginalName("BuffClass_STATUS_TYPE_1066_2")] StatusType10662 = 106602,
    [pbr::OriginalName("BuffClass_STATUS_TYPE_1066_3")] StatusType10663 = 106603,
    [pbr::OriginalName("BuffClass_STATUS_TYPE_1066_4")] StatusType10664 = 106604,
    [pbr::OriginalName("BuffClass_STATUS_TYPE_1066_5")] StatusType10665 = 106605,
    [pbr::OriginalName("BuffClass_STATUS_TYPE_1066_6")] StatusType10666 = 106606,
  }

  public enum AbilityDetailClass {
    [pbr::OriginalName("AbilityDetailClass_NONE")] None = 0,
    [pbr::OriginalName("AbilityDetailClass_LIGHTATTACK")] Lightattack = 1,
    [pbr::OriginalName("AbilityDetailClass_SKILL")] Skill = 2,
    [pbr::OriginalName("AbilityDetailClass_AVOID")] Avoid = 3,
    [pbr::OriginalName("AbilityDetailClass_DEAD")] Dead = 4,
    [pbr::OriginalName("AbilityDetailClass_DEFENSE")] Defense = 5,
    [pbr::OriginalName("AbilityDetailClass_SKILLMOVE")] Skillmove = 6,
    [pbr::OriginalName("AbilityDetailClass_HEAVYATTACK")] Heavyattack = 7,
    [pbr::OriginalName("AbilityDetailClass_ULTIMATE")] Ultimate = 8,
    [pbr::OriginalName("AbilityDetailClass_RUN")] Run = 9,
    [pbr::OriginalName("AbilityDetailClass_IDLE")] Idle = 10,
    [pbr::OriginalName("AbilityDetailClass_ENDURE")] Endure = 11,
    [pbr::OriginalName("AbilityDetailClass_HIT")] Hit = 12,
    [pbr::OriginalName("AbilityDetailClass_MONSTERELITEATTACK")] Monstereliteattack = 13,
    [pbr::OriginalName("AbilityDetailClass_MONSTERELITESKILL")] Monstereliteskill = 14,
    [pbr::OriginalName("AbilityDetailClass_CHARGE")] Charge = 15,
    [pbr::OriginalName("AbilityDetailClass_MONSTERSKILL")] Monsterskill = 16,
    [pbr::OriginalName("AbilityDetailClass_HITGROUND")] Hitground = 17,
    [pbr::OriginalName("AbilityDetailClass_FALLGROUND")] Fallground = 18,
  }

  public enum TriggerEventType {
    [pbr::OriginalName("TriggerEventType_MAPINIT")] Mapinit = 0,
    [pbr::OriginalName("TriggerEventType_UNITENTERAREA")] Unitenterarea = 1,
    [pbr::OriginalName("TriggerEventType_UNITDIE")] Unitdie = 2,
    [pbr::OriginalName("TriggerEventType_UNITATTRCHANGE")] Unitattrchange = 3,
    [pbr::OriginalName("TriggerEventType_UNITPREPARECAST")] Unitpreparecast = 4,
    [pbr::OriginalName("TriggerEventType_CHANGEATTARGE")] Changeattarge = 5,
    [pbr::OriginalName("TriggerEventType_UNITACCEPTDAMAGE")] Unitacceptdamage = 6,
  }

  public enum ConversionType {
    [pbr::OriginalName("ConversionType_NONE")] None = 0,
    [pbr::OriginalName("ConversionType_FIXED")] Fixed = 1,
    [pbr::OriginalName("ConversionType_PERCENTAGE")] Percentage = 2,
  }

  public enum ShapePartType {
    [pbr::OriginalName("ShapePartType_BODY")] Body = 0,
    [pbr::OriginalName("ShapePartType_FORELEG")] Foreleg = 1,
    [pbr::OriginalName("ShapePartType_HINDLEG")] Hindleg = 2,
  }

  public enum Shape {
    [pbr::OriginalName("Shape_NONE")] None = 0,
    [pbr::OriginalName("Shape_CIRCLE")] Circle = 1,
    [pbr::OriginalName("Shape_SECTOR")] Sector = 2,
  }

  public enum AbilitySpaceClass {
    [pbr::OriginalName("AbilitySpaceClass_NONE")] None = 0,
    [pbr::OriginalName("AbilitySpaceClass_GROUND")] Ground = 1,
    [pbr::OriginalName("AbilitySpaceClass_AIR")] Air = 2,
  }

  public enum RangeType {
    [pbr::OriginalName("RangeType_NONE")] None = 0,
    [pbr::OriginalName("RangeType_STRAIGHTLINE")] Straightline = 1,
    [pbr::OriginalName("RangeType_SECTOR")] Sector = 2,
    [pbr::OriginalName("RangeType_ROUNDNESS")] Roundness = 3,
    [pbr::OriginalName("RangeType_RECTANGLE")] Rectangle = 4,
    [pbr::OriginalName("RangeType_MULTI_DIRECTION")] MultiDirection = 5,
  }

  public enum TriggerPosType {
    [pbr::OriginalName("TriggerPosType_NONE")] None = 0,
    [pbr::OriginalName("TriggerPosType_ONESELF")] Oneself = 1,
    [pbr::OriginalName("TriggerPosType_TARGET")] Target = 2,
  }

  public enum BuffStatusType {
    [pbr::OriginalName("BuffStatusType_NONE")] None = 0,
    [pbr::OriginalName("BuffStatusType_BLEED")] Bleed = 1,
    [pbr::OriginalName("BuffStatusType_FIRING")] Firing = 2,
    [pbr::OriginalName("BuffStatusType_ENTANGLE")] Entangle = 3,
    [pbr::OriginalName("BuffStatusType_IMMOBILIZE")] Immobilize = 4,
    [pbr::OriginalName("BuffStatusType_STUN")] Stun = 5,
    [pbr::OriginalName("BuffStatusType_SILENCE")] Silence = 6,
    [pbr::OriginalName("BuffStatusType_SLEEP")] Sleep = 7,
    [pbr::OriginalName("BuffStatusType_FEAR")] Fear = 8,
    [pbr::OriginalName("BuffStatusType_POISONING")] Poisoning = 9,
    [pbr::OriginalName("BuffStatusType_INVINCIBLE")] Invincible = 10,
    [pbr::OriginalName("BuffStatusType_LOWER_DEF")] LowerDef = 11,
    [pbr::OriginalName("BuffStatusType_LOWER_ACCURACY")] LowerAccuracy = 12,
    [pbr::OriginalName("BuffStatusType_CONTINUE_REGAIN")] ContinueRegain = 13,
    [pbr::OriginalName("BuffStatusType_ENHANCE_DEF")] EnhanceDef = 14,
    [pbr::OriginalName("BuffStatusType_ENHANCE_ATK")] EnhanceAtk = 15,
    [pbr::OriginalName("BuffStatusType_DEATH")] Death = 16,
    [pbr::OriginalName("BuffStatusType_FREEZE")] Freeze = 17,
    [pbr::OriginalName("BuffStatusType_PARALYSIS")] Paralysis = 18,
    [pbr::OriginalName("BuffStatusType_STUPID")] Stupid = 19,
    [pbr::OriginalName("BuffStatusType_DISARM")] Disarm = 20,
    [pbr::OriginalName("BuffStatusType_SHIELD")] Shield = 21,
    [pbr::OriginalName("BuffStatusType_LEECH_LIFE")] LeechLife = 22,
    [pbr::OriginalName("BuffStatusType_TRANSFORM")] Transform = 23,
  }

  public enum DeathTimeType {
    [pbr::OriginalName("DeathTimeType_IMMEDIATELYDEATH")] Immediatelydeath = 0,
    [pbr::OriginalName("DeathTimeType_WAITHITRECOVER")] Waithitrecover = 1,
    [pbr::OriginalName("DeathTimeType_WAITGETUP")] Waitgetup = 2,
  }

  public enum WeaponCategory {
    [pbr::OriginalName("WeaponCategory_NONE")] None = 0,
    [pbr::OriginalName("WeaponCategory_GLOVES")] Gloves = 1,
    [pbr::OriginalName("WeaponCategory_TACHI")] Tachi = 2,
    [pbr::OriginalName("WeaponCategory_WHIP")] Whip = 3,
    [pbr::OriginalName("WeaponCategory_QUITE")] Quite = 4,
  }

  public enum BuffType {
    [pbr::OriginalName("BuffType_NONE")] None = 0,
    [pbr::OriginalName("BuffType_BUFF")] Buff = 1,
    [pbr::OriginalName("BuffType_DEBUFF")] Debuff = 2,
  }

  public enum EffectType {
    [pbr::OriginalName("EffectType_NONE")] None = 0,
    [pbr::OriginalName("EffectType_GENERAL_HARM")] GeneralHarm = 1,
    [pbr::OriginalName("EffectType_HARM")] Harm = 2,
    [pbr::OriginalName("EffectType_EFFECT")] Effect = 3,
    [pbr::OriginalName("EffectType_DEATH")] Death = 4,
  }

  public enum TargetCampType {
    [pbr::OriginalName("TargetCampType_NONE")] None = 0,
    [pbr::OriginalName("TargetCampType_WE")] We = 1,
    [pbr::OriginalName("TargetCampType_ENEMY")] Enemy = 2,
    [pbr::OriginalName("TargetCampType_ONESELF")] Oneself = 3,
    [pbr::OriginalName("TargetCampType_ALL")] All = 4,
  }

  public enum TargetSelectType {
    [pbr::OriginalName("TargetSelectType_NONE")] None = 0,
    [pbr::OriginalName("TargetSelectType_NEAREST")] Nearest = 1,
    [pbr::OriginalName("TargetSelectType_FARTHEST")] Farthest = 2,
    [pbr::OriginalName("TargetSelectType_HP_LEAST")] HpLeast = 3,
    [pbr::OriginalName("TargetSelectType_HP_MAXIMUM")] HpMaximum = 4,
    [pbr::OriginalName("TargetSelectType_BATTLE_ABILITY_MAX")] BattleAbilityMax = 5,
    [pbr::OriginalName("TargetSelectType_RANDOM")] Random = 6,
  }

  #endregion

  #region Messages
  public sealed partial class Auto_Generate_Ability_State_Index : pb::IMessage<Auto_Generate_Ability_State_Index> {
    private static readonly pb::MessageParser<Auto_Generate_Ability_State_Index> _parser = new pb::MessageParser<Auto_Generate_Ability_State_Index>(() => new Auto_Generate_Ability_State_Index());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Auto_Generate_Ability_State_Index> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Config.ConfigReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Auto_Generate_Ability_State_Index() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Auto_Generate_Ability_State_Index(Auto_Generate_Ability_State_Index other) : this() {
      iD_ = other.iD_;
      groupIndex_ = other.groupIndex_;
      describe_ = other.describe_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Auto_Generate_Ability_State_Index Clone() {
      return new Auto_Generate_Ability_State_Index(this);
    }

    /// <summary>Field number for the "ID" field.</summary>
    public const int IDFieldNumber = 1;
    private int iD_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ID {
      get { return iD_; }
      set {
        iD_ = value;
      }
    }

    /// <summary>Field number for the "GroupIndex" field.</summary>
    public const int GroupIndexFieldNumber = 2;
    private int groupIndex_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int GroupIndex {
      get { return groupIndex_; }
      set {
        groupIndex_ = value;
      }
    }

    /// <summary>Field number for the "Describe" field.</summary>
    public const int DescribeFieldNumber = 3;
    private string describe_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Describe {
      get { return describe_; }
      set {
        describe_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Auto_Generate_Ability_State_Index);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Auto_Generate_Ability_State_Index other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (ID != other.ID) return false;
      if (GroupIndex != other.GroupIndex) return false;
      if (Describe != other.Describe) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (ID != 0) hash ^= ID.GetHashCode();
      if (GroupIndex != 0) hash ^= GroupIndex.GetHashCode();
      if (Describe.Length != 0) hash ^= Describe.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (ID != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(ID);
      }
      if (GroupIndex != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(GroupIndex);
      }
      if (Describe.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(Describe);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ID != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ID);
      }
      if (GroupIndex != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(GroupIndex);
      }
      if (Describe.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Describe);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Auto_Generate_Ability_State_Index other) {
      if (other == null) {
        return;
      }
      if (other.ID != 0) {
        ID = other.ID;
      }
      if (other.GroupIndex != 0) {
        GroupIndex = other.GroupIndex;
      }
      if (other.Describe.Length != 0) {
        Describe = other.Describe;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            ID = input.ReadInt32();
            break;
          }
          case 16: {
            GroupIndex = input.ReadInt32();
            break;
          }
          case 26: {
            Describe = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class HitCheckInfo : pb::IMessage<HitCheckInfo> {
    private static readonly pb::MessageParser<HitCheckInfo> _parser = new pb::MessageParser<HitCheckInfo>(() => new HitCheckInfo());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<HitCheckInfo> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Config.ConfigReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public HitCheckInfo() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public HitCheckInfo(HitCheckInfo other) : this() {
      hitCheckID_ = other.hitCheckID_;
      start_ = other.start_;
      rangeType_ = other.rangeType_;
      range_ = other.range_;
      radius_ = other.radius_;
      angle_ = other.angle_;
      length_ = other.length_;
      width_ = other.width_;
      centerOffset_ = other.centerOffset_;
      horizontalOffset_ = other.horizontalOffset_;
      horizontalSpeed_ = other.horizontalSpeed_;
      horizontalAcceleratedASpeed_ = other.horizontalAcceleratedASpeed_;
      verticalSpeed_ = other.verticalSpeed_;
      verticalAcceleratedSpeed_ = other.verticalAcceleratedSpeed_;
      hitHeight_ = other.hitHeight_;
      validHitHeight_ = other.validHitHeight_;
      horizontalSpeedOnFloat_ = other.horizontalSpeedOnFloat_;
      duration_ = other.duration_;
      attackerKartunTime_ = other.attackerKartunTime_;
      hitKartunTime_ = other.hitKartunTime_;
      ignoreHitHistory_ = other.ignoreHitHistory_;
      isUseAttackerDirection_ = other.isUseAttackerDirection_;
      hitDownDuration_ = other.hitDownDuration_;
      isThump_ = other.isThump_;
      noReoverHitKartunTime_ = other.noReoverHitKartunTime_;
      useHitDownDuration_ = other.useHitDownDuration_;
      isLargeHitBack_ = other.isLargeHitBack_;
      isTargetChangeSpeed_ = other.isTargetChangeSpeed_;
      targetSpeed_ = other.targetSpeed_;
      changeSpeedTime_ = other.changeSpeedTime_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public HitCheckInfo Clone() {
      return new HitCheckInfo(this);
    }

    /// <summary>Field number for the "HitCheckID" field.</summary>
    public const int HitCheckIDFieldNumber = 1;
    private int hitCheckID_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int HitCheckID {
      get { return hitCheckID_; }
      set {
        hitCheckID_ = value;
      }
    }

    /// <summary>Field number for the "Start" field.</summary>
    public const int StartFieldNumber = 2;
    private int start_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Start {
      get { return start_; }
      set {
        start_ = value;
      }
    }

    /// <summary>Field number for the "RangeType" field.</summary>
    public const int RangeTypeFieldNumber = 3;
    private int rangeType_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int RangeType {
      get { return rangeType_; }
      set {
        rangeType_ = value;
      }
    }

    /// <summary>Field number for the "Range" field.</summary>
    public const int RangeFieldNumber = 4;
    private int range_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Range {
      get { return range_; }
      set {
        range_ = value;
      }
    }

    /// <summary>Field number for the "Radius" field.</summary>
    public const int RadiusFieldNumber = 5;
    private int radius_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Radius {
      get { return radius_; }
      set {
        radius_ = value;
      }
    }

    /// <summary>Field number for the "Angle" field.</summary>
    public const int AngleFieldNumber = 6;
    private int angle_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Angle {
      get { return angle_; }
      set {
        angle_ = value;
      }
    }

    /// <summary>Field number for the "Length" field.</summary>
    public const int LengthFieldNumber = 7;
    private int length_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Length {
      get { return length_; }
      set {
        length_ = value;
      }
    }

    /// <summary>Field number for the "Width" field.</summary>
    public const int WidthFieldNumber = 8;
    private int width_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Width {
      get { return width_; }
      set {
        width_ = value;
      }
    }

    /// <summary>Field number for the "CenterOffset" field.</summary>
    public const int CenterOffsetFieldNumber = 9;
    private int centerOffset_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CenterOffset {
      get { return centerOffset_; }
      set {
        centerOffset_ = value;
      }
    }

    /// <summary>Field number for the "HorizontalOffset" field.</summary>
    public const int HorizontalOffsetFieldNumber = 10;
    private int horizontalOffset_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int HorizontalOffset {
      get { return horizontalOffset_; }
      set {
        horizontalOffset_ = value;
      }
    }

    /// <summary>Field number for the "HorizontalSpeed" field.</summary>
    public const int HorizontalSpeedFieldNumber = 11;
    private int horizontalSpeed_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int HorizontalSpeed {
      get { return horizontalSpeed_; }
      set {
        horizontalSpeed_ = value;
      }
    }

    /// <summary>Field number for the "HorizontalAcceleratedASpeed" field.</summary>
    public const int HorizontalAcceleratedASpeedFieldNumber = 12;
    private int horizontalAcceleratedASpeed_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int HorizontalAcceleratedASpeed {
      get { return horizontalAcceleratedASpeed_; }
      set {
        horizontalAcceleratedASpeed_ = value;
      }
    }

    /// <summary>Field number for the "VerticalSpeed" field.</summary>
    public const int VerticalSpeedFieldNumber = 13;
    private int verticalSpeed_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int VerticalSpeed {
      get { return verticalSpeed_; }
      set {
        verticalSpeed_ = value;
      }
    }

    /// <summary>Field number for the "VerticalAcceleratedSpeed" field.</summary>
    public const int VerticalAcceleratedSpeedFieldNumber = 14;
    private int verticalAcceleratedSpeed_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int VerticalAcceleratedSpeed {
      get { return verticalAcceleratedSpeed_; }
      set {
        verticalAcceleratedSpeed_ = value;
      }
    }

    /// <summary>Field number for the "HitHeight" field.</summary>
    public const int HitHeightFieldNumber = 15;
    private int hitHeight_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int HitHeight {
      get { return hitHeight_; }
      set {
        hitHeight_ = value;
      }
    }

    /// <summary>Field number for the "ValidHitHeight" field.</summary>
    public const int ValidHitHeightFieldNumber = 16;
    private int validHitHeight_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ValidHitHeight {
      get { return validHitHeight_; }
      set {
        validHitHeight_ = value;
      }
    }

    /// <summary>Field number for the "HorizontalSpeedOnFloat" field.</summary>
    public const int HorizontalSpeedOnFloatFieldNumber = 17;
    private int horizontalSpeedOnFloat_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int HorizontalSpeedOnFloat {
      get { return horizontalSpeedOnFloat_; }
      set {
        horizontalSpeedOnFloat_ = value;
      }
    }

    /// <summary>Field number for the "Duration" field.</summary>
    public const int DurationFieldNumber = 18;
    private int duration_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Duration {
      get { return duration_; }
      set {
        duration_ = value;
      }
    }

    /// <summary>Field number for the "AttackerKartunTime" field.</summary>
    public const int AttackerKartunTimeFieldNumber = 19;
    private int attackerKartunTime_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int AttackerKartunTime {
      get { return attackerKartunTime_; }
      set {
        attackerKartunTime_ = value;
      }
    }

    /// <summary>Field number for the "HitKartunTime" field.</summary>
    public const int HitKartunTimeFieldNumber = 20;
    private int hitKartunTime_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int HitKartunTime {
      get { return hitKartunTime_; }
      set {
        hitKartunTime_ = value;
      }
    }

    /// <summary>Field number for the "IgnoreHitHistory" field.</summary>
    public const int IgnoreHitHistoryFieldNumber = 21;
    private int ignoreHitHistory_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int IgnoreHitHistory {
      get { return ignoreHitHistory_; }
      set {
        ignoreHitHistory_ = value;
      }
    }

    /// <summary>Field number for the "IsUseAttackerDirection" field.</summary>
    public const int IsUseAttackerDirectionFieldNumber = 22;
    private int isUseAttackerDirection_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int IsUseAttackerDirection {
      get { return isUseAttackerDirection_; }
      set {
        isUseAttackerDirection_ = value;
      }
    }

    /// <summary>Field number for the "HitDownDuration" field.</summary>
    public const int HitDownDurationFieldNumber = 23;
    private int hitDownDuration_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int HitDownDuration {
      get { return hitDownDuration_; }
      set {
        hitDownDuration_ = value;
      }
    }

    /// <summary>Field number for the "IsThump" field.</summary>
    public const int IsThumpFieldNumber = 24;
    private int isThump_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int IsThump {
      get { return isThump_; }
      set {
        isThump_ = value;
      }
    }

    /// <summary>Field number for the "NoReoverHitKartunTime" field.</summary>
    public const int NoReoverHitKartunTimeFieldNumber = 25;
    private int noReoverHitKartunTime_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int NoReoverHitKartunTime {
      get { return noReoverHitKartunTime_; }
      set {
        noReoverHitKartunTime_ = value;
      }
    }

    /// <summary>Field number for the "UseHitDownDuration" field.</summary>
    public const int UseHitDownDurationFieldNumber = 26;
    private int useHitDownDuration_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int UseHitDownDuration {
      get { return useHitDownDuration_; }
      set {
        useHitDownDuration_ = value;
      }
    }

    /// <summary>Field number for the "IsLargeHitBack" field.</summary>
    public const int IsLargeHitBackFieldNumber = 27;
    private int isLargeHitBack_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int IsLargeHitBack {
      get { return isLargeHitBack_; }
      set {
        isLargeHitBack_ = value;
      }
    }

    /// <summary>Field number for the "IsTargetChangeSpeed" field.</summary>
    public const int IsTargetChangeSpeedFieldNumber = 28;
    private int isTargetChangeSpeed_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int IsTargetChangeSpeed {
      get { return isTargetChangeSpeed_; }
      set {
        isTargetChangeSpeed_ = value;
      }
    }

    /// <summary>Field number for the "TargetSpeed" field.</summary>
    public const int TargetSpeedFieldNumber = 29;
    private int targetSpeed_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int TargetSpeed {
      get { return targetSpeed_; }
      set {
        targetSpeed_ = value;
      }
    }

    /// <summary>Field number for the "ChangeSpeedTime" field.</summary>
    public const int ChangeSpeedTimeFieldNumber = 30;
    private int changeSpeedTime_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ChangeSpeedTime {
      get { return changeSpeedTime_; }
      set {
        changeSpeedTime_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as HitCheckInfo);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(HitCheckInfo other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (HitCheckID != other.HitCheckID) return false;
      if (Start != other.Start) return false;
      if (RangeType != other.RangeType) return false;
      if (Range != other.Range) return false;
      if (Radius != other.Radius) return false;
      if (Angle != other.Angle) return false;
      if (Length != other.Length) return false;
      if (Width != other.Width) return false;
      if (CenterOffset != other.CenterOffset) return false;
      if (HorizontalOffset != other.HorizontalOffset) return false;
      if (HorizontalSpeed != other.HorizontalSpeed) return false;
      if (HorizontalAcceleratedASpeed != other.HorizontalAcceleratedASpeed) return false;
      if (VerticalSpeed != other.VerticalSpeed) return false;
      if (VerticalAcceleratedSpeed != other.VerticalAcceleratedSpeed) return false;
      if (HitHeight != other.HitHeight) return false;
      if (ValidHitHeight != other.ValidHitHeight) return false;
      if (HorizontalSpeedOnFloat != other.HorizontalSpeedOnFloat) return false;
      if (Duration != other.Duration) return false;
      if (AttackerKartunTime != other.AttackerKartunTime) return false;
      if (HitKartunTime != other.HitKartunTime) return false;
      if (IgnoreHitHistory != other.IgnoreHitHistory) return false;
      if (IsUseAttackerDirection != other.IsUseAttackerDirection) return false;
      if (HitDownDuration != other.HitDownDuration) return false;
      if (IsThump != other.IsThump) return false;
      if (NoReoverHitKartunTime != other.NoReoverHitKartunTime) return false;
      if (UseHitDownDuration != other.UseHitDownDuration) return false;
      if (IsLargeHitBack != other.IsLargeHitBack) return false;
      if (IsTargetChangeSpeed != other.IsTargetChangeSpeed) return false;
      if (TargetSpeed != other.TargetSpeed) return false;
      if (ChangeSpeedTime != other.ChangeSpeedTime) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (HitCheckID != 0) hash ^= HitCheckID.GetHashCode();
      if (Start != 0) hash ^= Start.GetHashCode();
      if (RangeType != 0) hash ^= RangeType.GetHashCode();
      if (Range != 0) hash ^= Range.GetHashCode();
      if (Radius != 0) hash ^= Radius.GetHashCode();
      if (Angle != 0) hash ^= Angle.GetHashCode();
      if (Length != 0) hash ^= Length.GetHashCode();
      if (Width != 0) hash ^= Width.GetHashCode();
      if (CenterOffset != 0) hash ^= CenterOffset.GetHashCode();
      if (HorizontalOffset != 0) hash ^= HorizontalOffset.GetHashCode();
      if (HorizontalSpeed != 0) hash ^= HorizontalSpeed.GetHashCode();
      if (HorizontalAcceleratedASpeed != 0) hash ^= HorizontalAcceleratedASpeed.GetHashCode();
      if (VerticalSpeed != 0) hash ^= VerticalSpeed.GetHashCode();
      if (VerticalAcceleratedSpeed != 0) hash ^= VerticalAcceleratedSpeed.GetHashCode();
      if (HitHeight != 0) hash ^= HitHeight.GetHashCode();
      if (ValidHitHeight != 0) hash ^= ValidHitHeight.GetHashCode();
      if (HorizontalSpeedOnFloat != 0) hash ^= HorizontalSpeedOnFloat.GetHashCode();
      if (Duration != 0) hash ^= Duration.GetHashCode();
      if (AttackerKartunTime != 0) hash ^= AttackerKartunTime.GetHashCode();
      if (HitKartunTime != 0) hash ^= HitKartunTime.GetHashCode();
      if (IgnoreHitHistory != 0) hash ^= IgnoreHitHistory.GetHashCode();
      if (IsUseAttackerDirection != 0) hash ^= IsUseAttackerDirection.GetHashCode();
      if (HitDownDuration != 0) hash ^= HitDownDuration.GetHashCode();
      if (IsThump != 0) hash ^= IsThump.GetHashCode();
      if (NoReoverHitKartunTime != 0) hash ^= NoReoverHitKartunTime.GetHashCode();
      if (UseHitDownDuration != 0) hash ^= UseHitDownDuration.GetHashCode();
      if (IsLargeHitBack != 0) hash ^= IsLargeHitBack.GetHashCode();
      if (IsTargetChangeSpeed != 0) hash ^= IsTargetChangeSpeed.GetHashCode();
      if (TargetSpeed != 0) hash ^= TargetSpeed.GetHashCode();
      if (ChangeSpeedTime != 0) hash ^= ChangeSpeedTime.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (HitCheckID != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(HitCheckID);
      }
      if (Start != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Start);
      }
      if (RangeType != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(RangeType);
      }
      if (Range != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(Range);
      }
      if (Radius != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(Radius);
      }
      if (Angle != 0) {
        output.WriteRawTag(48);
        output.WriteInt32(Angle);
      }
      if (Length != 0) {
        output.WriteRawTag(56);
        output.WriteInt32(Length);
      }
      if (Width != 0) {
        output.WriteRawTag(64);
        output.WriteInt32(Width);
      }
      if (CenterOffset != 0) {
        output.WriteRawTag(72);
        output.WriteInt32(CenterOffset);
      }
      if (HorizontalOffset != 0) {
        output.WriteRawTag(80);
        output.WriteInt32(HorizontalOffset);
      }
      if (HorizontalSpeed != 0) {
        output.WriteRawTag(88);
        output.WriteInt32(HorizontalSpeed);
      }
      if (HorizontalAcceleratedASpeed != 0) {
        output.WriteRawTag(96);
        output.WriteInt32(HorizontalAcceleratedASpeed);
      }
      if (VerticalSpeed != 0) {
        output.WriteRawTag(104);
        output.WriteInt32(VerticalSpeed);
      }
      if (VerticalAcceleratedSpeed != 0) {
        output.WriteRawTag(112);
        output.WriteInt32(VerticalAcceleratedSpeed);
      }
      if (HitHeight != 0) {
        output.WriteRawTag(120);
        output.WriteInt32(HitHeight);
      }
      if (ValidHitHeight != 0) {
        output.WriteRawTag(128, 1);
        output.WriteInt32(ValidHitHeight);
      }
      if (HorizontalSpeedOnFloat != 0) {
        output.WriteRawTag(136, 1);
        output.WriteInt32(HorizontalSpeedOnFloat);
      }
      if (Duration != 0) {
        output.WriteRawTag(144, 1);
        output.WriteInt32(Duration);
      }
      if (AttackerKartunTime != 0) {
        output.WriteRawTag(152, 1);
        output.WriteInt32(AttackerKartunTime);
      }
      if (HitKartunTime != 0) {
        output.WriteRawTag(160, 1);
        output.WriteInt32(HitKartunTime);
      }
      if (IgnoreHitHistory != 0) {
        output.WriteRawTag(168, 1);
        output.WriteInt32(IgnoreHitHistory);
      }
      if (IsUseAttackerDirection != 0) {
        output.WriteRawTag(176, 1);
        output.WriteInt32(IsUseAttackerDirection);
      }
      if (HitDownDuration != 0) {
        output.WriteRawTag(184, 1);
        output.WriteInt32(HitDownDuration);
      }
      if (IsThump != 0) {
        output.WriteRawTag(192, 1);
        output.WriteInt32(IsThump);
      }
      if (NoReoverHitKartunTime != 0) {
        output.WriteRawTag(200, 1);
        output.WriteInt32(NoReoverHitKartunTime);
      }
      if (UseHitDownDuration != 0) {
        output.WriteRawTag(208, 1);
        output.WriteInt32(UseHitDownDuration);
      }
      if (IsLargeHitBack != 0) {
        output.WriteRawTag(216, 1);
        output.WriteInt32(IsLargeHitBack);
      }
      if (IsTargetChangeSpeed != 0) {
        output.WriteRawTag(224, 1);
        output.WriteInt32(IsTargetChangeSpeed);
      }
      if (TargetSpeed != 0) {
        output.WriteRawTag(232, 1);
        output.WriteInt32(TargetSpeed);
      }
      if (ChangeSpeedTime != 0) {
        output.WriteRawTag(240, 1);
        output.WriteInt32(ChangeSpeedTime);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (HitCheckID != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(HitCheckID);
      }
      if (Start != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Start);
      }
      if (RangeType != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(RangeType);
      }
      if (Range != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Range);
      }
      if (Radius != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Radius);
      }
      if (Angle != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Angle);
      }
      if (Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Length);
      }
      if (Width != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Width);
      }
      if (CenterOffset != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(CenterOffset);
      }
      if (HorizontalOffset != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(HorizontalOffset);
      }
      if (HorizontalSpeed != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(HorizontalSpeed);
      }
      if (HorizontalAcceleratedASpeed != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(HorizontalAcceleratedASpeed);
      }
      if (VerticalSpeed != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(VerticalSpeed);
      }
      if (VerticalAcceleratedSpeed != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(VerticalAcceleratedSpeed);
      }
      if (HitHeight != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(HitHeight);
      }
      if (ValidHitHeight != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(ValidHitHeight);
      }
      if (HorizontalSpeedOnFloat != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(HorizontalSpeedOnFloat);
      }
      if (Duration != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(Duration);
      }
      if (AttackerKartunTime != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(AttackerKartunTime);
      }
      if (HitKartunTime != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(HitKartunTime);
      }
      if (IgnoreHitHistory != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(IgnoreHitHistory);
      }
      if (IsUseAttackerDirection != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(IsUseAttackerDirection);
      }
      if (HitDownDuration != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(HitDownDuration);
      }
      if (IsThump != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(IsThump);
      }
      if (NoReoverHitKartunTime != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(NoReoverHitKartunTime);
      }
      if (UseHitDownDuration != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(UseHitDownDuration);
      }
      if (IsLargeHitBack != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(IsLargeHitBack);
      }
      if (IsTargetChangeSpeed != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(IsTargetChangeSpeed);
      }
      if (TargetSpeed != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(TargetSpeed);
      }
      if (ChangeSpeedTime != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(ChangeSpeedTime);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(HitCheckInfo other) {
      if (other == null) {
        return;
      }
      if (other.HitCheckID != 0) {
        HitCheckID = other.HitCheckID;
      }
      if (other.Start != 0) {
        Start = other.Start;
      }
      if (other.RangeType != 0) {
        RangeType = other.RangeType;
      }
      if (other.Range != 0) {
        Range = other.Range;
      }
      if (other.Radius != 0) {
        Radius = other.Radius;
      }
      if (other.Angle != 0) {
        Angle = other.Angle;
      }
      if (other.Length != 0) {
        Length = other.Length;
      }
      if (other.Width != 0) {
        Width = other.Width;
      }
      if (other.CenterOffset != 0) {
        CenterOffset = other.CenterOffset;
      }
      if (other.HorizontalOffset != 0) {
        HorizontalOffset = other.HorizontalOffset;
      }
      if (other.HorizontalSpeed != 0) {
        HorizontalSpeed = other.HorizontalSpeed;
      }
      if (other.HorizontalAcceleratedASpeed != 0) {
        HorizontalAcceleratedASpeed = other.HorizontalAcceleratedASpeed;
      }
      if (other.VerticalSpeed != 0) {
        VerticalSpeed = other.VerticalSpeed;
      }
      if (other.VerticalAcceleratedSpeed != 0) {
        VerticalAcceleratedSpeed = other.VerticalAcceleratedSpeed;
      }
      if (other.HitHeight != 0) {
        HitHeight = other.HitHeight;
      }
      if (other.ValidHitHeight != 0) {
        ValidHitHeight = other.ValidHitHeight;
      }
      if (other.HorizontalSpeedOnFloat != 0) {
        HorizontalSpeedOnFloat = other.HorizontalSpeedOnFloat;
      }
      if (other.Duration != 0) {
        Duration = other.Duration;
      }
      if (other.AttackerKartunTime != 0) {
        AttackerKartunTime = other.AttackerKartunTime;
      }
      if (other.HitKartunTime != 0) {
        HitKartunTime = other.HitKartunTime;
      }
      if (other.IgnoreHitHistory != 0) {
        IgnoreHitHistory = other.IgnoreHitHistory;
      }
      if (other.IsUseAttackerDirection != 0) {
        IsUseAttackerDirection = other.IsUseAttackerDirection;
      }
      if (other.HitDownDuration != 0) {
        HitDownDuration = other.HitDownDuration;
      }
      if (other.IsThump != 0) {
        IsThump = other.IsThump;
      }
      if (other.NoReoverHitKartunTime != 0) {
        NoReoverHitKartunTime = other.NoReoverHitKartunTime;
      }
      if (other.UseHitDownDuration != 0) {
        UseHitDownDuration = other.UseHitDownDuration;
      }
      if (other.IsLargeHitBack != 0) {
        IsLargeHitBack = other.IsLargeHitBack;
      }
      if (other.IsTargetChangeSpeed != 0) {
        IsTargetChangeSpeed = other.IsTargetChangeSpeed;
      }
      if (other.TargetSpeed != 0) {
        TargetSpeed = other.TargetSpeed;
      }
      if (other.ChangeSpeedTime != 0) {
        ChangeSpeedTime = other.ChangeSpeedTime;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            HitCheckID = input.ReadInt32();
            break;
          }
          case 16: {
            Start = input.ReadInt32();
            break;
          }
          case 24: {
            RangeType = input.ReadInt32();
            break;
          }
          case 32: {
            Range = input.ReadInt32();
            break;
          }
          case 40: {
            Radius = input.ReadInt32();
            break;
          }
          case 48: {
            Angle = input.ReadInt32();
            break;
          }
          case 56: {
            Length = input.ReadInt32();
            break;
          }
          case 64: {
            Width = input.ReadInt32();
            break;
          }
          case 72: {
            CenterOffset = input.ReadInt32();
            break;
          }
          case 80: {
            HorizontalOffset = input.ReadInt32();
            break;
          }
          case 88: {
            HorizontalSpeed = input.ReadInt32();
            break;
          }
          case 96: {
            HorizontalAcceleratedASpeed = input.ReadInt32();
            break;
          }
          case 104: {
            VerticalSpeed = input.ReadInt32();
            break;
          }
          case 112: {
            VerticalAcceleratedSpeed = input.ReadInt32();
            break;
          }
          case 120: {
            HitHeight = input.ReadInt32();
            break;
          }
          case 128: {
            ValidHitHeight = input.ReadInt32();
            break;
          }
          case 136: {
            HorizontalSpeedOnFloat = input.ReadInt32();
            break;
          }
          case 144: {
            Duration = input.ReadInt32();
            break;
          }
          case 152: {
            AttackerKartunTime = input.ReadInt32();
            break;
          }
          case 160: {
            HitKartunTime = input.ReadInt32();
            break;
          }
          case 168: {
            IgnoreHitHistory = input.ReadInt32();
            break;
          }
          case 176: {
            IsUseAttackerDirection = input.ReadInt32();
            break;
          }
          case 184: {
            HitDownDuration = input.ReadInt32();
            break;
          }
          case 192: {
            IsThump = input.ReadInt32();
            break;
          }
          case 200: {
            NoReoverHitKartunTime = input.ReadInt32();
            break;
          }
          case 208: {
            UseHitDownDuration = input.ReadInt32();
            break;
          }
          case 216: {
            IsLargeHitBack = input.ReadInt32();
            break;
          }
          case 224: {
            IsTargetChangeSpeed = input.ReadInt32();
            break;
          }
          case 232: {
            TargetSpeed = input.ReadInt32();
            break;
          }
          case 240: {
            ChangeSpeedTime = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class AbilitySpeedInfo : pb::IMessage<AbilitySpeedInfo> {
    private static readonly pb::MessageParser<AbilitySpeedInfo> _parser = new pb::MessageParser<AbilitySpeedInfo>(() => new AbilitySpeedInfo());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<AbilitySpeedInfo> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Config.ConfigReflection.Descriptor.MessageTypes[2]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AbilitySpeedInfo() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AbilitySpeedInfo(AbilitySpeedInfo other) : this() {
      start_ = other.start_;
      duration_ = other.duration_;
      abilitySpeedByTimeline_ = other.abilitySpeedByTimeline_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AbilitySpeedInfo Clone() {
      return new AbilitySpeedInfo(this);
    }

    /// <summary>Field number for the "Start" field.</summary>
    public const int StartFieldNumber = 1;
    private int start_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Start {
      get { return start_; }
      set {
        start_ = value;
      }
    }

    /// <summary>Field number for the "Duration" field.</summary>
    public const int DurationFieldNumber = 2;
    private int duration_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Duration {
      get { return duration_; }
      set {
        duration_ = value;
      }
    }

    /// <summary>Field number for the "AbilitySpeedByTimeline" field.</summary>
    public const int AbilitySpeedByTimelineFieldNumber = 3;
    private int abilitySpeedByTimeline_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int AbilitySpeedByTimeline {
      get { return abilitySpeedByTimeline_; }
      set {
        abilitySpeedByTimeline_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as AbilitySpeedInfo);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(AbilitySpeedInfo other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Start != other.Start) return false;
      if (Duration != other.Duration) return false;
      if (AbilitySpeedByTimeline != other.AbilitySpeedByTimeline) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Start != 0) hash ^= Start.GetHashCode();
      if (Duration != 0) hash ^= Duration.GetHashCode();
      if (AbilitySpeedByTimeline != 0) hash ^= AbilitySpeedByTimeline.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Start != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Start);
      }
      if (Duration != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Duration);
      }
      if (AbilitySpeedByTimeline != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(AbilitySpeedByTimeline);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Start != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Start);
      }
      if (Duration != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Duration);
      }
      if (AbilitySpeedByTimeline != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(AbilitySpeedByTimeline);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(AbilitySpeedInfo other) {
      if (other == null) {
        return;
      }
      if (other.Start != 0) {
        Start = other.Start;
      }
      if (other.Duration != 0) {
        Duration = other.Duration;
      }
      if (other.AbilitySpeedByTimeline != 0) {
        AbilitySpeedByTimeline = other.AbilitySpeedByTimeline;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Start = input.ReadInt32();
            break;
          }
          case 16: {
            Duration = input.ReadInt32();
            break;
          }
          case 24: {
            AbilitySpeedByTimeline = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class TalkContent : pb::IMessage<TalkContent> {
    private static readonly pb::MessageParser<TalkContent> _parser = new pb::MessageParser<TalkContent>(() => new TalkContent());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<TalkContent> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Config.ConfigReflection.Descriptor.MessageTypes[3]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TalkContent() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TalkContent(TalkContent other) : this() {
      iD_ = other.iD_;
      speaker_ = other.speaker_;
      content_ = other.content_;
      delta_ = other.delta_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TalkContent Clone() {
      return new TalkContent(this);
    }

    /// <summary>Field number for the "ID" field.</summary>
    public const int IDFieldNumber = 1;
    private int iD_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ID {
      get { return iD_; }
      set {
        iD_ = value;
      }
    }

    /// <summary>Field number for the "Speaker" field.</summary>
    public const int SpeakerFieldNumber = 2;
    private string speaker_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Speaker {
      get { return speaker_; }
      set {
        speaker_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "Content" field.</summary>
    public const int ContentFieldNumber = 3;
    private string content_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Content {
      get { return content_; }
      set {
        content_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "Delta" field.</summary>
    public const int DeltaFieldNumber = 4;
    private int delta_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Delta {
      get { return delta_; }
      set {
        delta_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as TalkContent);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(TalkContent other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (ID != other.ID) return false;
      if (Speaker != other.Speaker) return false;
      if (Content != other.Content) return false;
      if (Delta != other.Delta) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (ID != 0) hash ^= ID.GetHashCode();
      if (Speaker.Length != 0) hash ^= Speaker.GetHashCode();
      if (Content.Length != 0) hash ^= Content.GetHashCode();
      if (Delta != 0) hash ^= Delta.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (ID != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(ID);
      }
      if (Speaker.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Speaker);
      }
      if (Content.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(Content);
      }
      if (Delta != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(Delta);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ID != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ID);
      }
      if (Speaker.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Speaker);
      }
      if (Content.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Content);
      }
      if (Delta != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Delta);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(TalkContent other) {
      if (other == null) {
        return;
      }
      if (other.ID != 0) {
        ID = other.ID;
      }
      if (other.Speaker.Length != 0) {
        Speaker = other.Speaker;
      }
      if (other.Content.Length != 0) {
        Content = other.Content;
      }
      if (other.Delta != 0) {
        Delta = other.Delta;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            ID = input.ReadInt32();
            break;
          }
          case 18: {
            Speaker = input.ReadString();
            break;
          }
          case 26: {
            Content = input.ReadString();
            break;
          }
          case 32: {
            Delta = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class Timeline : pb::IMessage<Timeline> {
    private static readonly pb::MessageParser<Timeline> _parser = new pb::MessageParser<Timeline>(() => new Timeline());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Timeline> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Config.ConfigReflection.Descriptor.MessageTypes[4]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Timeline() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Timeline(Timeline other) : this() {
      tICKINTERVAL_ = other.tICKINTERVAL_;
      iD_ = other.iD_;
      isLoop_ = other.isLoop_;
      duration_ = other.duration_;
      recoverTime_ = other.recoverTime_;
      comboOverTime_ = other.comboOverTime_;
      isFinalAction_ = other.isFinalAction_;
      isNeedLock_ = other.isNeedLock_;
      isUseConfigY_ = other.isUseConfigY_;
      isUseConfigX_ = other.isUseConfigX_;
      thrownIgnoreGraph_ = other.thrownIgnoreGraph_;
      thrownCanOutRange_ = other.thrownCanOutRange_;
      thrownOutRangeSpawnID_ = other.thrownOutRangeSpawnID_;
      arrivedCreateThrownTimelineID_ = other.arrivedCreateThrownTimelineID_;
      isDependCasterForThrown_ = other.isDependCasterForThrown_;
      useTangentMove_ = other.useTangentMove_;
      useDefaultCamera_ = other.useDefaultCamera_;
      useCameraMove_ = other.useCameraMove_;
      transformActionInfo_ = other.transformActionInfo_;
      rangeType_ = other.rangeType_;
      radius_ = other.radius_;
      angle_ = other.angle_;
      length_ = other.length_;
      width_ = other.width_;
      startFrame_ = other.startFrame_;
      endFrame_ = other.endFrame_;
      isCustomAttackPoint_ = other.isCustomAttackPoint_;
      customAttackPointDistance_ = other.customAttackPointDistance_;
      cDCompensationList_ = other.cDCompensationList_;
      postSpwanThrownEvents_ = other.postSpwanThrownEvents_;
      postDespownThronEvents_ = other.postDespownThronEvents_;
      hitTimeList_ = other.hitTimeList_;
      moveActionTimelineNode_ = other.moveActionTimelineNode_;
      inputActionTimelineNode_ = other.inputActionTimelineNode_;
      lockAcionList_ = other.lockAcionList_;
      thrownCollisionCheckInfoList_ = other.thrownCollisionCheckInfoList_;
      thrownLockActionInfoList_ = other.thrownLockActionInfoList_;
      cameraTypeInfoList_ = other.cameraTypeInfoList_;
      thrownBackActionInfoList_ = other.thrownBackActionInfoList_;
      shapeEnableInfoList_ = other.shapeEnableInfoList_;
      abilityStateInfoList_ = other.abilityStateInfoList_;
      abilitySpeedInfoList_ = other.abilitySpeedInfoList_;
      shapeInfoList_ = other.shapeInfoList_;
      exportRelativeDisplacement_ = other.exportRelativeDisplacement_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Timeline Clone() {
      return new Timeline(this);
    }

    /// <summary>Field number for the "TICK_INTERVAL" field.</summary>
    public const int TICKINTERVALFieldNumber = 1;
    private int tICKINTERVAL_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int TICKINTERVAL {
      get { return tICKINTERVAL_; }
      set {
        tICKINTERVAL_ = value;
      }
    }

    /// <summary>Field number for the "ID" field.</summary>
    public const int IDFieldNumber = 2;
    private int iD_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ID {
      get { return iD_; }
      set {
        iD_ = value;
      }
    }

    /// <summary>Field number for the "IsLoop" field.</summary>
    public const int IsLoopFieldNumber = 3;
    private int isLoop_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int IsLoop {
      get { return isLoop_; }
      set {
        isLoop_ = value;
      }
    }

    /// <summary>Field number for the "Duration" field.</summary>
    public const int DurationFieldNumber = 4;
    private int duration_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Duration {
      get { return duration_; }
      set {
        duration_ = value;
      }
    }

    /// <summary>Field number for the "RecoverTime" field.</summary>
    public const int RecoverTimeFieldNumber = 5;
    private int recoverTime_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int RecoverTime {
      get { return recoverTime_; }
      set {
        recoverTime_ = value;
      }
    }

    /// <summary>Field number for the "ComboOverTime" field.</summary>
    public const int ComboOverTimeFieldNumber = 6;
    private int comboOverTime_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ComboOverTime {
      get { return comboOverTime_; }
      set {
        comboOverTime_ = value;
      }
    }

    /// <summary>Field number for the "IsFinalAction" field.</summary>
    public const int IsFinalActionFieldNumber = 7;
    private int isFinalAction_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int IsFinalAction {
      get { return isFinalAction_; }
      set {
        isFinalAction_ = value;
      }
    }

    /// <summary>Field number for the "IsNeedLock" field.</summary>
    public const int IsNeedLockFieldNumber = 8;
    private int isNeedLock_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int IsNeedLock {
      get { return isNeedLock_; }
      set {
        isNeedLock_ = value;
      }
    }

    /// <summary>Field number for the "IsUseConfigY" field.</summary>
    public const int IsUseConfigYFieldNumber = 9;
    private int isUseConfigY_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int IsUseConfigY {
      get { return isUseConfigY_; }
      set {
        isUseConfigY_ = value;
      }
    }

    /// <summary>Field number for the "IsUseConfigX" field.</summary>
    public const int IsUseConfigXFieldNumber = 10;
    private int isUseConfigX_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int IsUseConfigX {
      get { return isUseConfigX_; }
      set {
        isUseConfigX_ = value;
      }
    }

    /// <summary>Field number for the "ThrownIgnoreGraph" field.</summary>
    public const int ThrownIgnoreGraphFieldNumber = 11;
    private int thrownIgnoreGraph_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ThrownIgnoreGraph {
      get { return thrownIgnoreGraph_; }
      set {
        thrownIgnoreGraph_ = value;
      }
    }

    /// <summary>Field number for the "ThrownCanOutRange" field.</summary>
    public const int ThrownCanOutRangeFieldNumber = 12;
    private int thrownCanOutRange_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ThrownCanOutRange {
      get { return thrownCanOutRange_; }
      set {
        thrownCanOutRange_ = value;
      }
    }

    /// <summary>Field number for the "ThrownOutRangeSpawnID" field.</summary>
    public const int ThrownOutRangeSpawnIDFieldNumber = 13;
    private int thrownOutRangeSpawnID_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ThrownOutRangeSpawnID {
      get { return thrownOutRangeSpawnID_; }
      set {
        thrownOutRangeSpawnID_ = value;
      }
    }

    /// <summary>Field number for the "ArrivedCreateThrownTimelineID" field.</summary>
    public const int ArrivedCreateThrownTimelineIDFieldNumber = 14;
    private int arrivedCreateThrownTimelineID_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ArrivedCreateThrownTimelineID {
      get { return arrivedCreateThrownTimelineID_; }
      set {
        arrivedCreateThrownTimelineID_ = value;
      }
    }

    /// <summary>Field number for the "IsDependCasterForThrown" field.</summary>
    public const int IsDependCasterForThrownFieldNumber = 15;
    private int isDependCasterForThrown_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int IsDependCasterForThrown {
      get { return isDependCasterForThrown_; }
      set {
        isDependCasterForThrown_ = value;
      }
    }

    /// <summary>Field number for the "UseTangentMove" field.</summary>
    public const int UseTangentMoveFieldNumber = 16;
    private int useTangentMove_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int UseTangentMove {
      get { return useTangentMove_; }
      set {
        useTangentMove_ = value;
      }
    }

    /// <summary>Field number for the "UseDefaultCamera" field.</summary>
    public const int UseDefaultCameraFieldNumber = 17;
    private int useDefaultCamera_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int UseDefaultCamera {
      get { return useDefaultCamera_; }
      set {
        useDefaultCamera_ = value;
      }
    }

    /// <summary>Field number for the "UseCameraMove" field.</summary>
    public const int UseCameraMoveFieldNumber = 18;
    private int useCameraMove_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int UseCameraMove {
      get { return useCameraMove_; }
      set {
        useCameraMove_ = value;
      }
    }

    /// <summary>Field number for the "TransformActionInfo" field.</summary>
    public const int TransformActionInfoFieldNumber = 19;
    private int transformActionInfo_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int TransformActionInfo {
      get { return transformActionInfo_; }
      set {
        transformActionInfo_ = value;
      }
    }

    /// <summary>Field number for the "RangeType" field.</summary>
    public const int RangeTypeFieldNumber = 20;
    private int rangeType_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int RangeType {
      get { return rangeType_; }
      set {
        rangeType_ = value;
      }
    }

    /// <summary>Field number for the "Radius" field.</summary>
    public const int RadiusFieldNumber = 21;
    private int radius_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Radius {
      get { return radius_; }
      set {
        radius_ = value;
      }
    }

    /// <summary>Field number for the "Angle" field.</summary>
    public const int AngleFieldNumber = 22;
    private int angle_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Angle {
      get { return angle_; }
      set {
        angle_ = value;
      }
    }

    /// <summary>Field number for the "Length" field.</summary>
    public const int LengthFieldNumber = 23;
    private int length_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Length {
      get { return length_; }
      set {
        length_ = value;
      }
    }

    /// <summary>Field number for the "Width" field.</summary>
    public const int WidthFieldNumber = 24;
    private int width_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Width {
      get { return width_; }
      set {
        width_ = value;
      }
    }

    /// <summary>Field number for the "StartFrame" field.</summary>
    public const int StartFrameFieldNumber = 25;
    private int startFrame_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int StartFrame {
      get { return startFrame_; }
      set {
        startFrame_ = value;
      }
    }

    /// <summary>Field number for the "EndFrame" field.</summary>
    public const int EndFrameFieldNumber = 26;
    private int endFrame_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int EndFrame {
      get { return endFrame_; }
      set {
        endFrame_ = value;
      }
    }

    /// <summary>Field number for the "IsCustomAttackPoint" field.</summary>
    public const int IsCustomAttackPointFieldNumber = 27;
    private int isCustomAttackPoint_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int IsCustomAttackPoint {
      get { return isCustomAttackPoint_; }
      set {
        isCustomAttackPoint_ = value;
      }
    }

    /// <summary>Field number for the "CustomAttackPointDistance" field.</summary>
    public const int CustomAttackPointDistanceFieldNumber = 28;
    private int customAttackPointDistance_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CustomAttackPointDistance {
      get { return customAttackPointDistance_; }
      set {
        customAttackPointDistance_ = value;
      }
    }

    /// <summary>Field number for the "CDCompensationList" field.</summary>
    public const int CDCompensationListFieldNumber = 29;
    private int cDCompensationList_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CDCompensationList {
      get { return cDCompensationList_; }
      set {
        cDCompensationList_ = value;
      }
    }

    /// <summary>Field number for the "PostSpwanThrownEvents" field.</summary>
    public const int PostSpwanThrownEventsFieldNumber = 30;
    private int postSpwanThrownEvents_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int PostSpwanThrownEvents {
      get { return postSpwanThrownEvents_; }
      set {
        postSpwanThrownEvents_ = value;
      }
    }

    /// <summary>Field number for the "PostDespownThronEvents" field.</summary>
    public const int PostDespownThronEventsFieldNumber = 31;
    private int postDespownThronEvents_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int PostDespownThronEvents {
      get { return postDespownThronEvents_; }
      set {
        postDespownThronEvents_ = value;
      }
    }

    /// <summary>Field number for the "HitTimeList" field.</summary>
    public const int HitTimeListFieldNumber = 32;
    private int hitTimeList_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int HitTimeList {
      get { return hitTimeList_; }
      set {
        hitTimeList_ = value;
      }
    }

    /// <summary>Field number for the "MoveActionTimelineNode" field.</summary>
    public const int MoveActionTimelineNodeFieldNumber = 33;
    private int moveActionTimelineNode_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int MoveActionTimelineNode {
      get { return moveActionTimelineNode_; }
      set {
        moveActionTimelineNode_ = value;
      }
    }

    /// <summary>Field number for the "InputActionTimelineNode" field.</summary>
    public const int InputActionTimelineNodeFieldNumber = 34;
    private int inputActionTimelineNode_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int InputActionTimelineNode {
      get { return inputActionTimelineNode_; }
      set {
        inputActionTimelineNode_ = value;
      }
    }

    /// <summary>Field number for the "LockAcionList" field.</summary>
    public const int LockAcionListFieldNumber = 35;
    private int lockAcionList_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int LockAcionList {
      get { return lockAcionList_; }
      set {
        lockAcionList_ = value;
      }
    }

    /// <summary>Field number for the "ThrownCollisionCheckInfoList" field.</summary>
    public const int ThrownCollisionCheckInfoListFieldNumber = 36;
    private int thrownCollisionCheckInfoList_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ThrownCollisionCheckInfoList {
      get { return thrownCollisionCheckInfoList_; }
      set {
        thrownCollisionCheckInfoList_ = value;
      }
    }

    /// <summary>Field number for the "ThrownLockActionInfoList" field.</summary>
    public const int ThrownLockActionInfoListFieldNumber = 37;
    private int thrownLockActionInfoList_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ThrownLockActionInfoList {
      get { return thrownLockActionInfoList_; }
      set {
        thrownLockActionInfoList_ = value;
      }
    }

    /// <summary>Field number for the "CameraTypeInfoList" field.</summary>
    public const int CameraTypeInfoListFieldNumber = 38;
    private int cameraTypeInfoList_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CameraTypeInfoList {
      get { return cameraTypeInfoList_; }
      set {
        cameraTypeInfoList_ = value;
      }
    }

    /// <summary>Field number for the "ThrownBackActionInfoList" field.</summary>
    public const int ThrownBackActionInfoListFieldNumber = 39;
    private int thrownBackActionInfoList_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ThrownBackActionInfoList {
      get { return thrownBackActionInfoList_; }
      set {
        thrownBackActionInfoList_ = value;
      }
    }

    /// <summary>Field number for the "ShapeEnableInfoList" field.</summary>
    public const int ShapeEnableInfoListFieldNumber = 40;
    private int shapeEnableInfoList_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ShapeEnableInfoList {
      get { return shapeEnableInfoList_; }
      set {
        shapeEnableInfoList_ = value;
      }
    }

    /// <summary>Field number for the "AbilityStateInfoList" field.</summary>
    public const int AbilityStateInfoListFieldNumber = 41;
    private int abilityStateInfoList_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int AbilityStateInfoList {
      get { return abilityStateInfoList_; }
      set {
        abilityStateInfoList_ = value;
      }
    }

    /// <summary>Field number for the "AbilitySpeedInfoList" field.</summary>
    public const int AbilitySpeedInfoListFieldNumber = 42;
    private int abilitySpeedInfoList_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int AbilitySpeedInfoList {
      get { return abilitySpeedInfoList_; }
      set {
        abilitySpeedInfoList_ = value;
      }
    }

    /// <summary>Field number for the "ShapeInfoList" field.</summary>
    public const int ShapeInfoListFieldNumber = 43;
    private int shapeInfoList_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ShapeInfoList {
      get { return shapeInfoList_; }
      set {
        shapeInfoList_ = value;
      }
    }

    /// <summary>Field number for the "ExportRelativeDisplacement" field.</summary>
    public const int ExportRelativeDisplacementFieldNumber = 44;
    private int exportRelativeDisplacement_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ExportRelativeDisplacement {
      get { return exportRelativeDisplacement_; }
      set {
        exportRelativeDisplacement_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Timeline);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Timeline other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (TICKINTERVAL != other.TICKINTERVAL) return false;
      if (ID != other.ID) return false;
      if (IsLoop != other.IsLoop) return false;
      if (Duration != other.Duration) return false;
      if (RecoverTime != other.RecoverTime) return false;
      if (ComboOverTime != other.ComboOverTime) return false;
      if (IsFinalAction != other.IsFinalAction) return false;
      if (IsNeedLock != other.IsNeedLock) return false;
      if (IsUseConfigY != other.IsUseConfigY) return false;
      if (IsUseConfigX != other.IsUseConfigX) return false;
      if (ThrownIgnoreGraph != other.ThrownIgnoreGraph) return false;
      if (ThrownCanOutRange != other.ThrownCanOutRange) return false;
      if (ThrownOutRangeSpawnID != other.ThrownOutRangeSpawnID) return false;
      if (ArrivedCreateThrownTimelineID != other.ArrivedCreateThrownTimelineID) return false;
      if (IsDependCasterForThrown != other.IsDependCasterForThrown) return false;
      if (UseTangentMove != other.UseTangentMove) return false;
      if (UseDefaultCamera != other.UseDefaultCamera) return false;
      if (UseCameraMove != other.UseCameraMove) return false;
      if (TransformActionInfo != other.TransformActionInfo) return false;
      if (RangeType != other.RangeType) return false;
      if (Radius != other.Radius) return false;
      if (Angle != other.Angle) return false;
      if (Length != other.Length) return false;
      if (Width != other.Width) return false;
      if (StartFrame != other.StartFrame) return false;
      if (EndFrame != other.EndFrame) return false;
      if (IsCustomAttackPoint != other.IsCustomAttackPoint) return false;
      if (CustomAttackPointDistance != other.CustomAttackPointDistance) return false;
      if (CDCompensationList != other.CDCompensationList) return false;
      if (PostSpwanThrownEvents != other.PostSpwanThrownEvents) return false;
      if (PostDespownThronEvents != other.PostDespownThronEvents) return false;
      if (HitTimeList != other.HitTimeList) return false;
      if (MoveActionTimelineNode != other.MoveActionTimelineNode) return false;
      if (InputActionTimelineNode != other.InputActionTimelineNode) return false;
      if (LockAcionList != other.LockAcionList) return false;
      if (ThrownCollisionCheckInfoList != other.ThrownCollisionCheckInfoList) return false;
      if (ThrownLockActionInfoList != other.ThrownLockActionInfoList) return false;
      if (CameraTypeInfoList != other.CameraTypeInfoList) return false;
      if (ThrownBackActionInfoList != other.ThrownBackActionInfoList) return false;
      if (ShapeEnableInfoList != other.ShapeEnableInfoList) return false;
      if (AbilityStateInfoList != other.AbilityStateInfoList) return false;
      if (AbilitySpeedInfoList != other.AbilitySpeedInfoList) return false;
      if (ShapeInfoList != other.ShapeInfoList) return false;
      if (ExportRelativeDisplacement != other.ExportRelativeDisplacement) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (TICKINTERVAL != 0) hash ^= TICKINTERVAL.GetHashCode();
      if (ID != 0) hash ^= ID.GetHashCode();
      if (IsLoop != 0) hash ^= IsLoop.GetHashCode();
      if (Duration != 0) hash ^= Duration.GetHashCode();
      if (RecoverTime != 0) hash ^= RecoverTime.GetHashCode();
      if (ComboOverTime != 0) hash ^= ComboOverTime.GetHashCode();
      if (IsFinalAction != 0) hash ^= IsFinalAction.GetHashCode();
      if (IsNeedLock != 0) hash ^= IsNeedLock.GetHashCode();
      if (IsUseConfigY != 0) hash ^= IsUseConfigY.GetHashCode();
      if (IsUseConfigX != 0) hash ^= IsUseConfigX.GetHashCode();
      if (ThrownIgnoreGraph != 0) hash ^= ThrownIgnoreGraph.GetHashCode();
      if (ThrownCanOutRange != 0) hash ^= ThrownCanOutRange.GetHashCode();
      if (ThrownOutRangeSpawnID != 0) hash ^= ThrownOutRangeSpawnID.GetHashCode();
      if (ArrivedCreateThrownTimelineID != 0) hash ^= ArrivedCreateThrownTimelineID.GetHashCode();
      if (IsDependCasterForThrown != 0) hash ^= IsDependCasterForThrown.GetHashCode();
      if (UseTangentMove != 0) hash ^= UseTangentMove.GetHashCode();
      if (UseDefaultCamera != 0) hash ^= UseDefaultCamera.GetHashCode();
      if (UseCameraMove != 0) hash ^= UseCameraMove.GetHashCode();
      if (TransformActionInfo != 0) hash ^= TransformActionInfo.GetHashCode();
      if (RangeType != 0) hash ^= RangeType.GetHashCode();
      if (Radius != 0) hash ^= Radius.GetHashCode();
      if (Angle != 0) hash ^= Angle.GetHashCode();
      if (Length != 0) hash ^= Length.GetHashCode();
      if (Width != 0) hash ^= Width.GetHashCode();
      if (StartFrame != 0) hash ^= StartFrame.GetHashCode();
      if (EndFrame != 0) hash ^= EndFrame.GetHashCode();
      if (IsCustomAttackPoint != 0) hash ^= IsCustomAttackPoint.GetHashCode();
      if (CustomAttackPointDistance != 0) hash ^= CustomAttackPointDistance.GetHashCode();
      if (CDCompensationList != 0) hash ^= CDCompensationList.GetHashCode();
      if (PostSpwanThrownEvents != 0) hash ^= PostSpwanThrownEvents.GetHashCode();
      if (PostDespownThronEvents != 0) hash ^= PostDespownThronEvents.GetHashCode();
      if (HitTimeList != 0) hash ^= HitTimeList.GetHashCode();
      if (MoveActionTimelineNode != 0) hash ^= MoveActionTimelineNode.GetHashCode();
      if (InputActionTimelineNode != 0) hash ^= InputActionTimelineNode.GetHashCode();
      if (LockAcionList != 0) hash ^= LockAcionList.GetHashCode();
      if (ThrownCollisionCheckInfoList != 0) hash ^= ThrownCollisionCheckInfoList.GetHashCode();
      if (ThrownLockActionInfoList != 0) hash ^= ThrownLockActionInfoList.GetHashCode();
      if (CameraTypeInfoList != 0) hash ^= CameraTypeInfoList.GetHashCode();
      if (ThrownBackActionInfoList != 0) hash ^= ThrownBackActionInfoList.GetHashCode();
      if (ShapeEnableInfoList != 0) hash ^= ShapeEnableInfoList.GetHashCode();
      if (AbilityStateInfoList != 0) hash ^= AbilityStateInfoList.GetHashCode();
      if (AbilitySpeedInfoList != 0) hash ^= AbilitySpeedInfoList.GetHashCode();
      if (ShapeInfoList != 0) hash ^= ShapeInfoList.GetHashCode();
      if (ExportRelativeDisplacement != 0) hash ^= ExportRelativeDisplacement.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (TICKINTERVAL != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(TICKINTERVAL);
      }
      if (ID != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(ID);
      }
      if (IsLoop != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(IsLoop);
      }
      if (Duration != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(Duration);
      }
      if (RecoverTime != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(RecoverTime);
      }
      if (ComboOverTime != 0) {
        output.WriteRawTag(48);
        output.WriteInt32(ComboOverTime);
      }
      if (IsFinalAction != 0) {
        output.WriteRawTag(56);
        output.WriteInt32(IsFinalAction);
      }
      if (IsNeedLock != 0) {
        output.WriteRawTag(64);
        output.WriteInt32(IsNeedLock);
      }
      if (IsUseConfigY != 0) {
        output.WriteRawTag(72);
        output.WriteInt32(IsUseConfigY);
      }
      if (IsUseConfigX != 0) {
        output.WriteRawTag(80);
        output.WriteInt32(IsUseConfigX);
      }
      if (ThrownIgnoreGraph != 0) {
        output.WriteRawTag(88);
        output.WriteInt32(ThrownIgnoreGraph);
      }
      if (ThrownCanOutRange != 0) {
        output.WriteRawTag(96);
        output.WriteInt32(ThrownCanOutRange);
      }
      if (ThrownOutRangeSpawnID != 0) {
        output.WriteRawTag(104);
        output.WriteInt32(ThrownOutRangeSpawnID);
      }
      if (ArrivedCreateThrownTimelineID != 0) {
        output.WriteRawTag(112);
        output.WriteInt32(ArrivedCreateThrownTimelineID);
      }
      if (IsDependCasterForThrown != 0) {
        output.WriteRawTag(120);
        output.WriteInt32(IsDependCasterForThrown);
      }
      if (UseTangentMove != 0) {
        output.WriteRawTag(128, 1);
        output.WriteInt32(UseTangentMove);
      }
      if (UseDefaultCamera != 0) {
        output.WriteRawTag(136, 1);
        output.WriteInt32(UseDefaultCamera);
      }
      if (UseCameraMove != 0) {
        output.WriteRawTag(144, 1);
        output.WriteInt32(UseCameraMove);
      }
      if (TransformActionInfo != 0) {
        output.WriteRawTag(152, 1);
        output.WriteInt32(TransformActionInfo);
      }
      if (RangeType != 0) {
        output.WriteRawTag(160, 1);
        output.WriteInt32(RangeType);
      }
      if (Radius != 0) {
        output.WriteRawTag(168, 1);
        output.WriteInt32(Radius);
      }
      if (Angle != 0) {
        output.WriteRawTag(176, 1);
        output.WriteInt32(Angle);
      }
      if (Length != 0) {
        output.WriteRawTag(184, 1);
        output.WriteInt32(Length);
      }
      if (Width != 0) {
        output.WriteRawTag(192, 1);
        output.WriteInt32(Width);
      }
      if (StartFrame != 0) {
        output.WriteRawTag(200, 1);
        output.WriteInt32(StartFrame);
      }
      if (EndFrame != 0) {
        output.WriteRawTag(208, 1);
        output.WriteInt32(EndFrame);
      }
      if (IsCustomAttackPoint != 0) {
        output.WriteRawTag(216, 1);
        output.WriteInt32(IsCustomAttackPoint);
      }
      if (CustomAttackPointDistance != 0) {
        output.WriteRawTag(224, 1);
        output.WriteInt32(CustomAttackPointDistance);
      }
      if (CDCompensationList != 0) {
        output.WriteRawTag(232, 1);
        output.WriteInt32(CDCompensationList);
      }
      if (PostSpwanThrownEvents != 0) {
        output.WriteRawTag(240, 1);
        output.WriteInt32(PostSpwanThrownEvents);
      }
      if (PostDespownThronEvents != 0) {
        output.WriteRawTag(248, 1);
        output.WriteInt32(PostDespownThronEvents);
      }
      if (HitTimeList != 0) {
        output.WriteRawTag(128, 2);
        output.WriteInt32(HitTimeList);
      }
      if (MoveActionTimelineNode != 0) {
        output.WriteRawTag(136, 2);
        output.WriteInt32(MoveActionTimelineNode);
      }
      if (InputActionTimelineNode != 0) {
        output.WriteRawTag(144, 2);
        output.WriteInt32(InputActionTimelineNode);
      }
      if (LockAcionList != 0) {
        output.WriteRawTag(152, 2);
        output.WriteInt32(LockAcionList);
      }
      if (ThrownCollisionCheckInfoList != 0) {
        output.WriteRawTag(160, 2);
        output.WriteInt32(ThrownCollisionCheckInfoList);
      }
      if (ThrownLockActionInfoList != 0) {
        output.WriteRawTag(168, 2);
        output.WriteInt32(ThrownLockActionInfoList);
      }
      if (CameraTypeInfoList != 0) {
        output.WriteRawTag(176, 2);
        output.WriteInt32(CameraTypeInfoList);
      }
      if (ThrownBackActionInfoList != 0) {
        output.WriteRawTag(184, 2);
        output.WriteInt32(ThrownBackActionInfoList);
      }
      if (ShapeEnableInfoList != 0) {
        output.WriteRawTag(192, 2);
        output.WriteInt32(ShapeEnableInfoList);
      }
      if (AbilityStateInfoList != 0) {
        output.WriteRawTag(200, 2);
        output.WriteInt32(AbilityStateInfoList);
      }
      if (AbilitySpeedInfoList != 0) {
        output.WriteRawTag(208, 2);
        output.WriteInt32(AbilitySpeedInfoList);
      }
      if (ShapeInfoList != 0) {
        output.WriteRawTag(216, 2);
        output.WriteInt32(ShapeInfoList);
      }
      if (ExportRelativeDisplacement != 0) {
        output.WriteRawTag(224, 2);
        output.WriteInt32(ExportRelativeDisplacement);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (TICKINTERVAL != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(TICKINTERVAL);
      }
      if (ID != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ID);
      }
      if (IsLoop != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(IsLoop);
      }
      if (Duration != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Duration);
      }
      if (RecoverTime != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(RecoverTime);
      }
      if (ComboOverTime != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ComboOverTime);
      }
      if (IsFinalAction != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(IsFinalAction);
      }
      if (IsNeedLock != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(IsNeedLock);
      }
      if (IsUseConfigY != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(IsUseConfigY);
      }
      if (IsUseConfigX != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(IsUseConfigX);
      }
      if (ThrownIgnoreGraph != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ThrownIgnoreGraph);
      }
      if (ThrownCanOutRange != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ThrownCanOutRange);
      }
      if (ThrownOutRangeSpawnID != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ThrownOutRangeSpawnID);
      }
      if (ArrivedCreateThrownTimelineID != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ArrivedCreateThrownTimelineID);
      }
      if (IsDependCasterForThrown != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(IsDependCasterForThrown);
      }
      if (UseTangentMove != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(UseTangentMove);
      }
      if (UseDefaultCamera != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(UseDefaultCamera);
      }
      if (UseCameraMove != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(UseCameraMove);
      }
      if (TransformActionInfo != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(TransformActionInfo);
      }
      if (RangeType != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(RangeType);
      }
      if (Radius != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(Radius);
      }
      if (Angle != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(Angle);
      }
      if (Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(Length);
      }
      if (Width != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(Width);
      }
      if (StartFrame != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(StartFrame);
      }
      if (EndFrame != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(EndFrame);
      }
      if (IsCustomAttackPoint != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(IsCustomAttackPoint);
      }
      if (CustomAttackPointDistance != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(CustomAttackPointDistance);
      }
      if (CDCompensationList != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(CDCompensationList);
      }
      if (PostSpwanThrownEvents != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(PostSpwanThrownEvents);
      }
      if (PostDespownThronEvents != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(PostDespownThronEvents);
      }
      if (HitTimeList != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(HitTimeList);
      }
      if (MoveActionTimelineNode != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(MoveActionTimelineNode);
      }
      if (InputActionTimelineNode != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(InputActionTimelineNode);
      }
      if (LockAcionList != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(LockAcionList);
      }
      if (ThrownCollisionCheckInfoList != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(ThrownCollisionCheckInfoList);
      }
      if (ThrownLockActionInfoList != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(ThrownLockActionInfoList);
      }
      if (CameraTypeInfoList != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(CameraTypeInfoList);
      }
      if (ThrownBackActionInfoList != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(ThrownBackActionInfoList);
      }
      if (ShapeEnableInfoList != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(ShapeEnableInfoList);
      }
      if (AbilityStateInfoList != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(AbilityStateInfoList);
      }
      if (AbilitySpeedInfoList != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(AbilitySpeedInfoList);
      }
      if (ShapeInfoList != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(ShapeInfoList);
      }
      if (ExportRelativeDisplacement != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(ExportRelativeDisplacement);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Timeline other) {
      if (other == null) {
        return;
      }
      if (other.TICKINTERVAL != 0) {
        TICKINTERVAL = other.TICKINTERVAL;
      }
      if (other.ID != 0) {
        ID = other.ID;
      }
      if (other.IsLoop != 0) {
        IsLoop = other.IsLoop;
      }
      if (other.Duration != 0) {
        Duration = other.Duration;
      }
      if (other.RecoverTime != 0) {
        RecoverTime = other.RecoverTime;
      }
      if (other.ComboOverTime != 0) {
        ComboOverTime = other.ComboOverTime;
      }
      if (other.IsFinalAction != 0) {
        IsFinalAction = other.IsFinalAction;
      }
      if (other.IsNeedLock != 0) {
        IsNeedLock = other.IsNeedLock;
      }
      if (other.IsUseConfigY != 0) {
        IsUseConfigY = other.IsUseConfigY;
      }
      if (other.IsUseConfigX != 0) {
        IsUseConfigX = other.IsUseConfigX;
      }
      if (other.ThrownIgnoreGraph != 0) {
        ThrownIgnoreGraph = other.ThrownIgnoreGraph;
      }
      if (other.ThrownCanOutRange != 0) {
        ThrownCanOutRange = other.ThrownCanOutRange;
      }
      if (other.ThrownOutRangeSpawnID != 0) {
        ThrownOutRangeSpawnID = other.ThrownOutRangeSpawnID;
      }
      if (other.ArrivedCreateThrownTimelineID != 0) {
        ArrivedCreateThrownTimelineID = other.ArrivedCreateThrownTimelineID;
      }
      if (other.IsDependCasterForThrown != 0) {
        IsDependCasterForThrown = other.IsDependCasterForThrown;
      }
      if (other.UseTangentMove != 0) {
        UseTangentMove = other.UseTangentMove;
      }
      if (other.UseDefaultCamera != 0) {
        UseDefaultCamera = other.UseDefaultCamera;
      }
      if (other.UseCameraMove != 0) {
        UseCameraMove = other.UseCameraMove;
      }
      if (other.TransformActionInfo != 0) {
        TransformActionInfo = other.TransformActionInfo;
      }
      if (other.RangeType != 0) {
        RangeType = other.RangeType;
      }
      if (other.Radius != 0) {
        Radius = other.Radius;
      }
      if (other.Angle != 0) {
        Angle = other.Angle;
      }
      if (other.Length != 0) {
        Length = other.Length;
      }
      if (other.Width != 0) {
        Width = other.Width;
      }
      if (other.StartFrame != 0) {
        StartFrame = other.StartFrame;
      }
      if (other.EndFrame != 0) {
        EndFrame = other.EndFrame;
      }
      if (other.IsCustomAttackPoint != 0) {
        IsCustomAttackPoint = other.IsCustomAttackPoint;
      }
      if (other.CustomAttackPointDistance != 0) {
        CustomAttackPointDistance = other.CustomAttackPointDistance;
      }
      if (other.CDCompensationList != 0) {
        CDCompensationList = other.CDCompensationList;
      }
      if (other.PostSpwanThrownEvents != 0) {
        PostSpwanThrownEvents = other.PostSpwanThrownEvents;
      }
      if (other.PostDespownThronEvents != 0) {
        PostDespownThronEvents = other.PostDespownThronEvents;
      }
      if (other.HitTimeList != 0) {
        HitTimeList = other.HitTimeList;
      }
      if (other.MoveActionTimelineNode != 0) {
        MoveActionTimelineNode = other.MoveActionTimelineNode;
      }
      if (other.InputActionTimelineNode != 0) {
        InputActionTimelineNode = other.InputActionTimelineNode;
      }
      if (other.LockAcionList != 0) {
        LockAcionList = other.LockAcionList;
      }
      if (other.ThrownCollisionCheckInfoList != 0) {
        ThrownCollisionCheckInfoList = other.ThrownCollisionCheckInfoList;
      }
      if (other.ThrownLockActionInfoList != 0) {
        ThrownLockActionInfoList = other.ThrownLockActionInfoList;
      }
      if (other.CameraTypeInfoList != 0) {
        CameraTypeInfoList = other.CameraTypeInfoList;
      }
      if (other.ThrownBackActionInfoList != 0) {
        ThrownBackActionInfoList = other.ThrownBackActionInfoList;
      }
      if (other.ShapeEnableInfoList != 0) {
        ShapeEnableInfoList = other.ShapeEnableInfoList;
      }
      if (other.AbilityStateInfoList != 0) {
        AbilityStateInfoList = other.AbilityStateInfoList;
      }
      if (other.AbilitySpeedInfoList != 0) {
        AbilitySpeedInfoList = other.AbilitySpeedInfoList;
      }
      if (other.ShapeInfoList != 0) {
        ShapeInfoList = other.ShapeInfoList;
      }
      if (other.ExportRelativeDisplacement != 0) {
        ExportRelativeDisplacement = other.ExportRelativeDisplacement;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            TICKINTERVAL = input.ReadInt32();
            break;
          }
          case 16: {
            ID = input.ReadInt32();
            break;
          }
          case 24: {
            IsLoop = input.ReadInt32();
            break;
          }
          case 32: {
            Duration = input.ReadInt32();
            break;
          }
          case 40: {
            RecoverTime = input.ReadInt32();
            break;
          }
          case 48: {
            ComboOverTime = input.ReadInt32();
            break;
          }
          case 56: {
            IsFinalAction = input.ReadInt32();
            break;
          }
          case 64: {
            IsNeedLock = input.ReadInt32();
            break;
          }
          case 72: {
            IsUseConfigY = input.ReadInt32();
            break;
          }
          case 80: {
            IsUseConfigX = input.ReadInt32();
            break;
          }
          case 88: {
            ThrownIgnoreGraph = input.ReadInt32();
            break;
          }
          case 96: {
            ThrownCanOutRange = input.ReadInt32();
            break;
          }
          case 104: {
            ThrownOutRangeSpawnID = input.ReadInt32();
            break;
          }
          case 112: {
            ArrivedCreateThrownTimelineID = input.ReadInt32();
            break;
          }
          case 120: {
            IsDependCasterForThrown = input.ReadInt32();
            break;
          }
          case 128: {
            UseTangentMove = input.ReadInt32();
            break;
          }
          case 136: {
            UseDefaultCamera = input.ReadInt32();
            break;
          }
          case 144: {
            UseCameraMove = input.ReadInt32();
            break;
          }
          case 152: {
            TransformActionInfo = input.ReadInt32();
            break;
          }
          case 160: {
            RangeType = input.ReadInt32();
            break;
          }
          case 168: {
            Radius = input.ReadInt32();
            break;
          }
          case 176: {
            Angle = input.ReadInt32();
            break;
          }
          case 184: {
            Length = input.ReadInt32();
            break;
          }
          case 192: {
            Width = input.ReadInt32();
            break;
          }
          case 200: {
            StartFrame = input.ReadInt32();
            break;
          }
          case 208: {
            EndFrame = input.ReadInt32();
            break;
          }
          case 216: {
            IsCustomAttackPoint = input.ReadInt32();
            break;
          }
          case 224: {
            CustomAttackPointDistance = input.ReadInt32();
            break;
          }
          case 232: {
            CDCompensationList = input.ReadInt32();
            break;
          }
          case 240: {
            PostSpwanThrownEvents = input.ReadInt32();
            break;
          }
          case 248: {
            PostDespownThronEvents = input.ReadInt32();
            break;
          }
          case 256: {
            HitTimeList = input.ReadInt32();
            break;
          }
          case 264: {
            MoveActionTimelineNode = input.ReadInt32();
            break;
          }
          case 272: {
            InputActionTimelineNode = input.ReadInt32();
            break;
          }
          case 280: {
            LockAcionList = input.ReadInt32();
            break;
          }
          case 288: {
            ThrownCollisionCheckInfoList = input.ReadInt32();
            break;
          }
          case 296: {
            ThrownLockActionInfoList = input.ReadInt32();
            break;
          }
          case 304: {
            CameraTypeInfoList = input.ReadInt32();
            break;
          }
          case 312: {
            ThrownBackActionInfoList = input.ReadInt32();
            break;
          }
          case 320: {
            ShapeEnableInfoList = input.ReadInt32();
            break;
          }
          case 328: {
            AbilityStateInfoList = input.ReadInt32();
            break;
          }
          case 336: {
            AbilitySpeedInfoList = input.ReadInt32();
            break;
          }
          case 344: {
            ShapeInfoList = input.ReadInt32();
            break;
          }
          case 352: {
            ExportRelativeDisplacement = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class ShapeInfo : pb::IMessage<ShapeInfo> {
    private static readonly pb::MessageParser<ShapeInfo> _parser = new pb::MessageParser<ShapeInfo>(() => new ShapeInfo());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ShapeInfo> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Config.ConfigReflection.Descriptor.MessageTypes[5]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ShapeInfo() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ShapeInfo(ShapeInfo other) : this() {
      start_ = other.start_;
      duration_ = other.duration_;
      shapeItemInfoList_ = other.shapeItemInfoList_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ShapeInfo Clone() {
      return new ShapeInfo(this);
    }

    /// <summary>Field number for the "Start" field.</summary>
    public const int StartFieldNumber = 1;
    private int start_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Start {
      get { return start_; }
      set {
        start_ = value;
      }
    }

    /// <summary>Field number for the "Duration" field.</summary>
    public const int DurationFieldNumber = 2;
    private int duration_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Duration {
      get { return duration_; }
      set {
        duration_ = value;
      }
    }

    /// <summary>Field number for the "ShapeItemInfoList" field.</summary>
    public const int ShapeItemInfoListFieldNumber = 3;
    private int shapeItemInfoList_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ShapeItemInfoList {
      get { return shapeItemInfoList_; }
      set {
        shapeItemInfoList_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ShapeInfo);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ShapeInfo other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Start != other.Start) return false;
      if (Duration != other.Duration) return false;
      if (ShapeItemInfoList != other.ShapeItemInfoList) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Start != 0) hash ^= Start.GetHashCode();
      if (Duration != 0) hash ^= Duration.GetHashCode();
      if (ShapeItemInfoList != 0) hash ^= ShapeItemInfoList.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Start != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Start);
      }
      if (Duration != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Duration);
      }
      if (ShapeItemInfoList != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(ShapeItemInfoList);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Start != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Start);
      }
      if (Duration != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Duration);
      }
      if (ShapeItemInfoList != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ShapeItemInfoList);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ShapeInfo other) {
      if (other == null) {
        return;
      }
      if (other.Start != 0) {
        Start = other.Start;
      }
      if (other.Duration != 0) {
        Duration = other.Duration;
      }
      if (other.ShapeItemInfoList != 0) {
        ShapeItemInfoList = other.ShapeItemInfoList;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Start = input.ReadInt32();
            break;
          }
          case 16: {
            Duration = input.ReadInt32();
            break;
          }
          case 24: {
            ShapeItemInfoList = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class Auto_Generate_Interrupt_Self : pb::IMessage<Auto_Generate_Interrupt_Self> {
    private static readonly pb::MessageParser<Auto_Generate_Interrupt_Self> _parser = new pb::MessageParser<Auto_Generate_Interrupt_Self>(() => new Auto_Generate_Interrupt_Self());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Auto_Generate_Interrupt_Self> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Config.ConfigReflection.Descriptor.MessageTypes[6]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Auto_Generate_Interrupt_Self() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Auto_Generate_Interrupt_Self(Auto_Generate_Interrupt_Self other) : this() {
      iD_ = other.iD_;
      canInterrupt_ = other.canInterrupt_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Auto_Generate_Interrupt_Self Clone() {
      return new Auto_Generate_Interrupt_Self(this);
    }

    /// <summary>Field number for the "ID" field.</summary>
    public const int IDFieldNumber = 1;
    private int iD_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ID {
      get { return iD_; }
      set {
        iD_ = value;
      }
    }

    /// <summary>Field number for the "CanInterrupt" field.</summary>
    public const int CanInterruptFieldNumber = 2;
    private bool canInterrupt_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool CanInterrupt {
      get { return canInterrupt_; }
      set {
        canInterrupt_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Auto_Generate_Interrupt_Self);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Auto_Generate_Interrupt_Self other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (ID != other.ID) return false;
      if (CanInterrupt != other.CanInterrupt) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (ID != 0) hash ^= ID.GetHashCode();
      if (CanInterrupt != false) hash ^= CanInterrupt.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (ID != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(ID);
      }
      if (CanInterrupt != false) {
        output.WriteRawTag(16);
        output.WriteBool(CanInterrupt);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ID != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ID);
      }
      if (CanInterrupt != false) {
        size += 1 + 1;
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Auto_Generate_Interrupt_Self other) {
      if (other == null) {
        return;
      }
      if (other.ID != 0) {
        ID = other.ID;
      }
      if (other.CanInterrupt != false) {
        CanInterrupt = other.CanInterrupt;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            ID = input.ReadInt32();
            break;
          }
          case 16: {
            CanInterrupt = input.ReadBool();
            break;
          }
        }
      }
    }

  }

  public sealed partial class VectorInt3 : pb::IMessage<VectorInt3> {
    private static readonly pb::MessageParser<VectorInt3> _parser = new pb::MessageParser<VectorInt3>(() => new VectorInt3());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<VectorInt3> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Config.ConfigReflection.Descriptor.MessageTypes[7]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public VectorInt3() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public VectorInt3(VectorInt3 other) : this() {
      x_ = other.x_;
      y_ = other.y_;
      z_ = other.z_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public VectorInt3 Clone() {
      return new VectorInt3(this);
    }

    /// <summary>Field number for the "X" field.</summary>
    public const int XFieldNumber = 1;
    private int x_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int X {
      get { return x_; }
      set {
        x_ = value;
      }
    }

    /// <summary>Field number for the "Y" field.</summary>
    public const int YFieldNumber = 2;
    private int y_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Y {
      get { return y_; }
      set {
        y_ = value;
      }
    }

    /// <summary>Field number for the "Z" field.</summary>
    public const int ZFieldNumber = 3;
    private int z_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Z {
      get { return z_; }
      set {
        z_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as VectorInt3);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(VectorInt3 other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (X != other.X) return false;
      if (Y != other.Y) return false;
      if (Z != other.Z) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (X != 0) hash ^= X.GetHashCode();
      if (Y != 0) hash ^= Y.GetHashCode();
      if (Z != 0) hash ^= Z.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (X != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(X);
      }
      if (Y != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Y);
      }
      if (Z != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(Z);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (X != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(X);
      }
      if (Y != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Y);
      }
      if (Z != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Z);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(VectorInt3 other) {
      if (other == null) {
        return;
      }
      if (other.X != 0) {
        X = other.X;
      }
      if (other.Y != 0) {
        Y = other.Y;
      }
      if (other.Z != 0) {
        Z = other.Z;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            X = input.ReadInt32();
            break;
          }
          case 16: {
            Y = input.ReadInt32();
            break;
          }
          case 24: {
            Z = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class ShapeItemInfo : pb::IMessage<ShapeItemInfo> {
    private static readonly pb::MessageParser<ShapeItemInfo> _parser = new pb::MessageParser<ShapeItemInfo>(() => new ShapeItemInfo());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ShapeItemInfo> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Config.ConfigReflection.Descriptor.MessageTypes[8]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ShapeItemInfo() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ShapeItemInfo(ShapeItemInfo other) : this() {
      shapePartType_ = other.shapePartType_;
      offset_ = other.offset_;
      size_ = other.size_;
      enable_ = other.enable_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ShapeItemInfo Clone() {
      return new ShapeItemInfo(this);
    }

    /// <summary>Field number for the "ShapePartType" field.</summary>
    public const int ShapePartTypeFieldNumber = 1;
    private int shapePartType_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ShapePartType {
      get { return shapePartType_; }
      set {
        shapePartType_ = value;
      }
    }

    /// <summary>Field number for the "Offset" field.</summary>
    public const int OffsetFieldNumber = 2;
    private int offset_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Offset {
      get { return offset_; }
      set {
        offset_ = value;
      }
    }

    /// <summary>Field number for the "Size" field.</summary>
    public const int SizeFieldNumber = 3;
    private int size_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Size {
      get { return size_; }
      set {
        size_ = value;
      }
    }

    /// <summary>Field number for the "Enable" field.</summary>
    public const int EnableFieldNumber = 4;
    private int enable_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Enable {
      get { return enable_; }
      set {
        enable_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ShapeItemInfo);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ShapeItemInfo other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (ShapePartType != other.ShapePartType) return false;
      if (Offset != other.Offset) return false;
      if (Size != other.Size) return false;
      if (Enable != other.Enable) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (ShapePartType != 0) hash ^= ShapePartType.GetHashCode();
      if (Offset != 0) hash ^= Offset.GetHashCode();
      if (Size != 0) hash ^= Size.GetHashCode();
      if (Enable != 0) hash ^= Enable.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (ShapePartType != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(ShapePartType);
      }
      if (Offset != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Offset);
      }
      if (Size != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(Size);
      }
      if (Enable != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(Enable);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ShapePartType != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ShapePartType);
      }
      if (Offset != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Offset);
      }
      if (Size != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Size);
      }
      if (Enable != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Enable);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ShapeItemInfo other) {
      if (other == null) {
        return;
      }
      if (other.ShapePartType != 0) {
        ShapePartType = other.ShapePartType;
      }
      if (other.Offset != 0) {
        Offset = other.Offset;
      }
      if (other.Size != 0) {
        Size = other.Size;
      }
      if (other.Enable != 0) {
        Enable = other.Enable;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            ShapePartType = input.ReadInt32();
            break;
          }
          case 16: {
            Offset = input.ReadInt32();
            break;
          }
          case 24: {
            Size = input.ReadInt32();
            break;
          }
          case 32: {
            Enable = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class AbilityConfig : pb::IMessage<AbilityConfig> {
    private static readonly pb::MessageParser<AbilityConfig> _parser = new pb::MessageParser<AbilityConfig>(() => new AbilityConfig());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<AbilityConfig> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Config.ConfigReflection.Descriptor.MessageTypes[9]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AbilityConfig() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AbilityConfig(AbilityConfig other) : this() {
      iD_ = other.iD_;
      cD_ = other.cD_;
      maxUseCount_ = other.maxUseCount_;
      abilityClass_ = other.abilityClass_;
      hitDamageBasics_ = other.hitDamageBasics_.Clone();
      hitDamagePec_ = other.hitDamagePec_.Clone();
      postureValueConsume_ = other.postureValueConsume_.Clone();
      balanceValueConsume_ = other.balanceValueConsume_.Clone();
      lastHit_ = other.lastHit_;
      relateSkill_ = other.relateSkill_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AbilityConfig Clone() {
      return new AbilityConfig(this);
    }

    /// <summary>Field number for the "ID" field.</summary>
    public const int IDFieldNumber = 1;
    private int iD_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ID {
      get { return iD_; }
      set {
        iD_ = value;
      }
    }

    /// <summary>Field number for the "CD" field.</summary>
    public const int CDFieldNumber = 2;
    private int cD_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CD {
      get { return cD_; }
      set {
        cD_ = value;
      }
    }

    /// <summary>Field number for the "MaxUseCount" field.</summary>
    public const int MaxUseCountFieldNumber = 3;
    private int maxUseCount_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int MaxUseCount {
      get { return maxUseCount_; }
      set {
        maxUseCount_ = value;
      }
    }

    /// <summary>Field number for the "AbilityClass" field.</summary>
    public const int AbilityClassFieldNumber = 4;
    private int abilityClass_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int AbilityClass {
      get { return abilityClass_; }
      set {
        abilityClass_ = value;
      }
    }

    /// <summary>Field number for the "HitDamageBasics" field.</summary>
    public const int HitDamageBasicsFieldNumber = 5;
    private static readonly pb::FieldCodec<int> _repeated_hitDamageBasics_codec
        = pb::FieldCodec.ForInt32(42);
    private readonly pbc::RepeatedField<int> hitDamageBasics_ = new pbc::RepeatedField<int>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<int> HitDamageBasics {
      get { return hitDamageBasics_; }
    }

    /// <summary>Field number for the "HitDamagePec" field.</summary>
    public const int HitDamagePecFieldNumber = 6;
    private static readonly pb::FieldCodec<int> _repeated_hitDamagePec_codec
        = pb::FieldCodec.ForInt32(50);
    private readonly pbc::RepeatedField<int> hitDamagePec_ = new pbc::RepeatedField<int>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<int> HitDamagePec {
      get { return hitDamagePec_; }
    }

    /// <summary>Field number for the "PostureValueConsume" field.</summary>
    public const int PostureValueConsumeFieldNumber = 7;
    private static readonly pb::FieldCodec<int> _repeated_postureValueConsume_codec
        = pb::FieldCodec.ForInt32(58);
    private readonly pbc::RepeatedField<int> postureValueConsume_ = new pbc::RepeatedField<int>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<int> PostureValueConsume {
      get { return postureValueConsume_; }
    }

    /// <summary>Field number for the "BalanceValueConsume" field.</summary>
    public const int BalanceValueConsumeFieldNumber = 8;
    private static readonly pb::FieldCodec<int> _repeated_balanceValueConsume_codec
        = pb::FieldCodec.ForInt32(66);
    private readonly pbc::RepeatedField<int> balanceValueConsume_ = new pbc::RepeatedField<int>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<int> BalanceValueConsume {
      get { return balanceValueConsume_; }
    }

    /// <summary>Field number for the "LastHit" field.</summary>
    public const int LastHitFieldNumber = 9;
    private int lastHit_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int LastHit {
      get { return lastHit_; }
      set {
        lastHit_ = value;
      }
    }

    /// <summary>Field number for the "RelateSkill" field.</summary>
    public const int RelateSkillFieldNumber = 10;
    private static readonly pb::FieldCodec<int> _repeated_relateSkill_codec
        = pb::FieldCodec.ForInt32(82);
    private readonly pbc::RepeatedField<int> relateSkill_ = new pbc::RepeatedField<int>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<int> RelateSkill {
      get { return relateSkill_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as AbilityConfig);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(AbilityConfig other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (ID != other.ID) return false;
      if (CD != other.CD) return false;
      if (MaxUseCount != other.MaxUseCount) return false;
      if (AbilityClass != other.AbilityClass) return false;
      if(!hitDamageBasics_.Equals(other.hitDamageBasics_)) return false;
      if(!hitDamagePec_.Equals(other.hitDamagePec_)) return false;
      if(!postureValueConsume_.Equals(other.postureValueConsume_)) return false;
      if(!balanceValueConsume_.Equals(other.balanceValueConsume_)) return false;
      if (LastHit != other.LastHit) return false;
      if(!relateSkill_.Equals(other.relateSkill_)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (ID != 0) hash ^= ID.GetHashCode();
      if (CD != 0) hash ^= CD.GetHashCode();
      if (MaxUseCount != 0) hash ^= MaxUseCount.GetHashCode();
      if (AbilityClass != 0) hash ^= AbilityClass.GetHashCode();
      hash ^= hitDamageBasics_.GetHashCode();
      hash ^= hitDamagePec_.GetHashCode();
      hash ^= postureValueConsume_.GetHashCode();
      hash ^= balanceValueConsume_.GetHashCode();
      if (LastHit != 0) hash ^= LastHit.GetHashCode();
      hash ^= relateSkill_.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (ID != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(ID);
      }
      if (CD != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(CD);
      }
      if (MaxUseCount != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(MaxUseCount);
      }
      if (AbilityClass != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(AbilityClass);
      }
      hitDamageBasics_.WriteTo(output, _repeated_hitDamageBasics_codec);
      hitDamagePec_.WriteTo(output, _repeated_hitDamagePec_codec);
      postureValueConsume_.WriteTo(output, _repeated_postureValueConsume_codec);
      balanceValueConsume_.WriteTo(output, _repeated_balanceValueConsume_codec);
      if (LastHit != 0) {
        output.WriteRawTag(72);
        output.WriteInt32(LastHit);
      }
      relateSkill_.WriteTo(output, _repeated_relateSkill_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ID != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ID);
      }
      if (CD != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(CD);
      }
      if (MaxUseCount != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(MaxUseCount);
      }
      if (AbilityClass != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(AbilityClass);
      }
      size += hitDamageBasics_.CalculateSize(_repeated_hitDamageBasics_codec);
      size += hitDamagePec_.CalculateSize(_repeated_hitDamagePec_codec);
      size += postureValueConsume_.CalculateSize(_repeated_postureValueConsume_codec);
      size += balanceValueConsume_.CalculateSize(_repeated_balanceValueConsume_codec);
      if (LastHit != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(LastHit);
      }
      size += relateSkill_.CalculateSize(_repeated_relateSkill_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(AbilityConfig other) {
      if (other == null) {
        return;
      }
      if (other.ID != 0) {
        ID = other.ID;
      }
      if (other.CD != 0) {
        CD = other.CD;
      }
      if (other.MaxUseCount != 0) {
        MaxUseCount = other.MaxUseCount;
      }
      if (other.AbilityClass != 0) {
        AbilityClass = other.AbilityClass;
      }
      hitDamageBasics_.Add(other.hitDamageBasics_);
      hitDamagePec_.Add(other.hitDamagePec_);
      postureValueConsume_.Add(other.postureValueConsume_);
      balanceValueConsume_.Add(other.balanceValueConsume_);
      if (other.LastHit != 0) {
        LastHit = other.LastHit;
      }
      relateSkill_.Add(other.relateSkill_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            ID = input.ReadInt32();
            break;
          }
          case 16: {
            CD = input.ReadInt32();
            break;
          }
          case 24: {
            MaxUseCount = input.ReadInt32();
            break;
          }
          case 32: {
            AbilityClass = input.ReadInt32();
            break;
          }
          case 42:
          case 40: {
            hitDamageBasics_.AddEntriesFrom(input, _repeated_hitDamageBasics_codec);
            break;
          }
          case 50:
          case 48: {
            hitDamagePec_.AddEntriesFrom(input, _repeated_hitDamagePec_codec);
            break;
          }
          case 58:
          case 56: {
            postureValueConsume_.AddEntriesFrom(input, _repeated_postureValueConsume_codec);
            break;
          }
          case 66:
          case 64: {
            balanceValueConsume_.AddEntriesFrom(input, _repeated_balanceValueConsume_codec);
            break;
          }
          case 72: {
            LastHit = input.ReadInt32();
            break;
          }
          case 82:
          case 80: {
            relateSkill_.AddEntriesFrom(input, _repeated_relateSkill_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class RoleConfig : pb::IMessage<RoleConfig> {
    private static readonly pb::MessageParser<RoleConfig> _parser = new pb::MessageParser<RoleConfig>(() => new RoleConfig());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<RoleConfig> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Config.ConfigReflection.Descriptor.MessageTypes[10]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RoleConfig() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RoleConfig(RoleConfig other) : this() {
      iD_ = other.iD_;
      additionalRoleIDs_ = other.additionalRoleIDs_.Clone();
      roleCategory_ = other.roleCategory_;
      shapePartTypes_ = other.shapePartTypes_.Clone();
      radius_ = other.radius_.Clone();
      cameraDistance_ = other.cameraDistance_;
      cameraHeight_ = other.cameraHeight_;
      cameraLookAtHeight_ = other.cameraLookAtHeight_;
      deathTime_ = other.deathTime_;
      modelPath_ = other.modelPath_;
      modelName_ = other.modelName_;
      melees_ = other.melees_.Clone();
      ability_ = other.ability_.Clone();
      rageAbility_ = other.rageAbility_.Clone();
      avoidAbility_ = other.avoidAbility_.Clone();
      baseHP_ = other.baseHP_;
      baseAttack_ = other.baseAttack_;
      baseDefend_ = other.baseDefend_;
      growHPByLevel_ = other.growHPByLevel_;
      growAttackByLevel_ = other.growAttackByLevel_;
      growDefendByLevel_ = other.growDefendByLevel_;
      growHPByStar_ = other.growHPByStar_;
      growAttackByStar_ = other.growAttackByStar_;
      useRunMoveCurve_ = other.useRunMoveCurve_;
      speed_ = other.speed_;
      growDefendByStar_ = other.growDefendByStar_;
      roleType_ = other.roleType_;
      hitRecoverID_ = other.hitRecoverID_.Clone();
      hitBackRecoverID_ = other.hitBackRecoverID_;
      hitAirID_ = other.hitAirID_;
      hitUpID_ = other.hitUpID_;
      hitDownID_ = other.hitDownID_;
      hitFloorID_ = other.hitFloorID_;
      getUpID_ = other.getUpID_;
      hitUpAirID_ = other.hitUpAirID_;
      run_ = other.run_;
      idle_ = other.idle_;
      weight_ = other.weight_;
      runLeft_ = other.runLeft_;
      runRight_ = other.runRight_;
      death_ = other.death_;
      noAnimationDeath_ = other.noAnimationDeath_;
      airDeath_ = other.airDeath_;
      appear_ = other.appear_;
      movementStop_ = other.movementStop_;
      canHitBack_ = other.canHitBack_;
      canHitUp_ = other.canHitUp_;
      useRushMoveCurve_ = other.useRushMoveCurve_;
      rushID_ = other.rushID_;
      rushStopID_ = other.rushStopID_;
      rushSpeed_ = other.rushSpeed_;
      hitBackValidTime_ = other.hitBackValidTime_.Clone();
      balanceValue_ = other.balanceValue_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RoleConfig Clone() {
      return new RoleConfig(this);
    }

    /// <summary>Field number for the "ID" field.</summary>
    public const int IDFieldNumber = 1;
    private int iD_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ID {
      get { return iD_; }
      set {
        iD_ = value;
      }
    }

    /// <summary>Field number for the "AdditionalRoleIDs" field.</summary>
    public const int AdditionalRoleIDsFieldNumber = 2;
    private static readonly pb::FieldCodec<int> _repeated_additionalRoleIDs_codec
        = pb::FieldCodec.ForInt32(18);
    private readonly pbc::RepeatedField<int> additionalRoleIDs_ = new pbc::RepeatedField<int>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<int> AdditionalRoleIDs {
      get { return additionalRoleIDs_; }
    }

    /// <summary>Field number for the "RoleCategory" field.</summary>
    public const int RoleCategoryFieldNumber = 3;
    private global::Config.RoleCategory roleCategory_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Config.RoleCategory RoleCategory {
      get { return roleCategory_; }
      set {
        roleCategory_ = value;
      }
    }

    /// <summary>Field number for the "ShapePartTypes" field.</summary>
    public const int ShapePartTypesFieldNumber = 4;
    private static readonly pb::FieldCodec<global::Config.ShapePartType> _repeated_shapePartTypes_codec
        = pb::FieldCodec.ForEnum(34, x => (int) x, x => (global::Config.ShapePartType) x);
    private readonly pbc::RepeatedField<global::Config.ShapePartType> shapePartTypes_ = new pbc::RepeatedField<global::Config.ShapePartType>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Config.ShapePartType> ShapePartTypes {
      get { return shapePartTypes_; }
    }

    /// <summary>Field number for the "Radius" field.</summary>
    public const int RadiusFieldNumber = 5;
    private static readonly pb::FieldCodec<int> _repeated_radius_codec
        = pb::FieldCodec.ForInt32(42);
    private readonly pbc::RepeatedField<int> radius_ = new pbc::RepeatedField<int>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<int> Radius {
      get { return radius_; }
    }

    /// <summary>Field number for the "CameraDistance" field.</summary>
    public const int CameraDistanceFieldNumber = 6;
    private int cameraDistance_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CameraDistance {
      get { return cameraDistance_; }
      set {
        cameraDistance_ = value;
      }
    }

    /// <summary>Field number for the "CameraHeight" field.</summary>
    public const int CameraHeightFieldNumber = 7;
    private int cameraHeight_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CameraHeight {
      get { return cameraHeight_; }
      set {
        cameraHeight_ = value;
      }
    }

    /// <summary>Field number for the "CameraLookAtHeight" field.</summary>
    public const int CameraLookAtHeightFieldNumber = 8;
    private int cameraLookAtHeight_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CameraLookAtHeight {
      get { return cameraLookAtHeight_; }
      set {
        cameraLookAtHeight_ = value;
      }
    }

    /// <summary>Field number for the "DeathTime" field.</summary>
    public const int DeathTimeFieldNumber = 9;
    private global::Config.DeathTimeType deathTime_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Config.DeathTimeType DeathTime {
      get { return deathTime_; }
      set {
        deathTime_ = value;
      }
    }

    /// <summary>Field number for the "ModelPath" field.</summary>
    public const int ModelPathFieldNumber = 10;
    private string modelPath_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ModelPath {
      get { return modelPath_; }
      set {
        modelPath_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "ModelName" field.</summary>
    public const int ModelNameFieldNumber = 11;
    private string modelName_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ModelName {
      get { return modelName_; }
      set {
        modelName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "Melees" field.</summary>
    public const int MeleesFieldNumber = 12;
    private static readonly pb::FieldCodec<int> _repeated_melees_codec
        = pb::FieldCodec.ForInt32(98);
    private readonly pbc::RepeatedField<int> melees_ = new pbc::RepeatedField<int>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<int> Melees {
      get { return melees_; }
    }

    /// <summary>Field number for the "Ability" field.</summary>
    public const int AbilityFieldNumber = 13;
    private static readonly pb::FieldCodec<int> _repeated_ability_codec
        = pb::FieldCodec.ForInt32(106);
    private readonly pbc::RepeatedField<int> ability_ = new pbc::RepeatedField<int>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<int> Ability {
      get { return ability_; }
    }

    /// <summary>Field number for the "RageAbility" field.</summary>
    public const int RageAbilityFieldNumber = 14;
    private static readonly pb::FieldCodec<int> _repeated_rageAbility_codec
        = pb::FieldCodec.ForInt32(114);
    private readonly pbc::RepeatedField<int> rageAbility_ = new pbc::RepeatedField<int>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<int> RageAbility {
      get { return rageAbility_; }
    }

    /// <summary>Field number for the "AvoidAbility" field.</summary>
    public const int AvoidAbilityFieldNumber = 15;
    private static readonly pb::FieldCodec<int> _repeated_avoidAbility_codec
        = pb::FieldCodec.ForInt32(122);
    private readonly pbc::RepeatedField<int> avoidAbility_ = new pbc::RepeatedField<int>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<int> AvoidAbility {
      get { return avoidAbility_; }
    }

    /// <summary>Field number for the "BaseHP" field.</summary>
    public const int BaseHPFieldNumber = 16;
    private int baseHP_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int BaseHP {
      get { return baseHP_; }
      set {
        baseHP_ = value;
      }
    }

    /// <summary>Field number for the "BaseAttack" field.</summary>
    public const int BaseAttackFieldNumber = 17;
    private int baseAttack_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int BaseAttack {
      get { return baseAttack_; }
      set {
        baseAttack_ = value;
      }
    }

    /// <summary>Field number for the "BaseDefend" field.</summary>
    public const int BaseDefendFieldNumber = 18;
    private int baseDefend_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int BaseDefend {
      get { return baseDefend_; }
      set {
        baseDefend_ = value;
      }
    }

    /// <summary>Field number for the "GrowHPByLevel" field.</summary>
    public const int GrowHPByLevelFieldNumber = 19;
    private int growHPByLevel_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int GrowHPByLevel {
      get { return growHPByLevel_; }
      set {
        growHPByLevel_ = value;
      }
    }

    /// <summary>Field number for the "GrowAttackByLevel" field.</summary>
    public const int GrowAttackByLevelFieldNumber = 20;
    private int growAttackByLevel_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int GrowAttackByLevel {
      get { return growAttackByLevel_; }
      set {
        growAttackByLevel_ = value;
      }
    }

    /// <summary>Field number for the "GrowDefendByLevel" field.</summary>
    public const int GrowDefendByLevelFieldNumber = 21;
    private int growDefendByLevel_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int GrowDefendByLevel {
      get { return growDefendByLevel_; }
      set {
        growDefendByLevel_ = value;
      }
    }

    /// <summary>Field number for the "GrowHPByStar" field.</summary>
    public const int GrowHPByStarFieldNumber = 22;
    private int growHPByStar_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int GrowHPByStar {
      get { return growHPByStar_; }
      set {
        growHPByStar_ = value;
      }
    }

    /// <summary>Field number for the "GrowAttackByStar" field.</summary>
    public const int GrowAttackByStarFieldNumber = 23;
    private int growAttackByStar_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int GrowAttackByStar {
      get { return growAttackByStar_; }
      set {
        growAttackByStar_ = value;
      }
    }

    /// <summary>Field number for the "UseRunMoveCurve" field.</summary>
    public const int UseRunMoveCurveFieldNumber = 24;
    private bool useRunMoveCurve_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool UseRunMoveCurve {
      get { return useRunMoveCurve_; }
      set {
        useRunMoveCurve_ = value;
      }
    }

    /// <summary>Field number for the "Speed" field.</summary>
    public const int SpeedFieldNumber = 25;
    private int speed_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Speed {
      get { return speed_; }
      set {
        speed_ = value;
      }
    }

    /// <summary>Field number for the "GrowDefendByStar" field.</summary>
    public const int GrowDefendByStarFieldNumber = 26;
    private int growDefendByStar_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int GrowDefendByStar {
      get { return growDefendByStar_; }
      set {
        growDefendByStar_ = value;
      }
    }

    /// <summary>Field number for the "RoleType" field.</summary>
    public const int RoleTypeFieldNumber = 27;
    private global::Config.RoleType roleType_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Config.RoleType RoleType {
      get { return roleType_; }
      set {
        roleType_ = value;
      }
    }

    /// <summary>Field number for the "HitRecoverID" field.</summary>
    public const int HitRecoverIDFieldNumber = 28;
    private static readonly pb::FieldCodec<int> _repeated_hitRecoverID_codec
        = pb::FieldCodec.ForInt32(226);
    private readonly pbc::RepeatedField<int> hitRecoverID_ = new pbc::RepeatedField<int>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<int> HitRecoverID {
      get { return hitRecoverID_; }
    }

    /// <summary>Field number for the "HitBackRecoverID" field.</summary>
    public const int HitBackRecoverIDFieldNumber = 29;
    private int hitBackRecoverID_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int HitBackRecoverID {
      get { return hitBackRecoverID_; }
      set {
        hitBackRecoverID_ = value;
      }
    }

    /// <summary>Field number for the "HitAirID" field.</summary>
    public const int HitAirIDFieldNumber = 30;
    private int hitAirID_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int HitAirID {
      get { return hitAirID_; }
      set {
        hitAirID_ = value;
      }
    }

    /// <summary>Field number for the "HitUpID" field.</summary>
    public const int HitUpIDFieldNumber = 31;
    private int hitUpID_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int HitUpID {
      get { return hitUpID_; }
      set {
        hitUpID_ = value;
      }
    }

    /// <summary>Field number for the "HitDownID" field.</summary>
    public const int HitDownIDFieldNumber = 32;
    private int hitDownID_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int HitDownID {
      get { return hitDownID_; }
      set {
        hitDownID_ = value;
      }
    }

    /// <summary>Field number for the "HitFloorID" field.</summary>
    public const int HitFloorIDFieldNumber = 33;
    private int hitFloorID_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int HitFloorID {
      get { return hitFloorID_; }
      set {
        hitFloorID_ = value;
      }
    }

    /// <summary>Field number for the "GetUpID" field.</summary>
    public const int GetUpIDFieldNumber = 34;
    private int getUpID_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int GetUpID {
      get { return getUpID_; }
      set {
        getUpID_ = value;
      }
    }

    /// <summary>Field number for the "HitUpAirID" field.</summary>
    public const int HitUpAirIDFieldNumber = 35;
    private int hitUpAirID_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int HitUpAirID {
      get { return hitUpAirID_; }
      set {
        hitUpAirID_ = value;
      }
    }

    /// <summary>Field number for the "Run" field.</summary>
    public const int RunFieldNumber = 36;
    private int run_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Run {
      get { return run_; }
      set {
        run_ = value;
      }
    }

    /// <summary>Field number for the "Idle" field.</summary>
    public const int IdleFieldNumber = 37;
    private int idle_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Idle {
      get { return idle_; }
      set {
        idle_ = value;
      }
    }

    /// <summary>Field number for the "Weight" field.</summary>
    public const int WeightFieldNumber = 38;
    private int weight_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Weight {
      get { return weight_; }
      set {
        weight_ = value;
      }
    }

    /// <summary>Field number for the "RunLeft" field.</summary>
    public const int RunLeftFieldNumber = 39;
    private int runLeft_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int RunLeft {
      get { return runLeft_; }
      set {
        runLeft_ = value;
      }
    }

    /// <summary>Field number for the "RunRight" field.</summary>
    public const int RunRightFieldNumber = 40;
    private int runRight_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int RunRight {
      get { return runRight_; }
      set {
        runRight_ = value;
      }
    }

    /// <summary>Field number for the "Death" field.</summary>
    public const int DeathFieldNumber = 41;
    private int death_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Death {
      get { return death_; }
      set {
        death_ = value;
      }
    }

    /// <summary>Field number for the "NoAnimationDeath" field.</summary>
    public const int NoAnimationDeathFieldNumber = 42;
    private int noAnimationDeath_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int NoAnimationDeath {
      get { return noAnimationDeath_; }
      set {
        noAnimationDeath_ = value;
      }
    }

    /// <summary>Field number for the "AirDeath" field.</summary>
    public const int AirDeathFieldNumber = 43;
    private int airDeath_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int AirDeath {
      get { return airDeath_; }
      set {
        airDeath_ = value;
      }
    }

    /// <summary>Field number for the "Appear" field.</summary>
    public const int AppearFieldNumber = 44;
    private int appear_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Appear {
      get { return appear_; }
      set {
        appear_ = value;
      }
    }

    /// <summary>Field number for the "MovementStop" field.</summary>
    public const int MovementStopFieldNumber = 45;
    private int movementStop_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int MovementStop {
      get { return movementStop_; }
      set {
        movementStop_ = value;
      }
    }

    /// <summary>Field number for the "CanHitBack" field.</summary>
    public const int CanHitBackFieldNumber = 46;
    private bool canHitBack_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool CanHitBack {
      get { return canHitBack_; }
      set {
        canHitBack_ = value;
      }
    }

    /// <summary>Field number for the "CanHitUp" field.</summary>
    public const int CanHitUpFieldNumber = 47;
    private bool canHitUp_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool CanHitUp {
      get { return canHitUp_; }
      set {
        canHitUp_ = value;
      }
    }

    /// <summary>Field number for the "UseRushMoveCurve" field.</summary>
    public const int UseRushMoveCurveFieldNumber = 48;
    private bool useRushMoveCurve_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool UseRushMoveCurve {
      get { return useRushMoveCurve_; }
      set {
        useRushMoveCurve_ = value;
      }
    }

    /// <summary>Field number for the "RushID" field.</summary>
    public const int RushIDFieldNumber = 49;
    private int rushID_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int RushID {
      get { return rushID_; }
      set {
        rushID_ = value;
      }
    }

    /// <summary>Field number for the "RushStopID" field.</summary>
    public const int RushStopIDFieldNumber = 50;
    private int rushStopID_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int RushStopID {
      get { return rushStopID_; }
      set {
        rushStopID_ = value;
      }
    }

    /// <summary>Field number for the "RushSpeed" field.</summary>
    public const int RushSpeedFieldNumber = 51;
    private int rushSpeed_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int RushSpeed {
      get { return rushSpeed_; }
      set {
        rushSpeed_ = value;
      }
    }

    /// <summary>Field number for the "HitBackValidTime" field.</summary>
    public const int HitBackValidTimeFieldNumber = 52;
    private static readonly pb::FieldCodec<int> _repeated_hitBackValidTime_codec
        = pb::FieldCodec.ForInt32(418);
    private readonly pbc::RepeatedField<int> hitBackValidTime_ = new pbc::RepeatedField<int>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<int> HitBackValidTime {
      get { return hitBackValidTime_; }
    }

    /// <summary>Field number for the "BalanceValue" field.</summary>
    public const int BalanceValueFieldNumber = 53;
    private int balanceValue_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int BalanceValue {
      get { return balanceValue_; }
      set {
        balanceValue_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as RoleConfig);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(RoleConfig other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (ID != other.ID) return false;
      if(!additionalRoleIDs_.Equals(other.additionalRoleIDs_)) return false;
      if (RoleCategory != other.RoleCategory) return false;
      if(!shapePartTypes_.Equals(other.shapePartTypes_)) return false;
      if(!radius_.Equals(other.radius_)) return false;
      if (CameraDistance != other.CameraDistance) return false;
      if (CameraHeight != other.CameraHeight) return false;
      if (CameraLookAtHeight != other.CameraLookAtHeight) return false;
      if (DeathTime != other.DeathTime) return false;
      if (ModelPath != other.ModelPath) return false;
      if (ModelName != other.ModelName) return false;
      if(!melees_.Equals(other.melees_)) return false;
      if(!ability_.Equals(other.ability_)) return false;
      if(!rageAbility_.Equals(other.rageAbility_)) return false;
      if(!avoidAbility_.Equals(other.avoidAbility_)) return false;
      if (BaseHP != other.BaseHP) return false;
      if (BaseAttack != other.BaseAttack) return false;
      if (BaseDefend != other.BaseDefend) return false;
      if (GrowHPByLevel != other.GrowHPByLevel) return false;
      if (GrowAttackByLevel != other.GrowAttackByLevel) return false;
      if (GrowDefendByLevel != other.GrowDefendByLevel) return false;
      if (GrowHPByStar != other.GrowHPByStar) return false;
      if (GrowAttackByStar != other.GrowAttackByStar) return false;
      if (UseRunMoveCurve != other.UseRunMoveCurve) return false;
      if (Speed != other.Speed) return false;
      if (GrowDefendByStar != other.GrowDefendByStar) return false;
      if (RoleType != other.RoleType) return false;
      if(!hitRecoverID_.Equals(other.hitRecoverID_)) return false;
      if (HitBackRecoverID != other.HitBackRecoverID) return false;
      if (HitAirID != other.HitAirID) return false;
      if (HitUpID != other.HitUpID) return false;
      if (HitDownID != other.HitDownID) return false;
      if (HitFloorID != other.HitFloorID) return false;
      if (GetUpID != other.GetUpID) return false;
      if (HitUpAirID != other.HitUpAirID) return false;
      if (Run != other.Run) return false;
      if (Idle != other.Idle) return false;
      if (Weight != other.Weight) return false;
      if (RunLeft != other.RunLeft) return false;
      if (RunRight != other.RunRight) return false;
      if (Death != other.Death) return false;
      if (NoAnimationDeath != other.NoAnimationDeath) return false;
      if (AirDeath != other.AirDeath) return false;
      if (Appear != other.Appear) return false;
      if (MovementStop != other.MovementStop) return false;
      if (CanHitBack != other.CanHitBack) return false;
      if (CanHitUp != other.CanHitUp) return false;
      if (UseRushMoveCurve != other.UseRushMoveCurve) return false;
      if (RushID != other.RushID) return false;
      if (RushStopID != other.RushStopID) return false;
      if (RushSpeed != other.RushSpeed) return false;
      if(!hitBackValidTime_.Equals(other.hitBackValidTime_)) return false;
      if (BalanceValue != other.BalanceValue) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (ID != 0) hash ^= ID.GetHashCode();
      hash ^= additionalRoleIDs_.GetHashCode();
      if (RoleCategory != 0) hash ^= RoleCategory.GetHashCode();
      hash ^= shapePartTypes_.GetHashCode();
      hash ^= radius_.GetHashCode();
      if (CameraDistance != 0) hash ^= CameraDistance.GetHashCode();
      if (CameraHeight != 0) hash ^= CameraHeight.GetHashCode();
      if (CameraLookAtHeight != 0) hash ^= CameraLookAtHeight.GetHashCode();
      if (DeathTime != 0) hash ^= DeathTime.GetHashCode();
      if (ModelPath.Length != 0) hash ^= ModelPath.GetHashCode();
      if (ModelName.Length != 0) hash ^= ModelName.GetHashCode();
      hash ^= melees_.GetHashCode();
      hash ^= ability_.GetHashCode();
      hash ^= rageAbility_.GetHashCode();
      hash ^= avoidAbility_.GetHashCode();
      if (BaseHP != 0) hash ^= BaseHP.GetHashCode();
      if (BaseAttack != 0) hash ^= BaseAttack.GetHashCode();
      if (BaseDefend != 0) hash ^= BaseDefend.GetHashCode();
      if (GrowHPByLevel != 0) hash ^= GrowHPByLevel.GetHashCode();
      if (GrowAttackByLevel != 0) hash ^= GrowAttackByLevel.GetHashCode();
      if (GrowDefendByLevel != 0) hash ^= GrowDefendByLevel.GetHashCode();
      if (GrowHPByStar != 0) hash ^= GrowHPByStar.GetHashCode();
      if (GrowAttackByStar != 0) hash ^= GrowAttackByStar.GetHashCode();
      if (UseRunMoveCurve != false) hash ^= UseRunMoveCurve.GetHashCode();
      if (Speed != 0) hash ^= Speed.GetHashCode();
      if (GrowDefendByStar != 0) hash ^= GrowDefendByStar.GetHashCode();
      if (RoleType != 0) hash ^= RoleType.GetHashCode();
      hash ^= hitRecoverID_.GetHashCode();
      if (HitBackRecoverID != 0) hash ^= HitBackRecoverID.GetHashCode();
      if (HitAirID != 0) hash ^= HitAirID.GetHashCode();
      if (HitUpID != 0) hash ^= HitUpID.GetHashCode();
      if (HitDownID != 0) hash ^= HitDownID.GetHashCode();
      if (HitFloorID != 0) hash ^= HitFloorID.GetHashCode();
      if (GetUpID != 0) hash ^= GetUpID.GetHashCode();
      if (HitUpAirID != 0) hash ^= HitUpAirID.GetHashCode();
      if (Run != 0) hash ^= Run.GetHashCode();
      if (Idle != 0) hash ^= Idle.GetHashCode();
      if (Weight != 0) hash ^= Weight.GetHashCode();
      if (RunLeft != 0) hash ^= RunLeft.GetHashCode();
      if (RunRight != 0) hash ^= RunRight.GetHashCode();
      if (Death != 0) hash ^= Death.GetHashCode();
      if (NoAnimationDeath != 0) hash ^= NoAnimationDeath.GetHashCode();
      if (AirDeath != 0) hash ^= AirDeath.GetHashCode();
      if (Appear != 0) hash ^= Appear.GetHashCode();
      if (MovementStop != 0) hash ^= MovementStop.GetHashCode();
      if (CanHitBack != false) hash ^= CanHitBack.GetHashCode();
      if (CanHitUp != false) hash ^= CanHitUp.GetHashCode();
      if (UseRushMoveCurve != false) hash ^= UseRushMoveCurve.GetHashCode();
      if (RushID != 0) hash ^= RushID.GetHashCode();
      if (RushStopID != 0) hash ^= RushStopID.GetHashCode();
      if (RushSpeed != 0) hash ^= RushSpeed.GetHashCode();
      hash ^= hitBackValidTime_.GetHashCode();
      if (BalanceValue != 0) hash ^= BalanceValue.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (ID != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(ID);
      }
      additionalRoleIDs_.WriteTo(output, _repeated_additionalRoleIDs_codec);
      if (RoleCategory != 0) {
        output.WriteRawTag(24);
        output.WriteEnum((int) RoleCategory);
      }
      shapePartTypes_.WriteTo(output, _repeated_shapePartTypes_codec);
      radius_.WriteTo(output, _repeated_radius_codec);
      if (CameraDistance != 0) {
        output.WriteRawTag(48);
        output.WriteInt32(CameraDistance);
      }
      if (CameraHeight != 0) {
        output.WriteRawTag(56);
        output.WriteInt32(CameraHeight);
      }
      if (CameraLookAtHeight != 0) {
        output.WriteRawTag(64);
        output.WriteInt32(CameraLookAtHeight);
      }
      if (DeathTime != 0) {
        output.WriteRawTag(72);
        output.WriteEnum((int) DeathTime);
      }
      if (ModelPath.Length != 0) {
        output.WriteRawTag(82);
        output.WriteString(ModelPath);
      }
      if (ModelName.Length != 0) {
        output.WriteRawTag(90);
        output.WriteString(ModelName);
      }
      melees_.WriteTo(output, _repeated_melees_codec);
      ability_.WriteTo(output, _repeated_ability_codec);
      rageAbility_.WriteTo(output, _repeated_rageAbility_codec);
      avoidAbility_.WriteTo(output, _repeated_avoidAbility_codec);
      if (BaseHP != 0) {
        output.WriteRawTag(128, 1);
        output.WriteInt32(BaseHP);
      }
      if (BaseAttack != 0) {
        output.WriteRawTag(136, 1);
        output.WriteInt32(BaseAttack);
      }
      if (BaseDefend != 0) {
        output.WriteRawTag(144, 1);
        output.WriteInt32(BaseDefend);
      }
      if (GrowHPByLevel != 0) {
        output.WriteRawTag(152, 1);
        output.WriteInt32(GrowHPByLevel);
      }
      if (GrowAttackByLevel != 0) {
        output.WriteRawTag(160, 1);
        output.WriteInt32(GrowAttackByLevel);
      }
      if (GrowDefendByLevel != 0) {
        output.WriteRawTag(168, 1);
        output.WriteInt32(GrowDefendByLevel);
      }
      if (GrowHPByStar != 0) {
        output.WriteRawTag(176, 1);
        output.WriteInt32(GrowHPByStar);
      }
      if (GrowAttackByStar != 0) {
        output.WriteRawTag(184, 1);
        output.WriteInt32(GrowAttackByStar);
      }
      if (UseRunMoveCurve != false) {
        output.WriteRawTag(192, 1);
        output.WriteBool(UseRunMoveCurve);
      }
      if (Speed != 0) {
        output.WriteRawTag(200, 1);
        output.WriteInt32(Speed);
      }
      if (GrowDefendByStar != 0) {
        output.WriteRawTag(208, 1);
        output.WriteInt32(GrowDefendByStar);
      }
      if (RoleType != 0) {
        output.WriteRawTag(216, 1);
        output.WriteEnum((int) RoleType);
      }
      hitRecoverID_.WriteTo(output, _repeated_hitRecoverID_codec);
      if (HitBackRecoverID != 0) {
        output.WriteRawTag(232, 1);
        output.WriteInt32(HitBackRecoverID);
      }
      if (HitAirID != 0) {
        output.WriteRawTag(240, 1);
        output.WriteInt32(HitAirID);
      }
      if (HitUpID != 0) {
        output.WriteRawTag(248, 1);
        output.WriteInt32(HitUpID);
      }
      if (HitDownID != 0) {
        output.WriteRawTag(128, 2);
        output.WriteInt32(HitDownID);
      }
      if (HitFloorID != 0) {
        output.WriteRawTag(136, 2);
        output.WriteInt32(HitFloorID);
      }
      if (GetUpID != 0) {
        output.WriteRawTag(144, 2);
        output.WriteInt32(GetUpID);
      }
      if (HitUpAirID != 0) {
        output.WriteRawTag(152, 2);
        output.WriteInt32(HitUpAirID);
      }
      if (Run != 0) {
        output.WriteRawTag(160, 2);
        output.WriteInt32(Run);
      }
      if (Idle != 0) {
        output.WriteRawTag(168, 2);
        output.WriteInt32(Idle);
      }
      if (Weight != 0) {
        output.WriteRawTag(176, 2);
        output.WriteInt32(Weight);
      }
      if (RunLeft != 0) {
        output.WriteRawTag(184, 2);
        output.WriteInt32(RunLeft);
      }
      if (RunRight != 0) {
        output.WriteRawTag(192, 2);
        output.WriteInt32(RunRight);
      }
      if (Death != 0) {
        output.WriteRawTag(200, 2);
        output.WriteInt32(Death);
      }
      if (NoAnimationDeath != 0) {
        output.WriteRawTag(208, 2);
        output.WriteInt32(NoAnimationDeath);
      }
      if (AirDeath != 0) {
        output.WriteRawTag(216, 2);
        output.WriteInt32(AirDeath);
      }
      if (Appear != 0) {
        output.WriteRawTag(224, 2);
        output.WriteInt32(Appear);
      }
      if (MovementStop != 0) {
        output.WriteRawTag(232, 2);
        output.WriteInt32(MovementStop);
      }
      if (CanHitBack != false) {
        output.WriteRawTag(240, 2);
        output.WriteBool(CanHitBack);
      }
      if (CanHitUp != false) {
        output.WriteRawTag(248, 2);
        output.WriteBool(CanHitUp);
      }
      if (UseRushMoveCurve != false) {
        output.WriteRawTag(128, 3);
        output.WriteBool(UseRushMoveCurve);
      }
      if (RushID != 0) {
        output.WriteRawTag(136, 3);
        output.WriteInt32(RushID);
      }
      if (RushStopID != 0) {
        output.WriteRawTag(144, 3);
        output.WriteInt32(RushStopID);
      }
      if (RushSpeed != 0) {
        output.WriteRawTag(152, 3);
        output.WriteInt32(RushSpeed);
      }
      hitBackValidTime_.WriteTo(output, _repeated_hitBackValidTime_codec);
      if (BalanceValue != 0) {
        output.WriteRawTag(168, 3);
        output.WriteInt32(BalanceValue);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ID != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ID);
      }
      size += additionalRoleIDs_.CalculateSize(_repeated_additionalRoleIDs_codec);
      if (RoleCategory != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) RoleCategory);
      }
      size += shapePartTypes_.CalculateSize(_repeated_shapePartTypes_codec);
      size += radius_.CalculateSize(_repeated_radius_codec);
      if (CameraDistance != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(CameraDistance);
      }
      if (CameraHeight != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(CameraHeight);
      }
      if (CameraLookAtHeight != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(CameraLookAtHeight);
      }
      if (DeathTime != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) DeathTime);
      }
      if (ModelPath.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ModelPath);
      }
      if (ModelName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ModelName);
      }
      size += melees_.CalculateSize(_repeated_melees_codec);
      size += ability_.CalculateSize(_repeated_ability_codec);
      size += rageAbility_.CalculateSize(_repeated_rageAbility_codec);
      size += avoidAbility_.CalculateSize(_repeated_avoidAbility_codec);
      if (BaseHP != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(BaseHP);
      }
      if (BaseAttack != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(BaseAttack);
      }
      if (BaseDefend != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(BaseDefend);
      }
      if (GrowHPByLevel != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(GrowHPByLevel);
      }
      if (GrowAttackByLevel != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(GrowAttackByLevel);
      }
      if (GrowDefendByLevel != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(GrowDefendByLevel);
      }
      if (GrowHPByStar != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(GrowHPByStar);
      }
      if (GrowAttackByStar != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(GrowAttackByStar);
      }
      if (UseRunMoveCurve != false) {
        size += 2 + 1;
      }
      if (Speed != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(Speed);
      }
      if (GrowDefendByStar != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(GrowDefendByStar);
      }
      if (RoleType != 0) {
        size += 2 + pb::CodedOutputStream.ComputeEnumSize((int) RoleType);
      }
      size += hitRecoverID_.CalculateSize(_repeated_hitRecoverID_codec);
      if (HitBackRecoverID != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(HitBackRecoverID);
      }
      if (HitAirID != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(HitAirID);
      }
      if (HitUpID != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(HitUpID);
      }
      if (HitDownID != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(HitDownID);
      }
      if (HitFloorID != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(HitFloorID);
      }
      if (GetUpID != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(GetUpID);
      }
      if (HitUpAirID != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(HitUpAirID);
      }
      if (Run != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(Run);
      }
      if (Idle != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(Idle);
      }
      if (Weight != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(Weight);
      }
      if (RunLeft != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(RunLeft);
      }
      if (RunRight != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(RunRight);
      }
      if (Death != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(Death);
      }
      if (NoAnimationDeath != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(NoAnimationDeath);
      }
      if (AirDeath != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(AirDeath);
      }
      if (Appear != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(Appear);
      }
      if (MovementStop != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(MovementStop);
      }
      if (CanHitBack != false) {
        size += 2 + 1;
      }
      if (CanHitUp != false) {
        size += 2 + 1;
      }
      if (UseRushMoveCurve != false) {
        size += 2 + 1;
      }
      if (RushID != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(RushID);
      }
      if (RushStopID != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(RushStopID);
      }
      if (RushSpeed != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(RushSpeed);
      }
      size += hitBackValidTime_.CalculateSize(_repeated_hitBackValidTime_codec);
      if (BalanceValue != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(BalanceValue);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(RoleConfig other) {
      if (other == null) {
        return;
      }
      if (other.ID != 0) {
        ID = other.ID;
      }
      additionalRoleIDs_.Add(other.additionalRoleIDs_);
      if (other.RoleCategory != 0) {
        RoleCategory = other.RoleCategory;
      }
      shapePartTypes_.Add(other.shapePartTypes_);
      radius_.Add(other.radius_);
      if (other.CameraDistance != 0) {
        CameraDistance = other.CameraDistance;
      }
      if (other.CameraHeight != 0) {
        CameraHeight = other.CameraHeight;
      }
      if (other.CameraLookAtHeight != 0) {
        CameraLookAtHeight = other.CameraLookAtHeight;
      }
      if (other.DeathTime != 0) {
        DeathTime = other.DeathTime;
      }
      if (other.ModelPath.Length != 0) {
        ModelPath = other.ModelPath;
      }
      if (other.ModelName.Length != 0) {
        ModelName = other.ModelName;
      }
      melees_.Add(other.melees_);
      ability_.Add(other.ability_);
      rageAbility_.Add(other.rageAbility_);
      avoidAbility_.Add(other.avoidAbility_);
      if (other.BaseHP != 0) {
        BaseHP = other.BaseHP;
      }
      if (other.BaseAttack != 0) {
        BaseAttack = other.BaseAttack;
      }
      if (other.BaseDefend != 0) {
        BaseDefend = other.BaseDefend;
      }
      if (other.GrowHPByLevel != 0) {
        GrowHPByLevel = other.GrowHPByLevel;
      }
      if (other.GrowAttackByLevel != 0) {
        GrowAttackByLevel = other.GrowAttackByLevel;
      }
      if (other.GrowDefendByLevel != 0) {
        GrowDefendByLevel = other.GrowDefendByLevel;
      }
      if (other.GrowHPByStar != 0) {
        GrowHPByStar = other.GrowHPByStar;
      }
      if (other.GrowAttackByStar != 0) {
        GrowAttackByStar = other.GrowAttackByStar;
      }
      if (other.UseRunMoveCurve != false) {
        UseRunMoveCurve = other.UseRunMoveCurve;
      }
      if (other.Speed != 0) {
        Speed = other.Speed;
      }
      if (other.GrowDefendByStar != 0) {
        GrowDefendByStar = other.GrowDefendByStar;
      }
      if (other.RoleType != 0) {
        RoleType = other.RoleType;
      }
      hitRecoverID_.Add(other.hitRecoverID_);
      if (other.HitBackRecoverID != 0) {
        HitBackRecoverID = other.HitBackRecoverID;
      }
      if (other.HitAirID != 0) {
        HitAirID = other.HitAirID;
      }
      if (other.HitUpID != 0) {
        HitUpID = other.HitUpID;
      }
      if (other.HitDownID != 0) {
        HitDownID = other.HitDownID;
      }
      if (other.HitFloorID != 0) {
        HitFloorID = other.HitFloorID;
      }
      if (other.GetUpID != 0) {
        GetUpID = other.GetUpID;
      }
      if (other.HitUpAirID != 0) {
        HitUpAirID = other.HitUpAirID;
      }
      if (other.Run != 0) {
        Run = other.Run;
      }
      if (other.Idle != 0) {
        Idle = other.Idle;
      }
      if (other.Weight != 0) {
        Weight = other.Weight;
      }
      if (other.RunLeft != 0) {
        RunLeft = other.RunLeft;
      }
      if (other.RunRight != 0) {
        RunRight = other.RunRight;
      }
      if (other.Death != 0) {
        Death = other.Death;
      }
      if (other.NoAnimationDeath != 0) {
        NoAnimationDeath = other.NoAnimationDeath;
      }
      if (other.AirDeath != 0) {
        AirDeath = other.AirDeath;
      }
      if (other.Appear != 0) {
        Appear = other.Appear;
      }
      if (other.MovementStop != 0) {
        MovementStop = other.MovementStop;
      }
      if (other.CanHitBack != false) {
        CanHitBack = other.CanHitBack;
      }
      if (other.CanHitUp != false) {
        CanHitUp = other.CanHitUp;
      }
      if (other.UseRushMoveCurve != false) {
        UseRushMoveCurve = other.UseRushMoveCurve;
      }
      if (other.RushID != 0) {
        RushID = other.RushID;
      }
      if (other.RushStopID != 0) {
        RushStopID = other.RushStopID;
      }
      if (other.RushSpeed != 0) {
        RushSpeed = other.RushSpeed;
      }
      hitBackValidTime_.Add(other.hitBackValidTime_);
      if (other.BalanceValue != 0) {
        BalanceValue = other.BalanceValue;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            ID = input.ReadInt32();
            break;
          }
          case 18:
          case 16: {
            additionalRoleIDs_.AddEntriesFrom(input, _repeated_additionalRoleIDs_codec);
            break;
          }
          case 24: {
            roleCategory_ = (global::Config.RoleCategory) input.ReadEnum();
            break;
          }
          case 34:
          case 32: {
            shapePartTypes_.AddEntriesFrom(input, _repeated_shapePartTypes_codec);
            break;
          }
          case 42:
          case 40: {
            radius_.AddEntriesFrom(input, _repeated_radius_codec);
            break;
          }
          case 48: {
            CameraDistance = input.ReadInt32();
            break;
          }
          case 56: {
            CameraHeight = input.ReadInt32();
            break;
          }
          case 64: {
            CameraLookAtHeight = input.ReadInt32();
            break;
          }
          case 72: {
            deathTime_ = (global::Config.DeathTimeType) input.ReadEnum();
            break;
          }
          case 82: {
            ModelPath = input.ReadString();
            break;
          }
          case 90: {
            ModelName = input.ReadString();
            break;
          }
          case 98:
          case 96: {
            melees_.AddEntriesFrom(input, _repeated_melees_codec);
            break;
          }
          case 106:
          case 104: {
            ability_.AddEntriesFrom(input, _repeated_ability_codec);
            break;
          }
          case 114:
          case 112: {
            rageAbility_.AddEntriesFrom(input, _repeated_rageAbility_codec);
            break;
          }
          case 122:
          case 120: {
            avoidAbility_.AddEntriesFrom(input, _repeated_avoidAbility_codec);
            break;
          }
          case 128: {
            BaseHP = input.ReadInt32();
            break;
          }
          case 136: {
            BaseAttack = input.ReadInt32();
            break;
          }
          case 144: {
            BaseDefend = input.ReadInt32();
            break;
          }
          case 152: {
            GrowHPByLevel = input.ReadInt32();
            break;
          }
          case 160: {
            GrowAttackByLevel = input.ReadInt32();
            break;
          }
          case 168: {
            GrowDefendByLevel = input.ReadInt32();
            break;
          }
          case 176: {
            GrowHPByStar = input.ReadInt32();
            break;
          }
          case 184: {
            GrowAttackByStar = input.ReadInt32();
            break;
          }
          case 192: {
            UseRunMoveCurve = input.ReadBool();
            break;
          }
          case 200: {
            Speed = input.ReadInt32();
            break;
          }
          case 208: {
            GrowDefendByStar = input.ReadInt32();
            break;
          }
          case 216: {
            roleType_ = (global::Config.RoleType) input.ReadEnum();
            break;
          }
          case 226:
          case 224: {
            hitRecoverID_.AddEntriesFrom(input, _repeated_hitRecoverID_codec);
            break;
          }
          case 232: {
            HitBackRecoverID = input.ReadInt32();
            break;
          }
          case 240: {
            HitAirID = input.ReadInt32();
            break;
          }
          case 248: {
            HitUpID = input.ReadInt32();
            break;
          }
          case 256: {
            HitDownID = input.ReadInt32();
            break;
          }
          case 264: {
            HitFloorID = input.ReadInt32();
            break;
          }
          case 272: {
            GetUpID = input.ReadInt32();
            break;
          }
          case 280: {
            HitUpAirID = input.ReadInt32();
            break;
          }
          case 288: {
            Run = input.ReadInt32();
            break;
          }
          case 296: {
            Idle = input.ReadInt32();
            break;
          }
          case 304: {
            Weight = input.ReadInt32();
            break;
          }
          case 312: {
            RunLeft = input.ReadInt32();
            break;
          }
          case 320: {
            RunRight = input.ReadInt32();
            break;
          }
          case 328: {
            Death = input.ReadInt32();
            break;
          }
          case 336: {
            NoAnimationDeath = input.ReadInt32();
            break;
          }
          case 344: {
            AirDeath = input.ReadInt32();
            break;
          }
          case 352: {
            Appear = input.ReadInt32();
            break;
          }
          case 360: {
            MovementStop = input.ReadInt32();
            break;
          }
          case 368: {
            CanHitBack = input.ReadBool();
            break;
          }
          case 376: {
            CanHitUp = input.ReadBool();
            break;
          }
          case 384: {
            UseRushMoveCurve = input.ReadBool();
            break;
          }
          case 392: {
            RushID = input.ReadInt32();
            break;
          }
          case 400: {
            RushStopID = input.ReadInt32();
            break;
          }
          case 408: {
            RushSpeed = input.ReadInt32();
            break;
          }
          case 418:
          case 416: {
            hitBackValidTime_.AddEntriesFrom(input, _repeated_hitBackValidTime_codec);
            break;
          }
          case 424: {
            BalanceValue = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class buff : pb::IMessage<buff> {
    private static readonly pb::MessageParser<buff> _parser = new pb::MessageParser<buff>(() => new buff());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<buff> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Config.ConfigReflection.Descriptor.MessageTypes[11]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public buff() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public buff(buff other) : this() {
      iD_ = other.iD_;
      buffId_ = other.buffId_;
      name_ = other.name_;
      remark_ = other.remark_;
      type_ = other.type_;
      subType_ = other.subType_;
      damageType_ = other.damageType_;
      keepTime_ = other.keepTime_;
      floor_ = other.floor_;
      subFloor_ = other.subFloor_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public buff Clone() {
      return new buff(this);
    }

    /// <summary>Field number for the "ID" field.</summary>
    public const int IDFieldNumber = 1;
    private int iD_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ID {
      get { return iD_; }
      set {
        iD_ = value;
      }
    }

    /// <summary>Field number for the "buff_id" field.</summary>
    public const int BuffIdFieldNumber = 2;
    private int buffId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int BuffId {
      get { return buffId_; }
      set {
        buffId_ = value;
      }
    }

    /// <summary>Field number for the "name" field.</summary>
    public const int NameFieldNumber = 3;
    private string name_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Name {
      get { return name_; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "remark" field.</summary>
    public const int RemarkFieldNumber = 4;
    private string remark_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Remark {
      get { return remark_; }
      set {
        remark_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "type" field.</summary>
    public const int TypeFieldNumber = 5;
    private int type_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Type {
      get { return type_; }
      set {
        type_ = value;
      }
    }

    /// <summary>Field number for the "sub_type" field.</summary>
    public const int SubTypeFieldNumber = 6;
    private int subType_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int SubType {
      get { return subType_; }
      set {
        subType_ = value;
      }
    }

    /// <summary>Field number for the "damage_type" field.</summary>
    public const int DamageTypeFieldNumber = 7;
    private int damageType_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int DamageType {
      get { return damageType_; }
      set {
        damageType_ = value;
      }
    }

    /// <summary>Field number for the "keep_time" field.</summary>
    public const int KeepTimeFieldNumber = 8;
    private int keepTime_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int KeepTime {
      get { return keepTime_; }
      set {
        keepTime_ = value;
      }
    }

    /// <summary>Field number for the "floor" field.</summary>
    public const int FloorFieldNumber = 9;
    private int floor_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Floor {
      get { return floor_; }
      set {
        floor_ = value;
      }
    }

    /// <summary>Field number for the "sub_floor" field.</summary>
    public const int SubFloorFieldNumber = 10;
    private int subFloor_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int SubFloor {
      get { return subFloor_; }
      set {
        subFloor_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as buff);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(buff other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (ID != other.ID) return false;
      if (BuffId != other.BuffId) return false;
      if (Name != other.Name) return false;
      if (Remark != other.Remark) return false;
      if (Type != other.Type) return false;
      if (SubType != other.SubType) return false;
      if (DamageType != other.DamageType) return false;
      if (KeepTime != other.KeepTime) return false;
      if (Floor != other.Floor) return false;
      if (SubFloor != other.SubFloor) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (ID != 0) hash ^= ID.GetHashCode();
      if (BuffId != 0) hash ^= BuffId.GetHashCode();
      if (Name.Length != 0) hash ^= Name.GetHashCode();
      if (Remark.Length != 0) hash ^= Remark.GetHashCode();
      if (Type != 0) hash ^= Type.GetHashCode();
      if (SubType != 0) hash ^= SubType.GetHashCode();
      if (DamageType != 0) hash ^= DamageType.GetHashCode();
      if (KeepTime != 0) hash ^= KeepTime.GetHashCode();
      if (Floor != 0) hash ^= Floor.GetHashCode();
      if (SubFloor != 0) hash ^= SubFloor.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (ID != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(ID);
      }
      if (BuffId != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(BuffId);
      }
      if (Name.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(Name);
      }
      if (Remark.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(Remark);
      }
      if (Type != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(Type);
      }
      if (SubType != 0) {
        output.WriteRawTag(48);
        output.WriteInt32(SubType);
      }
      if (DamageType != 0) {
        output.WriteRawTag(56);
        output.WriteInt32(DamageType);
      }
      if (KeepTime != 0) {
        output.WriteRawTag(64);
        output.WriteInt32(KeepTime);
      }
      if (Floor != 0) {
        output.WriteRawTag(72);
        output.WriteInt32(Floor);
      }
      if (SubFloor != 0) {
        output.WriteRawTag(80);
        output.WriteInt32(SubFloor);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ID != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ID);
      }
      if (BuffId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(BuffId);
      }
      if (Name.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
      }
      if (Remark.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Remark);
      }
      if (Type != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Type);
      }
      if (SubType != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(SubType);
      }
      if (DamageType != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(DamageType);
      }
      if (KeepTime != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(KeepTime);
      }
      if (Floor != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Floor);
      }
      if (SubFloor != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(SubFloor);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(buff other) {
      if (other == null) {
        return;
      }
      if (other.ID != 0) {
        ID = other.ID;
      }
      if (other.BuffId != 0) {
        BuffId = other.BuffId;
      }
      if (other.Name.Length != 0) {
        Name = other.Name;
      }
      if (other.Remark.Length != 0) {
        Remark = other.Remark;
      }
      if (other.Type != 0) {
        Type = other.Type;
      }
      if (other.SubType != 0) {
        SubType = other.SubType;
      }
      if (other.DamageType != 0) {
        DamageType = other.DamageType;
      }
      if (other.KeepTime != 0) {
        KeepTime = other.KeepTime;
      }
      if (other.Floor != 0) {
        Floor = other.Floor;
      }
      if (other.SubFloor != 0) {
        SubFloor = other.SubFloor;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            ID = input.ReadInt32();
            break;
          }
          case 16: {
            BuffId = input.ReadInt32();
            break;
          }
          case 26: {
            Name = input.ReadString();
            break;
          }
          case 34: {
            Remark = input.ReadString();
            break;
          }
          case 40: {
            Type = input.ReadInt32();
            break;
          }
          case 48: {
            SubType = input.ReadInt32();
            break;
          }
          case 56: {
            DamageType = input.ReadInt32();
            break;
          }
          case 64: {
            KeepTime = input.ReadInt32();
            break;
          }
          case 72: {
            Floor = input.ReadInt32();
            break;
          }
          case 80: {
            SubFloor = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class LockActionNode : pb::IMessage<LockActionNode> {
    private static readonly pb::MessageParser<LockActionNode> _parser = new pb::MessageParser<LockActionNode>(() => new LockActionNode());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<LockActionNode> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Config.ConfigReflection.Descriptor.MessageTypes[12]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LockActionNode() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LockActionNode(LockActionNode other) : this() {
      start_ = other.start_;
      duration_ = other.duration_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LockActionNode Clone() {
      return new LockActionNode(this);
    }

    /// <summary>Field number for the "Start" field.</summary>
    public const int StartFieldNumber = 1;
    private int start_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Start {
      get { return start_; }
      set {
        start_ = value;
      }
    }

    /// <summary>Field number for the "Duration" field.</summary>
    public const int DurationFieldNumber = 2;
    private int duration_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Duration {
      get { return duration_; }
      set {
        duration_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as LockActionNode);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(LockActionNode other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Start != other.Start) return false;
      if (Duration != other.Duration) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Start != 0) hash ^= Start.GetHashCode();
      if (Duration != 0) hash ^= Duration.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Start != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Start);
      }
      if (Duration != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Duration);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Start != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Start);
      }
      if (Duration != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Duration);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(LockActionNode other) {
      if (other == null) {
        return;
      }
      if (other.Start != 0) {
        Start = other.Start;
      }
      if (other.Duration != 0) {
        Duration = other.Duration;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Start = input.ReadInt32();
            break;
          }
          case 16: {
            Duration = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class Auto_Generate_Interrupt_Other : pb::IMessage<Auto_Generate_Interrupt_Other> {
    private static readonly pb::MessageParser<Auto_Generate_Interrupt_Other> _parser = new pb::MessageParser<Auto_Generate_Interrupt_Other>(() => new Auto_Generate_Interrupt_Other());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Auto_Generate_Interrupt_Other> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Config.ConfigReflection.Descriptor.MessageTypes[13]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Auto_Generate_Interrupt_Other() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Auto_Generate_Interrupt_Other(Auto_Generate_Interrupt_Other other) : this() {
      iD_ = other.iD_;
      canInterrupt_ = other.canInterrupt_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Auto_Generate_Interrupt_Other Clone() {
      return new Auto_Generate_Interrupt_Other(this);
    }

    /// <summary>Field number for the "ID" field.</summary>
    public const int IDFieldNumber = 1;
    private int iD_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ID {
      get { return iD_; }
      set {
        iD_ = value;
      }
    }

    /// <summary>Field number for the "CanInterrupt" field.</summary>
    public const int CanInterruptFieldNumber = 2;
    private bool canInterrupt_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool CanInterrupt {
      get { return canInterrupt_; }
      set {
        canInterrupt_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Auto_Generate_Interrupt_Other);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Auto_Generate_Interrupt_Other other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (ID != other.ID) return false;
      if (CanInterrupt != other.CanInterrupt) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (ID != 0) hash ^= ID.GetHashCode();
      if (CanInterrupt != false) hash ^= CanInterrupt.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (ID != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(ID);
      }
      if (CanInterrupt != false) {
        output.WriteRawTag(16);
        output.WriteBool(CanInterrupt);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ID != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ID);
      }
      if (CanInterrupt != false) {
        size += 1 + 1;
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Auto_Generate_Interrupt_Other other) {
      if (other == null) {
        return;
      }
      if (other.ID != 0) {
        ID = other.ID;
      }
      if (other.CanInterrupt != false) {
        CanInterrupt = other.CanInterrupt;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            ID = input.ReadInt32();
            break;
          }
          case 16: {
            CanInterrupt = input.ReadBool();
            break;
          }
        }
      }
    }

  }

  public sealed partial class TimelineRootMotionConfig : pb::IMessage<TimelineRootMotionConfig> {
    private static readonly pb::MessageParser<TimelineRootMotionConfig> _parser = new pb::MessageParser<TimelineRootMotionConfig>(() => new TimelineRootMotionConfig());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<TimelineRootMotionConfig> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Config.ConfigReflection.Descriptor.MessageTypes[14]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TimelineRootMotionConfig() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TimelineRootMotionConfig(TimelineRootMotionConfig other) : this() {
      iD_ = other.iD_;
      modelID_ = other.modelID_;
      actionName_ = other.actionName_;
      yBakeIntoPose_ = other.yBakeIntoPose_;
      yOriginalOrRootNode_ = other.yOriginalOrRootNode_;
      xZBakeIntoPose_ = other.xZBakeIntoPose_;
      xZOriginalOrRootNode_ = other.xZOriginalOrRootNode_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TimelineRootMotionConfig Clone() {
      return new TimelineRootMotionConfig(this);
    }

    /// <summary>Field number for the "ID" field.</summary>
    public const int IDFieldNumber = 1;
    private int iD_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ID {
      get { return iD_; }
      set {
        iD_ = value;
      }
    }

    /// <summary>Field number for the "ModelID" field.</summary>
    public const int ModelIDFieldNumber = 2;
    private int modelID_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ModelID {
      get { return modelID_; }
      set {
        modelID_ = value;
      }
    }

    /// <summary>Field number for the "ActionName" field.</summary>
    public const int ActionNameFieldNumber = 3;
    private string actionName_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ActionName {
      get { return actionName_; }
      set {
        actionName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "Y_BakeIntoPose" field.</summary>
    public const int YBakeIntoPoseFieldNumber = 4;
    private int yBakeIntoPose_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int YBakeIntoPose {
      get { return yBakeIntoPose_; }
      set {
        yBakeIntoPose_ = value;
      }
    }

    /// <summary>Field number for the "Y_OriginalOrRootNode" field.</summary>
    public const int YOriginalOrRootNodeFieldNumber = 5;
    private int yOriginalOrRootNode_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int YOriginalOrRootNode {
      get { return yOriginalOrRootNode_; }
      set {
        yOriginalOrRootNode_ = value;
      }
    }

    /// <summary>Field number for the "XZ_BakeIntoPose" field.</summary>
    public const int XZBakeIntoPoseFieldNumber = 6;
    private int xZBakeIntoPose_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int XZBakeIntoPose {
      get { return xZBakeIntoPose_; }
      set {
        xZBakeIntoPose_ = value;
      }
    }

    /// <summary>Field number for the "XZ_OriginalOrRootNode" field.</summary>
    public const int XZOriginalOrRootNodeFieldNumber = 7;
    private int xZOriginalOrRootNode_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int XZOriginalOrRootNode {
      get { return xZOriginalOrRootNode_; }
      set {
        xZOriginalOrRootNode_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as TimelineRootMotionConfig);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(TimelineRootMotionConfig other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (ID != other.ID) return false;
      if (ModelID != other.ModelID) return false;
      if (ActionName != other.ActionName) return false;
      if (YBakeIntoPose != other.YBakeIntoPose) return false;
      if (YOriginalOrRootNode != other.YOriginalOrRootNode) return false;
      if (XZBakeIntoPose != other.XZBakeIntoPose) return false;
      if (XZOriginalOrRootNode != other.XZOriginalOrRootNode) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (ID != 0) hash ^= ID.GetHashCode();
      if (ModelID != 0) hash ^= ModelID.GetHashCode();
      if (ActionName.Length != 0) hash ^= ActionName.GetHashCode();
      if (YBakeIntoPose != 0) hash ^= YBakeIntoPose.GetHashCode();
      if (YOriginalOrRootNode != 0) hash ^= YOriginalOrRootNode.GetHashCode();
      if (XZBakeIntoPose != 0) hash ^= XZBakeIntoPose.GetHashCode();
      if (XZOriginalOrRootNode != 0) hash ^= XZOriginalOrRootNode.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (ID != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(ID);
      }
      if (ModelID != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(ModelID);
      }
      if (ActionName.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(ActionName);
      }
      if (YBakeIntoPose != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(YBakeIntoPose);
      }
      if (YOriginalOrRootNode != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(YOriginalOrRootNode);
      }
      if (XZBakeIntoPose != 0) {
        output.WriteRawTag(48);
        output.WriteInt32(XZBakeIntoPose);
      }
      if (XZOriginalOrRootNode != 0) {
        output.WriteRawTag(56);
        output.WriteInt32(XZOriginalOrRootNode);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ID != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ID);
      }
      if (ModelID != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ModelID);
      }
      if (ActionName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ActionName);
      }
      if (YBakeIntoPose != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(YBakeIntoPose);
      }
      if (YOriginalOrRootNode != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(YOriginalOrRootNode);
      }
      if (XZBakeIntoPose != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(XZBakeIntoPose);
      }
      if (XZOriginalOrRootNode != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(XZOriginalOrRootNode);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(TimelineRootMotionConfig other) {
      if (other == null) {
        return;
      }
      if (other.ID != 0) {
        ID = other.ID;
      }
      if (other.ModelID != 0) {
        ModelID = other.ModelID;
      }
      if (other.ActionName.Length != 0) {
        ActionName = other.ActionName;
      }
      if (other.YBakeIntoPose != 0) {
        YBakeIntoPose = other.YBakeIntoPose;
      }
      if (other.YOriginalOrRootNode != 0) {
        YOriginalOrRootNode = other.YOriginalOrRootNode;
      }
      if (other.XZBakeIntoPose != 0) {
        XZBakeIntoPose = other.XZBakeIntoPose;
      }
      if (other.XZOriginalOrRootNode != 0) {
        XZOriginalOrRootNode = other.XZOriginalOrRootNode;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            ID = input.ReadInt32();
            break;
          }
          case 16: {
            ModelID = input.ReadInt32();
            break;
          }
          case 26: {
            ActionName = input.ReadString();
            break;
          }
          case 32: {
            YBakeIntoPose = input.ReadInt32();
            break;
          }
          case 40: {
            YOriginalOrRootNode = input.ReadInt32();
            break;
          }
          case 48: {
            XZBakeIntoPose = input.ReadInt32();
            break;
          }
          case 56: {
            XZOriginalOrRootNode = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class ShapeEnableInfo : pb::IMessage<ShapeEnableInfo> {
    private static readonly pb::MessageParser<ShapeEnableInfo> _parser = new pb::MessageParser<ShapeEnableInfo>(() => new ShapeEnableInfo());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ShapeEnableInfo> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Config.ConfigReflection.Descriptor.MessageTypes[15]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ShapeEnableInfo() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ShapeEnableInfo(ShapeEnableInfo other) : this() {
      start_ = other.start_;
      duration_ = other.duration_;
      isEnable_ = other.isEnable_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ShapeEnableInfo Clone() {
      return new ShapeEnableInfo(this);
    }

    /// <summary>Field number for the "Start" field.</summary>
    public const int StartFieldNumber = 1;
    private int start_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Start {
      get { return start_; }
      set {
        start_ = value;
      }
    }

    /// <summary>Field number for the "Duration" field.</summary>
    public const int DurationFieldNumber = 2;
    private int duration_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Duration {
      get { return duration_; }
      set {
        duration_ = value;
      }
    }

    /// <summary>Field number for the "IsEnable" field.</summary>
    public const int IsEnableFieldNumber = 3;
    private int isEnable_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int IsEnable {
      get { return isEnable_; }
      set {
        isEnable_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ShapeEnableInfo);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ShapeEnableInfo other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Start != other.Start) return false;
      if (Duration != other.Duration) return false;
      if (IsEnable != other.IsEnable) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Start != 0) hash ^= Start.GetHashCode();
      if (Duration != 0) hash ^= Duration.GetHashCode();
      if (IsEnable != 0) hash ^= IsEnable.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Start != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Start);
      }
      if (Duration != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Duration);
      }
      if (IsEnable != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(IsEnable);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Start != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Start);
      }
      if (Duration != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Duration);
      }
      if (IsEnable != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(IsEnable);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ShapeEnableInfo other) {
      if (other == null) {
        return;
      }
      if (other.Start != 0) {
        Start = other.Start;
      }
      if (other.Duration != 0) {
        Duration = other.Duration;
      }
      if (other.IsEnable != 0) {
        IsEnable = other.IsEnable;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Start = input.ReadInt32();
            break;
          }
          case 16: {
            Duration = input.ReadInt32();
            break;
          }
          case 24: {
            IsEnable = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class InterestConfig : pb::IMessage<InterestConfig> {
    private static readonly pb::MessageParser<InterestConfig> _parser = new pb::MessageParser<InterestConfig>(() => new InterestConfig());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<InterestConfig> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Config.ConfigReflection.Descriptor.MessageTypes[16]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public InterestConfig() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public InterestConfig(InterestConfig other) : this() {
      iD_ = other.iD_;
      group_ = other.group_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public InterestConfig Clone() {
      return new InterestConfig(this);
    }

    /// <summary>Field number for the "ID" field.</summary>
    public const int IDFieldNumber = 1;
    private int iD_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ID {
      get { return iD_; }
      set {
        iD_ = value;
      }
    }

    /// <summary>Field number for the "Group" field.</summary>
    public const int GroupFieldNumber = 2;
    private static readonly pb::FieldCodec<global::Config.RoleType> _repeated_group_codec
        = pb::FieldCodec.ForEnum(18, x => (int) x, x => (global::Config.RoleType) x);
    private readonly pbc::RepeatedField<global::Config.RoleType> group_ = new pbc::RepeatedField<global::Config.RoleType>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Config.RoleType> Group {
      get { return group_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as InterestConfig);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(InterestConfig other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (ID != other.ID) return false;
      if(!group_.Equals(other.group_)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (ID != 0) hash ^= ID.GetHashCode();
      hash ^= group_.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (ID != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(ID);
      }
      group_.WriteTo(output, _repeated_group_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ID != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ID);
      }
      size += group_.CalculateSize(_repeated_group_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(InterestConfig other) {
      if (other == null) {
        return;
      }
      if (other.ID != 0) {
        ID = other.ID;
      }
      group_.Add(other.group_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            ID = input.ReadInt32();
            break;
          }
          case 18:
          case 16: {
            group_.AddEntriesFrom(input, _repeated_group_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class ThrownCollisionCheckInfo : pb::IMessage<ThrownCollisionCheckInfo> {
    private static readonly pb::MessageParser<ThrownCollisionCheckInfo> _parser = new pb::MessageParser<ThrownCollisionCheckInfo>(() => new ThrownCollisionCheckInfo());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ThrownCollisionCheckInfo> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Config.ConfigReflection.Descriptor.MessageTypes[17]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ThrownCollisionCheckInfo() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ThrownCollisionCheckInfo(ThrownCollisionCheckInfo other) : this() {
      start_ = other.start_;
      duration_ = other.duration_;
      rangeType_ = other.rangeType_;
      radius_ = other.radius_;
      angle_ = other.angle_;
      length_ = other.length_;
      width_ = other.width_;
      height_ = other.height_;
      centerOffset_ = other.centerOffset_;
      ignoreHitHistory_ = other.ignoreHitHistory_;
      thrownBehaviourOnCollision_ = other.thrownBehaviourOnCollision_;
      spawnThrownTimelineID_ = other.spawnThrownTimelineID_;
      changeTargetCountLimit_ = other.changeTargetCountLimit_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ThrownCollisionCheckInfo Clone() {
      return new ThrownCollisionCheckInfo(this);
    }

    /// <summary>Field number for the "Start" field.</summary>
    public const int StartFieldNumber = 1;
    private int start_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Start {
      get { return start_; }
      set {
        start_ = value;
      }
    }

    /// <summary>Field number for the "Duration" field.</summary>
    public const int DurationFieldNumber = 2;
    private int duration_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Duration {
      get { return duration_; }
      set {
        duration_ = value;
      }
    }

    /// <summary>Field number for the "RangeType" field.</summary>
    public const int RangeTypeFieldNumber = 3;
    private int rangeType_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int RangeType {
      get { return rangeType_; }
      set {
        rangeType_ = value;
      }
    }

    /// <summary>Field number for the "Radius" field.</summary>
    public const int RadiusFieldNumber = 4;
    private int radius_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Radius {
      get { return radius_; }
      set {
        radius_ = value;
      }
    }

    /// <summary>Field number for the "Angle" field.</summary>
    public const int AngleFieldNumber = 5;
    private int angle_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Angle {
      get { return angle_; }
      set {
        angle_ = value;
      }
    }

    /// <summary>Field number for the "Length" field.</summary>
    public const int LengthFieldNumber = 6;
    private int length_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Length {
      get { return length_; }
      set {
        length_ = value;
      }
    }

    /// <summary>Field number for the "Width" field.</summary>
    public const int WidthFieldNumber = 7;
    private int width_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Width {
      get { return width_; }
      set {
        width_ = value;
      }
    }

    /// <summary>Field number for the "Height" field.</summary>
    public const int HeightFieldNumber = 8;
    private int height_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Height {
      get { return height_; }
      set {
        height_ = value;
      }
    }

    /// <summary>Field number for the "CenterOffset" field.</summary>
    public const int CenterOffsetFieldNumber = 9;
    private int centerOffset_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CenterOffset {
      get { return centerOffset_; }
      set {
        centerOffset_ = value;
      }
    }

    /// <summary>Field number for the "IgnoreHitHistory" field.</summary>
    public const int IgnoreHitHistoryFieldNumber = 10;
    private int ignoreHitHistory_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int IgnoreHitHistory {
      get { return ignoreHitHistory_; }
      set {
        ignoreHitHistory_ = value;
      }
    }

    /// <summary>Field number for the "ThrownBehaviourOnCollision" field.</summary>
    public const int ThrownBehaviourOnCollisionFieldNumber = 11;
    private int thrownBehaviourOnCollision_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ThrownBehaviourOnCollision {
      get { return thrownBehaviourOnCollision_; }
      set {
        thrownBehaviourOnCollision_ = value;
      }
    }

    /// <summary>Field number for the "SpawnThrownTimelineID" field.</summary>
    public const int SpawnThrownTimelineIDFieldNumber = 12;
    private int spawnThrownTimelineID_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int SpawnThrownTimelineID {
      get { return spawnThrownTimelineID_; }
      set {
        spawnThrownTimelineID_ = value;
      }
    }

    /// <summary>Field number for the "ChangeTargetCountLimit" field.</summary>
    public const int ChangeTargetCountLimitFieldNumber = 13;
    private int changeTargetCountLimit_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ChangeTargetCountLimit {
      get { return changeTargetCountLimit_; }
      set {
        changeTargetCountLimit_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ThrownCollisionCheckInfo);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ThrownCollisionCheckInfo other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Start != other.Start) return false;
      if (Duration != other.Duration) return false;
      if (RangeType != other.RangeType) return false;
      if (Radius != other.Radius) return false;
      if (Angle != other.Angle) return false;
      if (Length != other.Length) return false;
      if (Width != other.Width) return false;
      if (Height != other.Height) return false;
      if (CenterOffset != other.CenterOffset) return false;
      if (IgnoreHitHistory != other.IgnoreHitHistory) return false;
      if (ThrownBehaviourOnCollision != other.ThrownBehaviourOnCollision) return false;
      if (SpawnThrownTimelineID != other.SpawnThrownTimelineID) return false;
      if (ChangeTargetCountLimit != other.ChangeTargetCountLimit) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Start != 0) hash ^= Start.GetHashCode();
      if (Duration != 0) hash ^= Duration.GetHashCode();
      if (RangeType != 0) hash ^= RangeType.GetHashCode();
      if (Radius != 0) hash ^= Radius.GetHashCode();
      if (Angle != 0) hash ^= Angle.GetHashCode();
      if (Length != 0) hash ^= Length.GetHashCode();
      if (Width != 0) hash ^= Width.GetHashCode();
      if (Height != 0) hash ^= Height.GetHashCode();
      if (CenterOffset != 0) hash ^= CenterOffset.GetHashCode();
      if (IgnoreHitHistory != 0) hash ^= IgnoreHitHistory.GetHashCode();
      if (ThrownBehaviourOnCollision != 0) hash ^= ThrownBehaviourOnCollision.GetHashCode();
      if (SpawnThrownTimelineID != 0) hash ^= SpawnThrownTimelineID.GetHashCode();
      if (ChangeTargetCountLimit != 0) hash ^= ChangeTargetCountLimit.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Start != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Start);
      }
      if (Duration != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Duration);
      }
      if (RangeType != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(RangeType);
      }
      if (Radius != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(Radius);
      }
      if (Angle != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(Angle);
      }
      if (Length != 0) {
        output.WriteRawTag(48);
        output.WriteInt32(Length);
      }
      if (Width != 0) {
        output.WriteRawTag(56);
        output.WriteInt32(Width);
      }
      if (Height != 0) {
        output.WriteRawTag(64);
        output.WriteInt32(Height);
      }
      if (CenterOffset != 0) {
        output.WriteRawTag(72);
        output.WriteInt32(CenterOffset);
      }
      if (IgnoreHitHistory != 0) {
        output.WriteRawTag(80);
        output.WriteInt32(IgnoreHitHistory);
      }
      if (ThrownBehaviourOnCollision != 0) {
        output.WriteRawTag(88);
        output.WriteInt32(ThrownBehaviourOnCollision);
      }
      if (SpawnThrownTimelineID != 0) {
        output.WriteRawTag(96);
        output.WriteInt32(SpawnThrownTimelineID);
      }
      if (ChangeTargetCountLimit != 0) {
        output.WriteRawTag(104);
        output.WriteInt32(ChangeTargetCountLimit);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Start != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Start);
      }
      if (Duration != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Duration);
      }
      if (RangeType != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(RangeType);
      }
      if (Radius != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Radius);
      }
      if (Angle != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Angle);
      }
      if (Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Length);
      }
      if (Width != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Width);
      }
      if (Height != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Height);
      }
      if (CenterOffset != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(CenterOffset);
      }
      if (IgnoreHitHistory != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(IgnoreHitHistory);
      }
      if (ThrownBehaviourOnCollision != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ThrownBehaviourOnCollision);
      }
      if (SpawnThrownTimelineID != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(SpawnThrownTimelineID);
      }
      if (ChangeTargetCountLimit != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ChangeTargetCountLimit);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ThrownCollisionCheckInfo other) {
      if (other == null) {
        return;
      }
      if (other.Start != 0) {
        Start = other.Start;
      }
      if (other.Duration != 0) {
        Duration = other.Duration;
      }
      if (other.RangeType != 0) {
        RangeType = other.RangeType;
      }
      if (other.Radius != 0) {
        Radius = other.Radius;
      }
      if (other.Angle != 0) {
        Angle = other.Angle;
      }
      if (other.Length != 0) {
        Length = other.Length;
      }
      if (other.Width != 0) {
        Width = other.Width;
      }
      if (other.Height != 0) {
        Height = other.Height;
      }
      if (other.CenterOffset != 0) {
        CenterOffset = other.CenterOffset;
      }
      if (other.IgnoreHitHistory != 0) {
        IgnoreHitHistory = other.IgnoreHitHistory;
      }
      if (other.ThrownBehaviourOnCollision != 0) {
        ThrownBehaviourOnCollision = other.ThrownBehaviourOnCollision;
      }
      if (other.SpawnThrownTimelineID != 0) {
        SpawnThrownTimelineID = other.SpawnThrownTimelineID;
      }
      if (other.ChangeTargetCountLimit != 0) {
        ChangeTargetCountLimit = other.ChangeTargetCountLimit;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Start = input.ReadInt32();
            break;
          }
          case 16: {
            Duration = input.ReadInt32();
            break;
          }
          case 24: {
            RangeType = input.ReadInt32();
            break;
          }
          case 32: {
            Radius = input.ReadInt32();
            break;
          }
          case 40: {
            Angle = input.ReadInt32();
            break;
          }
          case 48: {
            Length = input.ReadInt32();
            break;
          }
          case 56: {
            Width = input.ReadInt32();
            break;
          }
          case 64: {
            Height = input.ReadInt32();
            break;
          }
          case 72: {
            CenterOffset = input.ReadInt32();
            break;
          }
          case 80: {
            IgnoreHitHistory = input.ReadInt32();
            break;
          }
          case 88: {
            ThrownBehaviourOnCollision = input.ReadInt32();
            break;
          }
          case 96: {
            SpawnThrownTimelineID = input.ReadInt32();
            break;
          }
          case 104: {
            ChangeTargetCountLimit = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class HitAudio : pb::IMessage<HitAudio> {
    private static readonly pb::MessageParser<HitAudio> _parser = new pb::MessageParser<HitAudio>(() => new HitAudio());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<HitAudio> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Config.ConfigReflection.Descriptor.MessageTypes[18]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public HitAudio() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public HitAudio(HitAudio other) : this() {
      iD_ = other.iD_;
      weaponCategory_ = other.weaponCategory_;
      roleCategory_ = other.roleCategory_;
      audioClipPath_ = other.audioClipPath_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public HitAudio Clone() {
      return new HitAudio(this);
    }

    /// <summary>Field number for the "ID" field.</summary>
    public const int IDFieldNumber = 1;
    private int iD_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ID {
      get { return iD_; }
      set {
        iD_ = value;
      }
    }

    /// <summary>Field number for the "WeaponCategory" field.</summary>
    public const int WeaponCategoryFieldNumber = 2;
    private global::Config.WeaponCategory weaponCategory_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Config.WeaponCategory WeaponCategory {
      get { return weaponCategory_; }
      set {
        weaponCategory_ = value;
      }
    }

    /// <summary>Field number for the "RoleCategory" field.</summary>
    public const int RoleCategoryFieldNumber = 3;
    private global::Config.RoleCategory roleCategory_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Config.RoleCategory RoleCategory {
      get { return roleCategory_; }
      set {
        roleCategory_ = value;
      }
    }

    /// <summary>Field number for the "AudioClipPath" field.</summary>
    public const int AudioClipPathFieldNumber = 4;
    private string audioClipPath_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string AudioClipPath {
      get { return audioClipPath_; }
      set {
        audioClipPath_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as HitAudio);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(HitAudio other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (ID != other.ID) return false;
      if (WeaponCategory != other.WeaponCategory) return false;
      if (RoleCategory != other.RoleCategory) return false;
      if (AudioClipPath != other.AudioClipPath) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (ID != 0) hash ^= ID.GetHashCode();
      if (WeaponCategory != 0) hash ^= WeaponCategory.GetHashCode();
      if (RoleCategory != 0) hash ^= RoleCategory.GetHashCode();
      if (AudioClipPath.Length != 0) hash ^= AudioClipPath.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (ID != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(ID);
      }
      if (WeaponCategory != 0) {
        output.WriteRawTag(16);
        output.WriteEnum((int) WeaponCategory);
      }
      if (RoleCategory != 0) {
        output.WriteRawTag(24);
        output.WriteEnum((int) RoleCategory);
      }
      if (AudioClipPath.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(AudioClipPath);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ID != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ID);
      }
      if (WeaponCategory != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) WeaponCategory);
      }
      if (RoleCategory != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) RoleCategory);
      }
      if (AudioClipPath.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(AudioClipPath);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(HitAudio other) {
      if (other == null) {
        return;
      }
      if (other.ID != 0) {
        ID = other.ID;
      }
      if (other.WeaponCategory != 0) {
        WeaponCategory = other.WeaponCategory;
      }
      if (other.RoleCategory != 0) {
        RoleCategory = other.RoleCategory;
      }
      if (other.AudioClipPath.Length != 0) {
        AudioClipPath = other.AudioClipPath;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            ID = input.ReadInt32();
            break;
          }
          case 16: {
            weaponCategory_ = (global::Config.WeaponCategory) input.ReadEnum();
            break;
          }
          case 24: {
            roleCategory_ = (global::Config.RoleCategory) input.ReadEnum();
            break;
          }
          case 34: {
            AudioClipPath = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class MoveActionTimelineNode : pb::IMessage<MoveActionTimelineNode> {
    private static readonly pb::MessageParser<MoveActionTimelineNode> _parser = new pb::MessageParser<MoveActionTimelineNode>(() => new MoveActionTimelineNode());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<MoveActionTimelineNode> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Config.ConfigReflection.Descriptor.MessageTypes[19]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MoveActionTimelineNode() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MoveActionTimelineNode(MoveActionTimelineNode other) : this() {
      enable_ = other.enable_;
      start_ = other.start_;
      duration_ = other.duration_;
      animationMove_ = other.animationMove_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MoveActionTimelineNode Clone() {
      return new MoveActionTimelineNode(this);
    }

    /// <summary>Field number for the "Enable" field.</summary>
    public const int EnableFieldNumber = 1;
    private int enable_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Enable {
      get { return enable_; }
      set {
        enable_ = value;
      }
    }

    /// <summary>Field number for the "Start" field.</summary>
    public const int StartFieldNumber = 2;
    private int start_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Start {
      get { return start_; }
      set {
        start_ = value;
      }
    }

    /// <summary>Field number for the "Duration" field.</summary>
    public const int DurationFieldNumber = 3;
    private int duration_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Duration {
      get { return duration_; }
      set {
        duration_ = value;
      }
    }

    /// <summary>Field number for the "AnimationMove" field.</summary>
    public const int AnimationMoveFieldNumber = 4;
    private int animationMove_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int AnimationMove {
      get { return animationMove_; }
      set {
        animationMove_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as MoveActionTimelineNode);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(MoveActionTimelineNode other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Enable != other.Enable) return false;
      if (Start != other.Start) return false;
      if (Duration != other.Duration) return false;
      if (AnimationMove != other.AnimationMove) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Enable != 0) hash ^= Enable.GetHashCode();
      if (Start != 0) hash ^= Start.GetHashCode();
      if (Duration != 0) hash ^= Duration.GetHashCode();
      if (AnimationMove != 0) hash ^= AnimationMove.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Enable != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Enable);
      }
      if (Start != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Start);
      }
      if (Duration != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(Duration);
      }
      if (AnimationMove != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(AnimationMove);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Enable != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Enable);
      }
      if (Start != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Start);
      }
      if (Duration != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Duration);
      }
      if (AnimationMove != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(AnimationMove);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(MoveActionTimelineNode other) {
      if (other == null) {
        return;
      }
      if (other.Enable != 0) {
        Enable = other.Enable;
      }
      if (other.Start != 0) {
        Start = other.Start;
      }
      if (other.Duration != 0) {
        Duration = other.Duration;
      }
      if (other.AnimationMove != 0) {
        AnimationMove = other.AnimationMove;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Enable = input.ReadInt32();
            break;
          }
          case 16: {
            Start = input.ReadInt32();
            break;
          }
          case 24: {
            Duration = input.ReadInt32();
            break;
          }
          case 32: {
            AnimationMove = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class ThrownLockActionInfo : pb::IMessage<ThrownLockActionInfo> {
    private static readonly pb::MessageParser<ThrownLockActionInfo> _parser = new pb::MessageParser<ThrownLockActionInfo>(() => new ThrownLockActionInfo());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ThrownLockActionInfo> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Config.ConfigReflection.Descriptor.MessageTypes[20]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ThrownLockActionInfo() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ThrownLockActionInfo(ThrownLockActionInfo other) : this() {
      start_ = other.start_;
      duration_ = other.duration_;
      rangeType_ = other.rangeType_;
      radius_ = other.radius_;
      angle_ = other.angle_;
      length_ = other.length_;
      width_ = other.width_;
      height_ = other.height_;
      centerOffset_ = other.centerOffset_;
      thrownBehaviourOnCollision_ = other.thrownBehaviourOnCollision_;
      spawnThrownTimelineID_ = other.spawnThrownTimelineID_;
      changeTargetCountLimit_ = other.changeTargetCountLimit_;
      turnRate_ = other.turnRate_;
      lockEndOperation_ = other.lockEndOperation_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ThrownLockActionInfo Clone() {
      return new ThrownLockActionInfo(this);
    }

    /// <summary>Field number for the "Start" field.</summary>
    public const int StartFieldNumber = 1;
    private int start_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Start {
      get { return start_; }
      set {
        start_ = value;
      }
    }

    /// <summary>Field number for the "Duration" field.</summary>
    public const int DurationFieldNumber = 2;
    private int duration_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Duration {
      get { return duration_; }
      set {
        duration_ = value;
      }
    }

    /// <summary>Field number for the "RangeType" field.</summary>
    public const int RangeTypeFieldNumber = 3;
    private int rangeType_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int RangeType {
      get { return rangeType_; }
      set {
        rangeType_ = value;
      }
    }

    /// <summary>Field number for the "Radius" field.</summary>
    public const int RadiusFieldNumber = 4;
    private int radius_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Radius {
      get { return radius_; }
      set {
        radius_ = value;
      }
    }

    /// <summary>Field number for the "Angle" field.</summary>
    public const int AngleFieldNumber = 5;
    private int angle_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Angle {
      get { return angle_; }
      set {
        angle_ = value;
      }
    }

    /// <summary>Field number for the "Length" field.</summary>
    public const int LengthFieldNumber = 6;
    private int length_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Length {
      get { return length_; }
      set {
        length_ = value;
      }
    }

    /// <summary>Field number for the "Width" field.</summary>
    public const int WidthFieldNumber = 7;
    private int width_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Width {
      get { return width_; }
      set {
        width_ = value;
      }
    }

    /// <summary>Field number for the "Height" field.</summary>
    public const int HeightFieldNumber = 8;
    private int height_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Height {
      get { return height_; }
      set {
        height_ = value;
      }
    }

    /// <summary>Field number for the "CenterOffset" field.</summary>
    public const int CenterOffsetFieldNumber = 9;
    private int centerOffset_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CenterOffset {
      get { return centerOffset_; }
      set {
        centerOffset_ = value;
      }
    }

    /// <summary>Field number for the "ThrownBehaviourOnCollision" field.</summary>
    public const int ThrownBehaviourOnCollisionFieldNumber = 10;
    private int thrownBehaviourOnCollision_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ThrownBehaviourOnCollision {
      get { return thrownBehaviourOnCollision_; }
      set {
        thrownBehaviourOnCollision_ = value;
      }
    }

    /// <summary>Field number for the "SpawnThrownTimelineID" field.</summary>
    public const int SpawnThrownTimelineIDFieldNumber = 11;
    private int spawnThrownTimelineID_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int SpawnThrownTimelineID {
      get { return spawnThrownTimelineID_; }
      set {
        spawnThrownTimelineID_ = value;
      }
    }

    /// <summary>Field number for the "ChangeTargetCountLimit" field.</summary>
    public const int ChangeTargetCountLimitFieldNumber = 12;
    private int changeTargetCountLimit_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ChangeTargetCountLimit {
      get { return changeTargetCountLimit_; }
      set {
        changeTargetCountLimit_ = value;
      }
    }

    /// <summary>Field number for the "TurnRate" field.</summary>
    public const int TurnRateFieldNumber = 13;
    private int turnRate_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int TurnRate {
      get { return turnRate_; }
      set {
        turnRate_ = value;
      }
    }

    /// <summary>Field number for the "LockEndOperation" field.</summary>
    public const int LockEndOperationFieldNumber = 14;
    private int lockEndOperation_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int LockEndOperation {
      get { return lockEndOperation_; }
      set {
        lockEndOperation_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ThrownLockActionInfo);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ThrownLockActionInfo other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Start != other.Start) return false;
      if (Duration != other.Duration) return false;
      if (RangeType != other.RangeType) return false;
      if (Radius != other.Radius) return false;
      if (Angle != other.Angle) return false;
      if (Length != other.Length) return false;
      if (Width != other.Width) return false;
      if (Height != other.Height) return false;
      if (CenterOffset != other.CenterOffset) return false;
      if (ThrownBehaviourOnCollision != other.ThrownBehaviourOnCollision) return false;
      if (SpawnThrownTimelineID != other.SpawnThrownTimelineID) return false;
      if (ChangeTargetCountLimit != other.ChangeTargetCountLimit) return false;
      if (TurnRate != other.TurnRate) return false;
      if (LockEndOperation != other.LockEndOperation) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Start != 0) hash ^= Start.GetHashCode();
      if (Duration != 0) hash ^= Duration.GetHashCode();
      if (RangeType != 0) hash ^= RangeType.GetHashCode();
      if (Radius != 0) hash ^= Radius.GetHashCode();
      if (Angle != 0) hash ^= Angle.GetHashCode();
      if (Length != 0) hash ^= Length.GetHashCode();
      if (Width != 0) hash ^= Width.GetHashCode();
      if (Height != 0) hash ^= Height.GetHashCode();
      if (CenterOffset != 0) hash ^= CenterOffset.GetHashCode();
      if (ThrownBehaviourOnCollision != 0) hash ^= ThrownBehaviourOnCollision.GetHashCode();
      if (SpawnThrownTimelineID != 0) hash ^= SpawnThrownTimelineID.GetHashCode();
      if (ChangeTargetCountLimit != 0) hash ^= ChangeTargetCountLimit.GetHashCode();
      if (TurnRate != 0) hash ^= TurnRate.GetHashCode();
      if (LockEndOperation != 0) hash ^= LockEndOperation.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Start != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Start);
      }
      if (Duration != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Duration);
      }
      if (RangeType != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(RangeType);
      }
      if (Radius != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(Radius);
      }
      if (Angle != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(Angle);
      }
      if (Length != 0) {
        output.WriteRawTag(48);
        output.WriteInt32(Length);
      }
      if (Width != 0) {
        output.WriteRawTag(56);
        output.WriteInt32(Width);
      }
      if (Height != 0) {
        output.WriteRawTag(64);
        output.WriteInt32(Height);
      }
      if (CenterOffset != 0) {
        output.WriteRawTag(72);
        output.WriteInt32(CenterOffset);
      }
      if (ThrownBehaviourOnCollision != 0) {
        output.WriteRawTag(80);
        output.WriteInt32(ThrownBehaviourOnCollision);
      }
      if (SpawnThrownTimelineID != 0) {
        output.WriteRawTag(88);
        output.WriteInt32(SpawnThrownTimelineID);
      }
      if (ChangeTargetCountLimit != 0) {
        output.WriteRawTag(96);
        output.WriteInt32(ChangeTargetCountLimit);
      }
      if (TurnRate != 0) {
        output.WriteRawTag(104);
        output.WriteInt32(TurnRate);
      }
      if (LockEndOperation != 0) {
        output.WriteRawTag(112);
        output.WriteInt32(LockEndOperation);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Start != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Start);
      }
      if (Duration != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Duration);
      }
      if (RangeType != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(RangeType);
      }
      if (Radius != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Radius);
      }
      if (Angle != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Angle);
      }
      if (Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Length);
      }
      if (Width != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Width);
      }
      if (Height != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Height);
      }
      if (CenterOffset != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(CenterOffset);
      }
      if (ThrownBehaviourOnCollision != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ThrownBehaviourOnCollision);
      }
      if (SpawnThrownTimelineID != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(SpawnThrownTimelineID);
      }
      if (ChangeTargetCountLimit != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ChangeTargetCountLimit);
      }
      if (TurnRate != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(TurnRate);
      }
      if (LockEndOperation != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(LockEndOperation);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ThrownLockActionInfo other) {
      if (other == null) {
        return;
      }
      if (other.Start != 0) {
        Start = other.Start;
      }
      if (other.Duration != 0) {
        Duration = other.Duration;
      }
      if (other.RangeType != 0) {
        RangeType = other.RangeType;
      }
      if (other.Radius != 0) {
        Radius = other.Radius;
      }
      if (other.Angle != 0) {
        Angle = other.Angle;
      }
      if (other.Length != 0) {
        Length = other.Length;
      }
      if (other.Width != 0) {
        Width = other.Width;
      }
      if (other.Height != 0) {
        Height = other.Height;
      }
      if (other.CenterOffset != 0) {
        CenterOffset = other.CenterOffset;
      }
      if (other.ThrownBehaviourOnCollision != 0) {
        ThrownBehaviourOnCollision = other.ThrownBehaviourOnCollision;
      }
      if (other.SpawnThrownTimelineID != 0) {
        SpawnThrownTimelineID = other.SpawnThrownTimelineID;
      }
      if (other.ChangeTargetCountLimit != 0) {
        ChangeTargetCountLimit = other.ChangeTargetCountLimit;
      }
      if (other.TurnRate != 0) {
        TurnRate = other.TurnRate;
      }
      if (other.LockEndOperation != 0) {
        LockEndOperation = other.LockEndOperation;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Start = input.ReadInt32();
            break;
          }
          case 16: {
            Duration = input.ReadInt32();
            break;
          }
          case 24: {
            RangeType = input.ReadInt32();
            break;
          }
          case 32: {
            Radius = input.ReadInt32();
            break;
          }
          case 40: {
            Angle = input.ReadInt32();
            break;
          }
          case 48: {
            Length = input.ReadInt32();
            break;
          }
          case 56: {
            Width = input.ReadInt32();
            break;
          }
          case 64: {
            Height = input.ReadInt32();
            break;
          }
          case 72: {
            CenterOffset = input.ReadInt32();
            break;
          }
          case 80: {
            ThrownBehaviourOnCollision = input.ReadInt32();
            break;
          }
          case 88: {
            SpawnThrownTimelineID = input.ReadInt32();
            break;
          }
          case 96: {
            ChangeTargetCountLimit = input.ReadInt32();
            break;
          }
          case 104: {
            TurnRate = input.ReadInt32();
            break;
          }
          case 112: {
            LockEndOperation = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class Int3 : pb::IMessage<Int3> {
    private static readonly pb::MessageParser<Int3> _parser = new pb::MessageParser<Int3>(() => new Int3());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Int3> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Config.ConfigReflection.Descriptor.MessageTypes[21]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Int3() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Int3(Int3 other) : this() {
      x_ = other.x_;
      y_ = other.y_;
      z_ = other.z_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Int3 Clone() {
      return new Int3(this);
    }

    /// <summary>Field number for the "x" field.</summary>
    public const int XFieldNumber = 1;
    private int x_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int X {
      get { return x_; }
      set {
        x_ = value;
      }
    }

    /// <summary>Field number for the "y" field.</summary>
    public const int YFieldNumber = 2;
    private int y_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Y {
      get { return y_; }
      set {
        y_ = value;
      }
    }

    /// <summary>Field number for the "z" field.</summary>
    public const int ZFieldNumber = 3;
    private int z_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Z {
      get { return z_; }
      set {
        z_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Int3);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Int3 other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (X != other.X) return false;
      if (Y != other.Y) return false;
      if (Z != other.Z) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (X != 0) hash ^= X.GetHashCode();
      if (Y != 0) hash ^= Y.GetHashCode();
      if (Z != 0) hash ^= Z.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (X != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(X);
      }
      if (Y != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Y);
      }
      if (Z != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(Z);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (X != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(X);
      }
      if (Y != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Y);
      }
      if (Z != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Z);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Int3 other) {
      if (other == null) {
        return;
      }
      if (other.X != 0) {
        X = other.X;
      }
      if (other.Y != 0) {
        Y = other.Y;
      }
      if (other.Z != 0) {
        Z = other.Z;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            X = input.ReadInt32();
            break;
          }
          case 16: {
            Y = input.ReadInt32();
            break;
          }
          case 24: {
            Z = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class PostDespawnThrownEventInfo : pb::IMessage<PostDespawnThrownEventInfo> {
    private static readonly pb::MessageParser<PostDespawnThrownEventInfo> _parser = new pb::MessageParser<PostDespawnThrownEventInfo>(() => new PostDespawnThrownEventInfo());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<PostDespawnThrownEventInfo> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Config.ConfigReflection.Descriptor.MessageTypes[22]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PostDespawnThrownEventInfo() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PostDespawnThrownEventInfo(PostDespawnThrownEventInfo other) : this() {
      start_ = other.start_;
      iD_ = other.iD_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PostDespawnThrownEventInfo Clone() {
      return new PostDespawnThrownEventInfo(this);
    }

    /// <summary>Field number for the "Start" field.</summary>
    public const int StartFieldNumber = 1;
    private int start_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Start {
      get { return start_; }
      set {
        start_ = value;
      }
    }

    /// <summary>Field number for the "ID" field.</summary>
    public const int IDFieldNumber = 2;
    private int iD_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ID {
      get { return iD_; }
      set {
        iD_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as PostDespawnThrownEventInfo);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(PostDespawnThrownEventInfo other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Start != other.Start) return false;
      if (ID != other.ID) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Start != 0) hash ^= Start.GetHashCode();
      if (ID != 0) hash ^= ID.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Start != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Start);
      }
      if (ID != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(ID);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Start != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Start);
      }
      if (ID != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ID);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(PostDespawnThrownEventInfo other) {
      if (other == null) {
        return;
      }
      if (other.Start != 0) {
        Start = other.Start;
      }
      if (other.ID != 0) {
        ID = other.ID;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Start = input.ReadInt32();
            break;
          }
          case 16: {
            ID = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class CDCompensationInfo : pb::IMessage<CDCompensationInfo> {
    private static readonly pb::MessageParser<CDCompensationInfo> _parser = new pb::MessageParser<CDCompensationInfo>(() => new CDCompensationInfo());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CDCompensationInfo> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Config.ConfigReflection.Descriptor.MessageTypes[23]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CDCompensationInfo() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CDCompensationInfo(CDCompensationInfo other) : this() {
      start_ = other.start_;
      duration_ = other.duration_;
      cDCompensation_ = other.cDCompensation_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CDCompensationInfo Clone() {
      return new CDCompensationInfo(this);
    }

    /// <summary>Field number for the "Start" field.</summary>
    public const int StartFieldNumber = 1;
    private int start_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Start {
      get { return start_; }
      set {
        start_ = value;
      }
    }

    /// <summary>Field number for the "Duration" field.</summary>
    public const int DurationFieldNumber = 2;
    private int duration_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Duration {
      get { return duration_; }
      set {
        duration_ = value;
      }
    }

    /// <summary>Field number for the "CDCompensation" field.</summary>
    public const int CDCompensationFieldNumber = 3;
    private int cDCompensation_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CDCompensation {
      get { return cDCompensation_; }
      set {
        cDCompensation_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CDCompensationInfo);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CDCompensationInfo other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Start != other.Start) return false;
      if (Duration != other.Duration) return false;
      if (CDCompensation != other.CDCompensation) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Start != 0) hash ^= Start.GetHashCode();
      if (Duration != 0) hash ^= Duration.GetHashCode();
      if (CDCompensation != 0) hash ^= CDCompensation.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Start != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Start);
      }
      if (Duration != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Duration);
      }
      if (CDCompensation != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(CDCompensation);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Start != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Start);
      }
      if (Duration != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Duration);
      }
      if (CDCompensation != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(CDCompensation);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CDCompensationInfo other) {
      if (other == null) {
        return;
      }
      if (other.Start != 0) {
        Start = other.Start;
      }
      if (other.Duration != 0) {
        Duration = other.Duration;
      }
      if (other.CDCompensation != 0) {
        CDCompensation = other.CDCompensation;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Start = input.ReadInt32();
            break;
          }
          case 16: {
            Duration = input.ReadInt32();
            break;
          }
          case 24: {
            CDCompensation = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class Hero_Attrib : pb::IMessage<Hero_Attrib> {
    private static readonly pb::MessageParser<Hero_Attrib> _parser = new pb::MessageParser<Hero_Attrib>(() => new Hero_Attrib());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Hero_Attrib> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Config.ConfigReflection.Descriptor.MessageTypes[24]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Hero_Attrib() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Hero_Attrib(Hero_Attrib other) : this() {
      iD_ = other.iD_;
      varname_ = other.varname_;
      name_ = other.name_;
      remark_ = other.remark_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Hero_Attrib Clone() {
      return new Hero_Attrib(this);
    }

    /// <summary>Field number for the "ID" field.</summary>
    public const int IDFieldNumber = 1;
    private int iD_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ID {
      get { return iD_; }
      set {
        iD_ = value;
      }
    }

    /// <summary>Field number for the "varname" field.</summary>
    public const int VarnameFieldNumber = 2;
    private string varname_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Varname {
      get { return varname_; }
      set {
        varname_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "Name" field.</summary>
    public const int NameFieldNumber = 3;
    private string name_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Name {
      get { return name_; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "remark" field.</summary>
    public const int RemarkFieldNumber = 4;
    private string remark_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Remark {
      get { return remark_; }
      set {
        remark_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Hero_Attrib);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Hero_Attrib other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (ID != other.ID) return false;
      if (Varname != other.Varname) return false;
      if (Name != other.Name) return false;
      if (Remark != other.Remark) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (ID != 0) hash ^= ID.GetHashCode();
      if (Varname.Length != 0) hash ^= Varname.GetHashCode();
      if (Name.Length != 0) hash ^= Name.GetHashCode();
      if (Remark.Length != 0) hash ^= Remark.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (ID != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(ID);
      }
      if (Varname.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Varname);
      }
      if (Name.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(Name);
      }
      if (Remark.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(Remark);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ID != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ID);
      }
      if (Varname.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Varname);
      }
      if (Name.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
      }
      if (Remark.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Remark);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Hero_Attrib other) {
      if (other == null) {
        return;
      }
      if (other.ID != 0) {
        ID = other.ID;
      }
      if (other.Varname.Length != 0) {
        Varname = other.Varname;
      }
      if (other.Name.Length != 0) {
        Name = other.Name;
      }
      if (other.Remark.Length != 0) {
        Remark = other.Remark;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            ID = input.ReadInt32();
            break;
          }
          case 18: {
            Varname = input.ReadString();
            break;
          }
          case 26: {
            Name = input.ReadString();
            break;
          }
          case 34: {
            Remark = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class InputActionTimelineNode : pb::IMessage<InputActionTimelineNode> {
    private static readonly pb::MessageParser<InputActionTimelineNode> _parser = new pb::MessageParser<InputActionTimelineNode>(() => new InputActionTimelineNode());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<InputActionTimelineNode> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Config.ConfigReflection.Descriptor.MessageTypes[25]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public InputActionTimelineNode() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public InputActionTimelineNode(InputActionTimelineNode other) : this() {
      enable_ = other.enable_;
      start_ = other.start_;
      duration_ = other.duration_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public InputActionTimelineNode Clone() {
      return new InputActionTimelineNode(this);
    }

    /// <summary>Field number for the "Enable" field.</summary>
    public const int EnableFieldNumber = 1;
    private int enable_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Enable {
      get { return enable_; }
      set {
        enable_ = value;
      }
    }

    /// <summary>Field number for the "Start" field.</summary>
    public const int StartFieldNumber = 2;
    private int start_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Start {
      get { return start_; }
      set {
        start_ = value;
      }
    }

    /// <summary>Field number for the "Duration" field.</summary>
    public const int DurationFieldNumber = 3;
    private int duration_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Duration {
      get { return duration_; }
      set {
        duration_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as InputActionTimelineNode);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(InputActionTimelineNode other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Enable != other.Enable) return false;
      if (Start != other.Start) return false;
      if (Duration != other.Duration) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Enable != 0) hash ^= Enable.GetHashCode();
      if (Start != 0) hash ^= Start.GetHashCode();
      if (Duration != 0) hash ^= Duration.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Enable != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Enable);
      }
      if (Start != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Start);
      }
      if (Duration != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(Duration);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Enable != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Enable);
      }
      if (Start != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Start);
      }
      if (Duration != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Duration);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(InputActionTimelineNode other) {
      if (other == null) {
        return;
      }
      if (other.Enable != 0) {
        Enable = other.Enable;
      }
      if (other.Start != 0) {
        Start = other.Start;
      }
      if (other.Duration != 0) {
        Duration = other.Duration;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Enable = input.ReadInt32();
            break;
          }
          case 16: {
            Start = input.ReadInt32();
            break;
          }
          case 24: {
            Duration = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class PostSpwanThrownEventInfo : pb::IMessage<PostSpwanThrownEventInfo> {
    private static readonly pb::MessageParser<PostSpwanThrownEventInfo> _parser = new pb::MessageParser<PostSpwanThrownEventInfo>(() => new PostSpwanThrownEventInfo());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<PostSpwanThrownEventInfo> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Config.ConfigReflection.Descriptor.MessageTypes[26]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PostSpwanThrownEventInfo() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PostSpwanThrownEventInfo(PostSpwanThrownEventInfo other) : this() {
      start_ = other.start_;
      iD_ = other.iD_;
      targetCampType_ = other.targetCampType_;
      centerOffset_ = other.centerOffset_;
      spawnForward_ = other.spawnForward_;
      rangeType_ = other.rangeType_;
      radius_ = other.radius_;
      angle_ = other.angle_;
      length_ = other.length_;
      width_ = other.width_;
      height_ = other.height_;
      targetSelectType_ = other.targetSelectType_;
      useCommon_ = other.useCommon_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PostSpwanThrownEventInfo Clone() {
      return new PostSpwanThrownEventInfo(this);
    }

    /// <summary>Field number for the "Start" field.</summary>
    public const int StartFieldNumber = 1;
    private int start_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Start {
      get { return start_; }
      set {
        start_ = value;
      }
    }

    /// <summary>Field number for the "ID" field.</summary>
    public const int IDFieldNumber = 2;
    private int iD_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ID {
      get { return iD_; }
      set {
        iD_ = value;
      }
    }

    /// <summary>Field number for the "TargetCampType" field.</summary>
    public const int TargetCampTypeFieldNumber = 3;
    private int targetCampType_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int TargetCampType {
      get { return targetCampType_; }
      set {
        targetCampType_ = value;
      }
    }

    /// <summary>Field number for the "CenterOffset" field.</summary>
    public const int CenterOffsetFieldNumber = 4;
    private int centerOffset_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CenterOffset {
      get { return centerOffset_; }
      set {
        centerOffset_ = value;
      }
    }

    /// <summary>Field number for the "SpawnForward" field.</summary>
    public const int SpawnForwardFieldNumber = 5;
    private int spawnForward_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int SpawnForward {
      get { return spawnForward_; }
      set {
        spawnForward_ = value;
      }
    }

    /// <summary>Field number for the "RangeType" field.</summary>
    public const int RangeTypeFieldNumber = 6;
    private int rangeType_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int RangeType {
      get { return rangeType_; }
      set {
        rangeType_ = value;
      }
    }

    /// <summary>Field number for the "Radius" field.</summary>
    public const int RadiusFieldNumber = 7;
    private int radius_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Radius {
      get { return radius_; }
      set {
        radius_ = value;
      }
    }

    /// <summary>Field number for the "Angle" field.</summary>
    public const int AngleFieldNumber = 8;
    private int angle_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Angle {
      get { return angle_; }
      set {
        angle_ = value;
      }
    }

    /// <summary>Field number for the "Length" field.</summary>
    public const int LengthFieldNumber = 9;
    private int length_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Length {
      get { return length_; }
      set {
        length_ = value;
      }
    }

    /// <summary>Field number for the "Width" field.</summary>
    public const int WidthFieldNumber = 10;
    private int width_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Width {
      get { return width_; }
      set {
        width_ = value;
      }
    }

    /// <summary>Field number for the "Height" field.</summary>
    public const int HeightFieldNumber = 11;
    private int height_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Height {
      get { return height_; }
      set {
        height_ = value;
      }
    }

    /// <summary>Field number for the "TargetSelectType" field.</summary>
    public const int TargetSelectTypeFieldNumber = 12;
    private int targetSelectType_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int TargetSelectType {
      get { return targetSelectType_; }
      set {
        targetSelectType_ = value;
      }
    }

    /// <summary>Field number for the "UseCommon" field.</summary>
    public const int UseCommonFieldNumber = 13;
    private int useCommon_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int UseCommon {
      get { return useCommon_; }
      set {
        useCommon_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as PostSpwanThrownEventInfo);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(PostSpwanThrownEventInfo other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Start != other.Start) return false;
      if (ID != other.ID) return false;
      if (TargetCampType != other.TargetCampType) return false;
      if (CenterOffset != other.CenterOffset) return false;
      if (SpawnForward != other.SpawnForward) return false;
      if (RangeType != other.RangeType) return false;
      if (Radius != other.Radius) return false;
      if (Angle != other.Angle) return false;
      if (Length != other.Length) return false;
      if (Width != other.Width) return false;
      if (Height != other.Height) return false;
      if (TargetSelectType != other.TargetSelectType) return false;
      if (UseCommon != other.UseCommon) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Start != 0) hash ^= Start.GetHashCode();
      if (ID != 0) hash ^= ID.GetHashCode();
      if (TargetCampType != 0) hash ^= TargetCampType.GetHashCode();
      if (CenterOffset != 0) hash ^= CenterOffset.GetHashCode();
      if (SpawnForward != 0) hash ^= SpawnForward.GetHashCode();
      if (RangeType != 0) hash ^= RangeType.GetHashCode();
      if (Radius != 0) hash ^= Radius.GetHashCode();
      if (Angle != 0) hash ^= Angle.GetHashCode();
      if (Length != 0) hash ^= Length.GetHashCode();
      if (Width != 0) hash ^= Width.GetHashCode();
      if (Height != 0) hash ^= Height.GetHashCode();
      if (TargetSelectType != 0) hash ^= TargetSelectType.GetHashCode();
      if (UseCommon != 0) hash ^= UseCommon.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Start != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Start);
      }
      if (ID != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(ID);
      }
      if (TargetCampType != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(TargetCampType);
      }
      if (CenterOffset != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(CenterOffset);
      }
      if (SpawnForward != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(SpawnForward);
      }
      if (RangeType != 0) {
        output.WriteRawTag(48);
        output.WriteInt32(RangeType);
      }
      if (Radius != 0) {
        output.WriteRawTag(56);
        output.WriteInt32(Radius);
      }
      if (Angle != 0) {
        output.WriteRawTag(64);
        output.WriteInt32(Angle);
      }
      if (Length != 0) {
        output.WriteRawTag(72);
        output.WriteInt32(Length);
      }
      if (Width != 0) {
        output.WriteRawTag(80);
        output.WriteInt32(Width);
      }
      if (Height != 0) {
        output.WriteRawTag(88);
        output.WriteInt32(Height);
      }
      if (TargetSelectType != 0) {
        output.WriteRawTag(96);
        output.WriteInt32(TargetSelectType);
      }
      if (UseCommon != 0) {
        output.WriteRawTag(104);
        output.WriteInt32(UseCommon);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Start != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Start);
      }
      if (ID != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ID);
      }
      if (TargetCampType != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(TargetCampType);
      }
      if (CenterOffset != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(CenterOffset);
      }
      if (SpawnForward != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(SpawnForward);
      }
      if (RangeType != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(RangeType);
      }
      if (Radius != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Radius);
      }
      if (Angle != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Angle);
      }
      if (Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Length);
      }
      if (Width != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Width);
      }
      if (Height != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Height);
      }
      if (TargetSelectType != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(TargetSelectType);
      }
      if (UseCommon != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(UseCommon);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(PostSpwanThrownEventInfo other) {
      if (other == null) {
        return;
      }
      if (other.Start != 0) {
        Start = other.Start;
      }
      if (other.ID != 0) {
        ID = other.ID;
      }
      if (other.TargetCampType != 0) {
        TargetCampType = other.TargetCampType;
      }
      if (other.CenterOffset != 0) {
        CenterOffset = other.CenterOffset;
      }
      if (other.SpawnForward != 0) {
        SpawnForward = other.SpawnForward;
      }
      if (other.RangeType != 0) {
        RangeType = other.RangeType;
      }
      if (other.Radius != 0) {
        Radius = other.Radius;
      }
      if (other.Angle != 0) {
        Angle = other.Angle;
      }
      if (other.Length != 0) {
        Length = other.Length;
      }
      if (other.Width != 0) {
        Width = other.Width;
      }
      if (other.Height != 0) {
        Height = other.Height;
      }
      if (other.TargetSelectType != 0) {
        TargetSelectType = other.TargetSelectType;
      }
      if (other.UseCommon != 0) {
        UseCommon = other.UseCommon;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Start = input.ReadInt32();
            break;
          }
          case 16: {
            ID = input.ReadInt32();
            break;
          }
          case 24: {
            TargetCampType = input.ReadInt32();
            break;
          }
          case 32: {
            CenterOffset = input.ReadInt32();
            break;
          }
          case 40: {
            SpawnForward = input.ReadInt32();
            break;
          }
          case 48: {
            RangeType = input.ReadInt32();
            break;
          }
          case 56: {
            Radius = input.ReadInt32();
            break;
          }
          case 64: {
            Angle = input.ReadInt32();
            break;
          }
          case 72: {
            Length = input.ReadInt32();
            break;
          }
          case 80: {
            Width = input.ReadInt32();
            break;
          }
          case 88: {
            Height = input.ReadInt32();
            break;
          }
          case 96: {
            TargetSelectType = input.ReadInt32();
            break;
          }
          case 104: {
            UseCommon = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class EntityVarName : pb::IMessage<EntityVarName> {
    private static readonly pb::MessageParser<EntityVarName> _parser = new pb::MessageParser<EntityVarName>(() => new EntityVarName());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<EntityVarName> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Config.ConfigReflection.Descriptor.MessageTypes[27]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EntityVarName() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EntityVarName(EntityVarName other) : this() {
      iD_ = other.iD_;
      name_ = other.name_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EntityVarName Clone() {
      return new EntityVarName(this);
    }

    /// <summary>Field number for the "ID" field.</summary>
    public const int IDFieldNumber = 1;
    private int iD_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ID {
      get { return iD_; }
      set {
        iD_ = value;
      }
    }

    /// <summary>Field number for the "Name" field.</summary>
    public const int NameFieldNumber = 2;
    private string name_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Name {
      get { return name_; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as EntityVarName);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(EntityVarName other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (ID != other.ID) return false;
      if (Name != other.Name) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (ID != 0) hash ^= ID.GetHashCode();
      if (Name.Length != 0) hash ^= Name.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (ID != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(ID);
      }
      if (Name.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Name);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ID != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ID);
      }
      if (Name.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(EntityVarName other) {
      if (other == null) {
        return;
      }
      if (other.ID != 0) {
        ID = other.ID;
      }
      if (other.Name.Length != 0) {
        Name = other.Name;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            ID = input.ReadInt32();
            break;
          }
          case 18: {
            Name = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class BuffConfig : pb::IMessage<BuffConfig> {
    private static readonly pb::MessageParser<BuffConfig> _parser = new pb::MessageParser<BuffConfig>(() => new BuffConfig());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<BuffConfig> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Config.ConfigReflection.Descriptor.MessageTypes[28]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BuffConfig() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BuffConfig(BuffConfig other) : this() {
      iD_ = other.iD_;
      type_ = other.type_;
      name_ = other.name_;
      status_ = other.status_;
      target_ = other.target_;
      count_ = other.count_;
      during_ = other.during_;
      tick_ = other.tick_;
      compulsoryLift_ = other.compulsoryLift_;
      triggerRangeType_ = other.triggerRangeType_;
      range_ = other.range_;
      damageEffectType_ = other.damageEffectType_;
      damageEffectValue_ = other.damageEffectValue_;
      addtiveEffectType_ = other.addtiveEffectType_;
      addtiveEffectFactor_ = other.addtiveEffectFactor_;
      limitAbility_ = other.limitAbility_;
      shieldValue_ = other.shieldValue_;
      leechLifeType_ = other.leechLifeType_;
      leechLifeParam_ = other.leechLifeParam_;
      transformID_ = other.transformID_;
      transformAttackArr_ = other.transformAttackArr_.Clone();
      transformSkillArr_ = other.transformSkillArr_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BuffConfig Clone() {
      return new BuffConfig(this);
    }

    /// <summary>Field number for the "ID" field.</summary>
    public const int IDFieldNumber = 1;
    private int iD_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ID {
      get { return iD_; }
      set {
        iD_ = value;
      }
    }

    /// <summary>Field number for the "Type" field.</summary>
    public const int TypeFieldNumber = 2;
    private int type_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Type {
      get { return type_; }
      set {
        type_ = value;
      }
    }

    /// <summary>Field number for the "Name" field.</summary>
    public const int NameFieldNumber = 3;
    private string name_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Name {
      get { return name_; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "Status" field.</summary>
    public const int StatusFieldNumber = 4;
    private int status_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Status {
      get { return status_; }
      set {
        status_ = value;
      }
    }

    /// <summary>Field number for the "Target" field.</summary>
    public const int TargetFieldNumber = 5;
    private int target_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Target {
      get { return target_; }
      set {
        target_ = value;
      }
    }

    /// <summary>Field number for the "Count" field.</summary>
    public const int CountFieldNumber = 6;
    private int count_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Count {
      get { return count_; }
      set {
        count_ = value;
      }
    }

    /// <summary>Field number for the "During" field.</summary>
    public const int DuringFieldNumber = 7;
    private int during_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int During {
      get { return during_; }
      set {
        during_ = value;
      }
    }

    /// <summary>Field number for the "Tick" field.</summary>
    public const int TickFieldNumber = 8;
    private int tick_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Tick {
      get { return tick_; }
      set {
        tick_ = value;
      }
    }

    /// <summary>Field number for the "CompulsoryLift" field.</summary>
    public const int CompulsoryLiftFieldNumber = 9;
    private int compulsoryLift_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CompulsoryLift {
      get { return compulsoryLift_; }
      set {
        compulsoryLift_ = value;
      }
    }

    /// <summary>Field number for the "TriggerRangeType" field.</summary>
    public const int TriggerRangeTypeFieldNumber = 10;
    private int triggerRangeType_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int TriggerRangeType {
      get { return triggerRangeType_; }
      set {
        triggerRangeType_ = value;
      }
    }

    /// <summary>Field number for the "Range" field.</summary>
    public const int RangeFieldNumber = 11;
    private int range_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Range {
      get { return range_; }
      set {
        range_ = value;
      }
    }

    /// <summary>Field number for the "DamageEffectType" field.</summary>
    public const int DamageEffectTypeFieldNumber = 12;
    private int damageEffectType_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int DamageEffectType {
      get { return damageEffectType_; }
      set {
        damageEffectType_ = value;
      }
    }

    /// <summary>Field number for the "DamageEffectValue" field.</summary>
    public const int DamageEffectValueFieldNumber = 13;
    private int damageEffectValue_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int DamageEffectValue {
      get { return damageEffectValue_; }
      set {
        damageEffectValue_ = value;
      }
    }

    /// <summary>Field number for the "AddtiveEffectType" field.</summary>
    public const int AddtiveEffectTypeFieldNumber = 14;
    private int addtiveEffectType_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int AddtiveEffectType {
      get { return addtiveEffectType_; }
      set {
        addtiveEffectType_ = value;
      }
    }

    /// <summary>Field number for the "AddtiveEffectFactor" field.</summary>
    public const int AddtiveEffectFactorFieldNumber = 15;
    private int addtiveEffectFactor_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int AddtiveEffectFactor {
      get { return addtiveEffectFactor_; }
      set {
        addtiveEffectFactor_ = value;
      }
    }

    /// <summary>Field number for the "LimitAbility" field.</summary>
    public const int LimitAbilityFieldNumber = 16;
    private int limitAbility_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int LimitAbility {
      get { return limitAbility_; }
      set {
        limitAbility_ = value;
      }
    }

    /// <summary>Field number for the "ShieldValue" field.</summary>
    public const int ShieldValueFieldNumber = 17;
    private int shieldValue_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ShieldValue {
      get { return shieldValue_; }
      set {
        shieldValue_ = value;
      }
    }

    /// <summary>Field number for the "LeechLifeType" field.</summary>
    public const int LeechLifeTypeFieldNumber = 18;
    private int leechLifeType_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int LeechLifeType {
      get { return leechLifeType_; }
      set {
        leechLifeType_ = value;
      }
    }

    /// <summary>Field number for the "LeechLifeParam" field.</summary>
    public const int LeechLifeParamFieldNumber = 19;
    private int leechLifeParam_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int LeechLifeParam {
      get { return leechLifeParam_; }
      set {
        leechLifeParam_ = value;
      }
    }

    /// <summary>Field number for the "TransformID" field.</summary>
    public const int TransformIDFieldNumber = 20;
    private int transformID_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int TransformID {
      get { return transformID_; }
      set {
        transformID_ = value;
      }
    }

    /// <summary>Field number for the "TransformAttackArr" field.</summary>
    public const int TransformAttackArrFieldNumber = 21;
    private static readonly pb::FieldCodec<int> _repeated_transformAttackArr_codec
        = pb::FieldCodec.ForInt32(170);
    private readonly pbc::RepeatedField<int> transformAttackArr_ = new pbc::RepeatedField<int>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<int> TransformAttackArr {
      get { return transformAttackArr_; }
    }

    /// <summary>Field number for the "TransformSkillArr" field.</summary>
    public const int TransformSkillArrFieldNumber = 22;
    private static readonly pb::FieldCodec<int> _repeated_transformSkillArr_codec
        = pb::FieldCodec.ForInt32(178);
    private readonly pbc::RepeatedField<int> transformSkillArr_ = new pbc::RepeatedField<int>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<int> TransformSkillArr {
      get { return transformSkillArr_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as BuffConfig);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(BuffConfig other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (ID != other.ID) return false;
      if (Type != other.Type) return false;
      if (Name != other.Name) return false;
      if (Status != other.Status) return false;
      if (Target != other.Target) return false;
      if (Count != other.Count) return false;
      if (During != other.During) return false;
      if (Tick != other.Tick) return false;
      if (CompulsoryLift != other.CompulsoryLift) return false;
      if (TriggerRangeType != other.TriggerRangeType) return false;
      if (Range != other.Range) return false;
      if (DamageEffectType != other.DamageEffectType) return false;
      if (DamageEffectValue != other.DamageEffectValue) return false;
      if (AddtiveEffectType != other.AddtiveEffectType) return false;
      if (AddtiveEffectFactor != other.AddtiveEffectFactor) return false;
      if (LimitAbility != other.LimitAbility) return false;
      if (ShieldValue != other.ShieldValue) return false;
      if (LeechLifeType != other.LeechLifeType) return false;
      if (LeechLifeParam != other.LeechLifeParam) return false;
      if (TransformID != other.TransformID) return false;
      if(!transformAttackArr_.Equals(other.transformAttackArr_)) return false;
      if(!transformSkillArr_.Equals(other.transformSkillArr_)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (ID != 0) hash ^= ID.GetHashCode();
      if (Type != 0) hash ^= Type.GetHashCode();
      if (Name.Length != 0) hash ^= Name.GetHashCode();
      if (Status != 0) hash ^= Status.GetHashCode();
      if (Target != 0) hash ^= Target.GetHashCode();
      if (Count != 0) hash ^= Count.GetHashCode();
      if (During != 0) hash ^= During.GetHashCode();
      if (Tick != 0) hash ^= Tick.GetHashCode();
      if (CompulsoryLift != 0) hash ^= CompulsoryLift.GetHashCode();
      if (TriggerRangeType != 0) hash ^= TriggerRangeType.GetHashCode();
      if (Range != 0) hash ^= Range.GetHashCode();
      if (DamageEffectType != 0) hash ^= DamageEffectType.GetHashCode();
      if (DamageEffectValue != 0) hash ^= DamageEffectValue.GetHashCode();
      if (AddtiveEffectType != 0) hash ^= AddtiveEffectType.GetHashCode();
      if (AddtiveEffectFactor != 0) hash ^= AddtiveEffectFactor.GetHashCode();
      if (LimitAbility != 0) hash ^= LimitAbility.GetHashCode();
      if (ShieldValue != 0) hash ^= ShieldValue.GetHashCode();
      if (LeechLifeType != 0) hash ^= LeechLifeType.GetHashCode();
      if (LeechLifeParam != 0) hash ^= LeechLifeParam.GetHashCode();
      if (TransformID != 0) hash ^= TransformID.GetHashCode();
      hash ^= transformAttackArr_.GetHashCode();
      hash ^= transformSkillArr_.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (ID != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(ID);
      }
      if (Type != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Type);
      }
      if (Name.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(Name);
      }
      if (Status != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(Status);
      }
      if (Target != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(Target);
      }
      if (Count != 0) {
        output.WriteRawTag(48);
        output.WriteInt32(Count);
      }
      if (During != 0) {
        output.WriteRawTag(56);
        output.WriteInt32(During);
      }
      if (Tick != 0) {
        output.WriteRawTag(64);
        output.WriteInt32(Tick);
      }
      if (CompulsoryLift != 0) {
        output.WriteRawTag(72);
        output.WriteInt32(CompulsoryLift);
      }
      if (TriggerRangeType != 0) {
        output.WriteRawTag(80);
        output.WriteInt32(TriggerRangeType);
      }
      if (Range != 0) {
        output.WriteRawTag(88);
        output.WriteInt32(Range);
      }
      if (DamageEffectType != 0) {
        output.WriteRawTag(96);
        output.WriteInt32(DamageEffectType);
      }
      if (DamageEffectValue != 0) {
        output.WriteRawTag(104);
        output.WriteInt32(DamageEffectValue);
      }
      if (AddtiveEffectType != 0) {
        output.WriteRawTag(112);
        output.WriteInt32(AddtiveEffectType);
      }
      if (AddtiveEffectFactor != 0) {
        output.WriteRawTag(120);
        output.WriteInt32(AddtiveEffectFactor);
      }
      if (LimitAbility != 0) {
        output.WriteRawTag(128, 1);
        output.WriteInt32(LimitAbility);
      }
      if (ShieldValue != 0) {
        output.WriteRawTag(136, 1);
        output.WriteInt32(ShieldValue);
      }
      if (LeechLifeType != 0) {
        output.WriteRawTag(144, 1);
        output.WriteInt32(LeechLifeType);
      }
      if (LeechLifeParam != 0) {
        output.WriteRawTag(152, 1);
        output.WriteInt32(LeechLifeParam);
      }
      if (TransformID != 0) {
        output.WriteRawTag(160, 1);
        output.WriteInt32(TransformID);
      }
      transformAttackArr_.WriteTo(output, _repeated_transformAttackArr_codec);
      transformSkillArr_.WriteTo(output, _repeated_transformSkillArr_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ID != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ID);
      }
      if (Type != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Type);
      }
      if (Name.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
      }
      if (Status != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Status);
      }
      if (Target != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Target);
      }
      if (Count != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Count);
      }
      if (During != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(During);
      }
      if (Tick != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Tick);
      }
      if (CompulsoryLift != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(CompulsoryLift);
      }
      if (TriggerRangeType != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(TriggerRangeType);
      }
      if (Range != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Range);
      }
      if (DamageEffectType != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(DamageEffectType);
      }
      if (DamageEffectValue != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(DamageEffectValue);
      }
      if (AddtiveEffectType != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(AddtiveEffectType);
      }
      if (AddtiveEffectFactor != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(AddtiveEffectFactor);
      }
      if (LimitAbility != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(LimitAbility);
      }
      if (ShieldValue != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(ShieldValue);
      }
      if (LeechLifeType != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(LeechLifeType);
      }
      if (LeechLifeParam != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(LeechLifeParam);
      }
      if (TransformID != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(TransformID);
      }
      size += transformAttackArr_.CalculateSize(_repeated_transformAttackArr_codec);
      size += transformSkillArr_.CalculateSize(_repeated_transformSkillArr_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(BuffConfig other) {
      if (other == null) {
        return;
      }
      if (other.ID != 0) {
        ID = other.ID;
      }
      if (other.Type != 0) {
        Type = other.Type;
      }
      if (other.Name.Length != 0) {
        Name = other.Name;
      }
      if (other.Status != 0) {
        Status = other.Status;
      }
      if (other.Target != 0) {
        Target = other.Target;
      }
      if (other.Count != 0) {
        Count = other.Count;
      }
      if (other.During != 0) {
        During = other.During;
      }
      if (other.Tick != 0) {
        Tick = other.Tick;
      }
      if (other.CompulsoryLift != 0) {
        CompulsoryLift = other.CompulsoryLift;
      }
      if (other.TriggerRangeType != 0) {
        TriggerRangeType = other.TriggerRangeType;
      }
      if (other.Range != 0) {
        Range = other.Range;
      }
      if (other.DamageEffectType != 0) {
        DamageEffectType = other.DamageEffectType;
      }
      if (other.DamageEffectValue != 0) {
        DamageEffectValue = other.DamageEffectValue;
      }
      if (other.AddtiveEffectType != 0) {
        AddtiveEffectType = other.AddtiveEffectType;
      }
      if (other.AddtiveEffectFactor != 0) {
        AddtiveEffectFactor = other.AddtiveEffectFactor;
      }
      if (other.LimitAbility != 0) {
        LimitAbility = other.LimitAbility;
      }
      if (other.ShieldValue != 0) {
        ShieldValue = other.ShieldValue;
      }
      if (other.LeechLifeType != 0) {
        LeechLifeType = other.LeechLifeType;
      }
      if (other.LeechLifeParam != 0) {
        LeechLifeParam = other.LeechLifeParam;
      }
      if (other.TransformID != 0) {
        TransformID = other.TransformID;
      }
      transformAttackArr_.Add(other.transformAttackArr_);
      transformSkillArr_.Add(other.transformSkillArr_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            ID = input.ReadInt32();
            break;
          }
          case 16: {
            Type = input.ReadInt32();
            break;
          }
          case 26: {
            Name = input.ReadString();
            break;
          }
          case 32: {
            Status = input.ReadInt32();
            break;
          }
          case 40: {
            Target = input.ReadInt32();
            break;
          }
          case 48: {
            Count = input.ReadInt32();
            break;
          }
          case 56: {
            During = input.ReadInt32();
            break;
          }
          case 64: {
            Tick = input.ReadInt32();
            break;
          }
          case 72: {
            CompulsoryLift = input.ReadInt32();
            break;
          }
          case 80: {
            TriggerRangeType = input.ReadInt32();
            break;
          }
          case 88: {
            Range = input.ReadInt32();
            break;
          }
          case 96: {
            DamageEffectType = input.ReadInt32();
            break;
          }
          case 104: {
            DamageEffectValue = input.ReadInt32();
            break;
          }
          case 112: {
            AddtiveEffectType = input.ReadInt32();
            break;
          }
          case 120: {
            AddtiveEffectFactor = input.ReadInt32();
            break;
          }
          case 128: {
            LimitAbility = input.ReadInt32();
            break;
          }
          case 136: {
            ShieldValue = input.ReadInt32();
            break;
          }
          case 144: {
            LeechLifeType = input.ReadInt32();
            break;
          }
          case 152: {
            LeechLifeParam = input.ReadInt32();
            break;
          }
          case 160: {
            TransformID = input.ReadInt32();
            break;
          }
          case 170:
          case 168: {
            transformAttackArr_.AddEntriesFrom(input, _repeated_transformAttackArr_codec);
            break;
          }
          case 178:
          case 176: {
            transformSkillArr_.AddEntriesFrom(input, _repeated_transformSkillArr_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class CameraTypeInfo : pb::IMessage<CameraTypeInfo> {
    private static readonly pb::MessageParser<CameraTypeInfo> _parser = new pb::MessageParser<CameraTypeInfo>(() => new CameraTypeInfo());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CameraTypeInfo> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Config.ConfigReflection.Descriptor.MessageTypes[29]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CameraTypeInfo() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CameraTypeInfo(CameraTypeInfo other) : this() {
      start_ = other.start_;
      duration_ = other.duration_;
      cameraType_ = other.cameraType_;
      endPosition_ = other.endPosition_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CameraTypeInfo Clone() {
      return new CameraTypeInfo(this);
    }

    /// <summary>Field number for the "Start" field.</summary>
    public const int StartFieldNumber = 1;
    private int start_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Start {
      get { return start_; }
      set {
        start_ = value;
      }
    }

    /// <summary>Field number for the "Duration" field.</summary>
    public const int DurationFieldNumber = 2;
    private int duration_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Duration {
      get { return duration_; }
      set {
        duration_ = value;
      }
    }

    /// <summary>Field number for the "CameraType" field.</summary>
    public const int CameraTypeFieldNumber = 3;
    private int cameraType_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CameraType {
      get { return cameraType_; }
      set {
        cameraType_ = value;
      }
    }

    /// <summary>Field number for the "EndPosition" field.</summary>
    public const int EndPositionFieldNumber = 4;
    private int endPosition_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int EndPosition {
      get { return endPosition_; }
      set {
        endPosition_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CameraTypeInfo);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CameraTypeInfo other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Start != other.Start) return false;
      if (Duration != other.Duration) return false;
      if (CameraType != other.CameraType) return false;
      if (EndPosition != other.EndPosition) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Start != 0) hash ^= Start.GetHashCode();
      if (Duration != 0) hash ^= Duration.GetHashCode();
      if (CameraType != 0) hash ^= CameraType.GetHashCode();
      if (EndPosition != 0) hash ^= EndPosition.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Start != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Start);
      }
      if (Duration != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Duration);
      }
      if (CameraType != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(CameraType);
      }
      if (EndPosition != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(EndPosition);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Start != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Start);
      }
      if (Duration != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Duration);
      }
      if (CameraType != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(CameraType);
      }
      if (EndPosition != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(EndPosition);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CameraTypeInfo other) {
      if (other == null) {
        return;
      }
      if (other.Start != 0) {
        Start = other.Start;
      }
      if (other.Duration != 0) {
        Duration = other.Duration;
      }
      if (other.CameraType != 0) {
        CameraType = other.CameraType;
      }
      if (other.EndPosition != 0) {
        EndPosition = other.EndPosition;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Start = input.ReadInt32();
            break;
          }
          case 16: {
            Duration = input.ReadInt32();
            break;
          }
          case 24: {
            CameraType = input.ReadInt32();
            break;
          }
          case 32: {
            EndPosition = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class AbilityStateInfo : pb::IMessage<AbilityStateInfo> {
    private static readonly pb::MessageParser<AbilityStateInfo> _parser = new pb::MessageParser<AbilityStateInfo>(() => new AbilityStateInfo());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<AbilityStateInfo> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Config.ConfigReflection.Descriptor.MessageTypes[30]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AbilityStateInfo() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AbilityStateInfo(AbilityStateInfo other) : this() {
      start_ = other.start_;
      duration_ = other.duration_;
      abilityStateIndex_ = other.abilityStateIndex_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AbilityStateInfo Clone() {
      return new AbilityStateInfo(this);
    }

    /// <summary>Field number for the "Start" field.</summary>
    public const int StartFieldNumber = 1;
    private int start_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Start {
      get { return start_; }
      set {
        start_ = value;
      }
    }

    /// <summary>Field number for the "Duration" field.</summary>
    public const int DurationFieldNumber = 2;
    private int duration_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Duration {
      get { return duration_; }
      set {
        duration_ = value;
      }
    }

    /// <summary>Field number for the "AbilityStateIndex" field.</summary>
    public const int AbilityStateIndexFieldNumber = 3;
    private int abilityStateIndex_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int AbilityStateIndex {
      get { return abilityStateIndex_; }
      set {
        abilityStateIndex_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as AbilityStateInfo);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(AbilityStateInfo other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Start != other.Start) return false;
      if (Duration != other.Duration) return false;
      if (AbilityStateIndex != other.AbilityStateIndex) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Start != 0) hash ^= Start.GetHashCode();
      if (Duration != 0) hash ^= Duration.GetHashCode();
      if (AbilityStateIndex != 0) hash ^= AbilityStateIndex.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Start != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Start);
      }
      if (Duration != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Duration);
      }
      if (AbilityStateIndex != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(AbilityStateIndex);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Start != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Start);
      }
      if (Duration != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Duration);
      }
      if (AbilityStateIndex != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(AbilityStateIndex);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(AbilityStateInfo other) {
      if (other == null) {
        return;
      }
      if (other.Start != 0) {
        Start = other.Start;
      }
      if (other.Duration != 0) {
        Duration = other.Duration;
      }
      if (other.AbilityStateIndex != 0) {
        AbilityStateIndex = other.AbilityStateIndex;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Start = input.ReadInt32();
            break;
          }
          case 16: {
            Duration = input.ReadInt32();
            break;
          }
          case 24: {
            AbilityStateIndex = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class SceneMap : pb::IMessage<SceneMap> {
    private static readonly pb::MessageParser<SceneMap> _parser = new pb::MessageParser<SceneMap>(() => new SceneMap());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SceneMap> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Config.ConfigReflection.Descriptor.MessageTypes[31]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SceneMap() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SceneMap(SceneMap other) : this() {
      iD_ = other.iD_;
      mapDataPath_ = other.mapDataPath_;
      monsterNormalLevel_ = other.monsterNormalLevel_;
      monsterElitelLevel_ = other.monsterElitelLevel_;
      monsterBossLevel_ = other.monsterBossLevel_;
      monsterStaMultiple_ = other.monsterStaMultiple_;
      monsterAtkMultiple_ = other.monsterAtkMultiple_;
      monsterRatioMultiple_ = other.monsterRatioMultiple_;
      monsterBossHPStripNumber_ = other.monsterBossHPStripNumber_;
      externalParam_ = other.externalParam_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SceneMap Clone() {
      return new SceneMap(this);
    }

    /// <summary>Field number for the "ID" field.</summary>
    public const int IDFieldNumber = 1;
    private int iD_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ID {
      get { return iD_; }
      set {
        iD_ = value;
      }
    }

    /// <summary>Field number for the "MapDataPath" field.</summary>
    public const int MapDataPathFieldNumber = 2;
    private string mapDataPath_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string MapDataPath {
      get { return mapDataPath_; }
      set {
        mapDataPath_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "MonsterNormalLevel" field.</summary>
    public const int MonsterNormalLevelFieldNumber = 3;
    private int monsterNormalLevel_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int MonsterNormalLevel {
      get { return monsterNormalLevel_; }
      set {
        monsterNormalLevel_ = value;
      }
    }

    /// <summary>Field number for the "MonsterElitelLevel" field.</summary>
    public const int MonsterElitelLevelFieldNumber = 4;
    private int monsterElitelLevel_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int MonsterElitelLevel {
      get { return monsterElitelLevel_; }
      set {
        monsterElitelLevel_ = value;
      }
    }

    /// <summary>Field number for the "MonsterBossLevel" field.</summary>
    public const int MonsterBossLevelFieldNumber = 5;
    private int monsterBossLevel_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int MonsterBossLevel {
      get { return monsterBossLevel_; }
      set {
        monsterBossLevel_ = value;
      }
    }

    /// <summary>Field number for the "MonsterStaMultiple" field.</summary>
    public const int MonsterStaMultipleFieldNumber = 6;
    private int monsterStaMultiple_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int MonsterStaMultiple {
      get { return monsterStaMultiple_; }
      set {
        monsterStaMultiple_ = value;
      }
    }

    /// <summary>Field number for the "MonsterAtkMultiple" field.</summary>
    public const int MonsterAtkMultipleFieldNumber = 7;
    private int monsterAtkMultiple_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int MonsterAtkMultiple {
      get { return monsterAtkMultiple_; }
      set {
        monsterAtkMultiple_ = value;
      }
    }

    /// <summary>Field number for the "MonsterRatioMultiple" field.</summary>
    public const int MonsterRatioMultipleFieldNumber = 8;
    private int monsterRatioMultiple_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int MonsterRatioMultiple {
      get { return monsterRatioMultiple_; }
      set {
        monsterRatioMultiple_ = value;
      }
    }

    /// <summary>Field number for the "MonsterBossHPStripNumber" field.</summary>
    public const int MonsterBossHPStripNumberFieldNumber = 9;
    private int monsterBossHPStripNumber_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int MonsterBossHPStripNumber {
      get { return monsterBossHPStripNumber_; }
      set {
        monsterBossHPStripNumber_ = value;
      }
    }

    /// <summary>Field number for the "ExternalParam" field.</summary>
    public const int ExternalParamFieldNumber = 10;
    private string externalParam_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ExternalParam {
      get { return externalParam_; }
      set {
        externalParam_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SceneMap);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SceneMap other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (ID != other.ID) return false;
      if (MapDataPath != other.MapDataPath) return false;
      if (MonsterNormalLevel != other.MonsterNormalLevel) return false;
      if (MonsterElitelLevel != other.MonsterElitelLevel) return false;
      if (MonsterBossLevel != other.MonsterBossLevel) return false;
      if (MonsterStaMultiple != other.MonsterStaMultiple) return false;
      if (MonsterAtkMultiple != other.MonsterAtkMultiple) return false;
      if (MonsterRatioMultiple != other.MonsterRatioMultiple) return false;
      if (MonsterBossHPStripNumber != other.MonsterBossHPStripNumber) return false;
      if (ExternalParam != other.ExternalParam) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (ID != 0) hash ^= ID.GetHashCode();
      if (MapDataPath.Length != 0) hash ^= MapDataPath.GetHashCode();
      if (MonsterNormalLevel != 0) hash ^= MonsterNormalLevel.GetHashCode();
      if (MonsterElitelLevel != 0) hash ^= MonsterElitelLevel.GetHashCode();
      if (MonsterBossLevel != 0) hash ^= MonsterBossLevel.GetHashCode();
      if (MonsterStaMultiple != 0) hash ^= MonsterStaMultiple.GetHashCode();
      if (MonsterAtkMultiple != 0) hash ^= MonsterAtkMultiple.GetHashCode();
      if (MonsterRatioMultiple != 0) hash ^= MonsterRatioMultiple.GetHashCode();
      if (MonsterBossHPStripNumber != 0) hash ^= MonsterBossHPStripNumber.GetHashCode();
      if (ExternalParam.Length != 0) hash ^= ExternalParam.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (ID != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(ID);
      }
      if (MapDataPath.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(MapDataPath);
      }
      if (MonsterNormalLevel != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(MonsterNormalLevel);
      }
      if (MonsterElitelLevel != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(MonsterElitelLevel);
      }
      if (MonsterBossLevel != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(MonsterBossLevel);
      }
      if (MonsterStaMultiple != 0) {
        output.WriteRawTag(48);
        output.WriteInt32(MonsterStaMultiple);
      }
      if (MonsterAtkMultiple != 0) {
        output.WriteRawTag(56);
        output.WriteInt32(MonsterAtkMultiple);
      }
      if (MonsterRatioMultiple != 0) {
        output.WriteRawTag(64);
        output.WriteInt32(MonsterRatioMultiple);
      }
      if (MonsterBossHPStripNumber != 0) {
        output.WriteRawTag(72);
        output.WriteInt32(MonsterBossHPStripNumber);
      }
      if (ExternalParam.Length != 0) {
        output.WriteRawTag(82);
        output.WriteString(ExternalParam);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ID != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ID);
      }
      if (MapDataPath.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(MapDataPath);
      }
      if (MonsterNormalLevel != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(MonsterNormalLevel);
      }
      if (MonsterElitelLevel != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(MonsterElitelLevel);
      }
      if (MonsterBossLevel != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(MonsterBossLevel);
      }
      if (MonsterStaMultiple != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(MonsterStaMultiple);
      }
      if (MonsterAtkMultiple != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(MonsterAtkMultiple);
      }
      if (MonsterRatioMultiple != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(MonsterRatioMultiple);
      }
      if (MonsterBossHPStripNumber != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(MonsterBossHPStripNumber);
      }
      if (ExternalParam.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ExternalParam);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SceneMap other) {
      if (other == null) {
        return;
      }
      if (other.ID != 0) {
        ID = other.ID;
      }
      if (other.MapDataPath.Length != 0) {
        MapDataPath = other.MapDataPath;
      }
      if (other.MonsterNormalLevel != 0) {
        MonsterNormalLevel = other.MonsterNormalLevel;
      }
      if (other.MonsterElitelLevel != 0) {
        MonsterElitelLevel = other.MonsterElitelLevel;
      }
      if (other.MonsterBossLevel != 0) {
        MonsterBossLevel = other.MonsterBossLevel;
      }
      if (other.MonsterStaMultiple != 0) {
        MonsterStaMultiple = other.MonsterStaMultiple;
      }
      if (other.MonsterAtkMultiple != 0) {
        MonsterAtkMultiple = other.MonsterAtkMultiple;
      }
      if (other.MonsterRatioMultiple != 0) {
        MonsterRatioMultiple = other.MonsterRatioMultiple;
      }
      if (other.MonsterBossHPStripNumber != 0) {
        MonsterBossHPStripNumber = other.MonsterBossHPStripNumber;
      }
      if (other.ExternalParam.Length != 0) {
        ExternalParam = other.ExternalParam;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            ID = input.ReadInt32();
            break;
          }
          case 18: {
            MapDataPath = input.ReadString();
            break;
          }
          case 24: {
            MonsterNormalLevel = input.ReadInt32();
            break;
          }
          case 32: {
            MonsterElitelLevel = input.ReadInt32();
            break;
          }
          case 40: {
            MonsterBossLevel = input.ReadInt32();
            break;
          }
          case 48: {
            MonsterStaMultiple = input.ReadInt32();
            break;
          }
          case 56: {
            MonsterAtkMultiple = input.ReadInt32();
            break;
          }
          case 64: {
            MonsterRatioMultiple = input.ReadInt32();
            break;
          }
          case 72: {
            MonsterBossHPStripNumber = input.ReadInt32();
            break;
          }
          case 82: {
            ExternalParam = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class ThrownBackActionInfo : pb::IMessage<ThrownBackActionInfo> {
    private static readonly pb::MessageParser<ThrownBackActionInfo> _parser = new pb::MessageParser<ThrownBackActionInfo>(() => new ThrownBackActionInfo());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ThrownBackActionInfo> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Config.ConfigReflection.Descriptor.MessageTypes[32]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ThrownBackActionInfo() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ThrownBackActionInfo(ThrownBackActionInfo other) : this() {
      start_ = other.start_;
      duration_ = other.duration_;
      onceCalc_ = other.onceCalc_;
      offset_ = other.offset_;
      minSpeed_ = other.minSpeed_;
      maxSpeed_ = other.maxSpeed_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ThrownBackActionInfo Clone() {
      return new ThrownBackActionInfo(this);
    }

    /// <summary>Field number for the "Start" field.</summary>
    public const int StartFieldNumber = 1;
    private int start_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Start {
      get { return start_; }
      set {
        start_ = value;
      }
    }

    /// <summary>Field number for the "Duration" field.</summary>
    public const int DurationFieldNumber = 2;
    private int duration_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Duration {
      get { return duration_; }
      set {
        duration_ = value;
      }
    }

    /// <summary>Field number for the "OnceCalc" field.</summary>
    public const int OnceCalcFieldNumber = 3;
    private int onceCalc_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int OnceCalc {
      get { return onceCalc_; }
      set {
        onceCalc_ = value;
      }
    }

    /// <summary>Field number for the "Offset" field.</summary>
    public const int OffsetFieldNumber = 4;
    private int offset_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Offset {
      get { return offset_; }
      set {
        offset_ = value;
      }
    }

    /// <summary>Field number for the "MinSpeed" field.</summary>
    public const int MinSpeedFieldNumber = 5;
    private int minSpeed_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int MinSpeed {
      get { return minSpeed_; }
      set {
        minSpeed_ = value;
      }
    }

    /// <summary>Field number for the "MaxSpeed" field.</summary>
    public const int MaxSpeedFieldNumber = 6;
    private int maxSpeed_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int MaxSpeed {
      get { return maxSpeed_; }
      set {
        maxSpeed_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ThrownBackActionInfo);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ThrownBackActionInfo other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Start != other.Start) return false;
      if (Duration != other.Duration) return false;
      if (OnceCalc != other.OnceCalc) return false;
      if (Offset != other.Offset) return false;
      if (MinSpeed != other.MinSpeed) return false;
      if (MaxSpeed != other.MaxSpeed) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Start != 0) hash ^= Start.GetHashCode();
      if (Duration != 0) hash ^= Duration.GetHashCode();
      if (OnceCalc != 0) hash ^= OnceCalc.GetHashCode();
      if (Offset != 0) hash ^= Offset.GetHashCode();
      if (MinSpeed != 0) hash ^= MinSpeed.GetHashCode();
      if (MaxSpeed != 0) hash ^= MaxSpeed.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Start != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Start);
      }
      if (Duration != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Duration);
      }
      if (OnceCalc != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(OnceCalc);
      }
      if (Offset != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(Offset);
      }
      if (MinSpeed != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(MinSpeed);
      }
      if (MaxSpeed != 0) {
        output.WriteRawTag(48);
        output.WriteInt32(MaxSpeed);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Start != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Start);
      }
      if (Duration != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Duration);
      }
      if (OnceCalc != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(OnceCalc);
      }
      if (Offset != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Offset);
      }
      if (MinSpeed != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(MinSpeed);
      }
      if (MaxSpeed != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(MaxSpeed);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ThrownBackActionInfo other) {
      if (other == null) {
        return;
      }
      if (other.Start != 0) {
        Start = other.Start;
      }
      if (other.Duration != 0) {
        Duration = other.Duration;
      }
      if (other.OnceCalc != 0) {
        OnceCalc = other.OnceCalc;
      }
      if (other.Offset != 0) {
        Offset = other.Offset;
      }
      if (other.MinSpeed != 0) {
        MinSpeed = other.MinSpeed;
      }
      if (other.MaxSpeed != 0) {
        MaxSpeed = other.MaxSpeed;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Start = input.ReadInt32();
            break;
          }
          case 16: {
            Duration = input.ReadInt32();
            break;
          }
          case 24: {
            OnceCalc = input.ReadInt32();
            break;
          }
          case 32: {
            Offset = input.ReadInt32();
            break;
          }
          case 40: {
            MinSpeed = input.ReadInt32();
            break;
          }
          case 48: {
            MaxSpeed = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class TransformActionInfo : pb::IMessage<TransformActionInfo> {
    private static readonly pb::MessageParser<TransformActionInfo> _parser = new pb::MessageParser<TransformActionInfo>(() => new TransformActionInfo());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<TransformActionInfo> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Config.ConfigReflection.Descriptor.MessageTypes[33]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TransformActionInfo() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TransformActionInfo(TransformActionInfo other) : this() {
      start_ = other.start_;
      transformRoleID_ = other.transformRoleID_;
      transformActionID_ = other.transformActionID_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TransformActionInfo Clone() {
      return new TransformActionInfo(this);
    }

    /// <summary>Field number for the "Start" field.</summary>
    public const int StartFieldNumber = 1;
    private int start_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Start {
      get { return start_; }
      set {
        start_ = value;
      }
    }

    /// <summary>Field number for the "TransformRoleID" field.</summary>
    public const int TransformRoleIDFieldNumber = 2;
    private int transformRoleID_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int TransformRoleID {
      get { return transformRoleID_; }
      set {
        transformRoleID_ = value;
      }
    }

    /// <summary>Field number for the "TransformActionID" field.</summary>
    public const int TransformActionIDFieldNumber = 3;
    private int transformActionID_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int TransformActionID {
      get { return transformActionID_; }
      set {
        transformActionID_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as TransformActionInfo);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(TransformActionInfo other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Start != other.Start) return false;
      if (TransformRoleID != other.TransformRoleID) return false;
      if (TransformActionID != other.TransformActionID) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Start != 0) hash ^= Start.GetHashCode();
      if (TransformRoleID != 0) hash ^= TransformRoleID.GetHashCode();
      if (TransformActionID != 0) hash ^= TransformActionID.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Start != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Start);
      }
      if (TransformRoleID != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(TransformRoleID);
      }
      if (TransformActionID != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(TransformActionID);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Start != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Start);
      }
      if (TransformRoleID != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(TransformRoleID);
      }
      if (TransformActionID != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(TransformActionID);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(TransformActionInfo other) {
      if (other == null) {
        return;
      }
      if (other.Start != 0) {
        Start = other.Start;
      }
      if (other.TransformRoleID != 0) {
        TransformRoleID = other.TransformRoleID;
      }
      if (other.TransformActionID != 0) {
        TransformActionID = other.TransformActionID;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Start = input.ReadInt32();
            break;
          }
          case 16: {
            TransformRoleID = input.ReadInt32();
            break;
          }
          case 24: {
            TransformActionID = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
