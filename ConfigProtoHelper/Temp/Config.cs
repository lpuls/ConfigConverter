// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: Temp/Config.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace Config {

  /// <summary>Holder for reflection information generated from Temp/Config.proto</summary>
  public static partial class ConfigReflection {

    #region Descriptor
    /// <summary>File descriptor for Temp/Config.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static ConfigReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "ChFUZW1wL0NvbmZpZy5wcm90byIYCghfMkRBcnJheRIMCgRkYXRhGAEgAygF",
            "Iq0CCgxDb25maWdIZWxwZXISCgoCSUQYASABKAUSEQoJTE9OR19URVNUGAIg",
            "ASgDEhIKCkZMT0FUX1RFU1QYAyABKAISEQoJQk9PTF9URVNUGAQgASgIEhAK",
            "CFNUUl9URVNUGAUgASgJEhIKCkFSUkFZX1RFU1QYBiADKAUSFgoOQVJSQVlf",
            "SU5UX1RFU1QYByADKAUSOgoQTUFQX0lOVF9JTlRfVEVTVBgIIAMoCzIgLkNv",
            "bmZpZ0hlbHBlci5NQVBJTlRJTlRURVNURW50cnkSJwoUQVJSQVlfQVJSQVlf",
            "SU5UX1RFU1QYCSADKAsyCS5fMkRBcnJheRo0ChJNQVBJTlRJTlRURVNURW50",
            "cnkSCwoDa2V5GAEgASgFEg0KBXZhbHVlGAIgASgFOgI4AUIJqgIGQ29uZmln",
            "YgZwcm90bzM="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { },
          new pbr::GeneratedClrTypeInfo(null, null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::Config._2DArray), global::Config._2DArray.Parser, new[]{ "Data" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Config.ConfigHelper), global::Config.ConfigHelper.Parser, new[]{ "ID", "LONGTEST", "FLOATTEST", "BOOLTEST", "STRTEST", "ARRAYTEST", "ARRAYINTTEST", "MAPINTINTTEST", "ARRAYARRAYINTTEST" }, null, null, null, new pbr::GeneratedClrTypeInfo[] { null, })
          }));
    }
    #endregion

  }
  #region Messages
  public sealed partial class _2DArray : pb::IMessage<_2DArray> {
    private static readonly pb::MessageParser<_2DArray> _parser = new pb::MessageParser<_2DArray>(() => new _2DArray());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<_2DArray> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Config.ConfigReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public _2DArray() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public _2DArray(_2DArray other) : this() {
      data_ = other.data_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public _2DArray Clone() {
      return new _2DArray(this);
    }

    /// <summary>Field number for the "data" field.</summary>
    public const int DataFieldNumber = 1;
    private static readonly pb::FieldCodec<int> _repeated_data_codec
        = pb::FieldCodec.ForInt32(10);
    private readonly pbc::RepeatedField<int> data_ = new pbc::RepeatedField<int>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<int> Data {
      get { return data_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as _2DArray);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(_2DArray other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!data_.Equals(other.data_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= data_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      data_.WriteTo(output, _repeated_data_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += data_.CalculateSize(_repeated_data_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(_2DArray other) {
      if (other == null) {
        return;
      }
      data_.Add(other.data_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10:
          case 8: {
            data_.AddEntriesFrom(input, _repeated_data_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class ConfigHelper : pb::IMessage<ConfigHelper> {
    private static readonly pb::MessageParser<ConfigHelper> _parser = new pb::MessageParser<ConfigHelper>(() => new ConfigHelper());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ConfigHelper> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Config.ConfigReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ConfigHelper() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ConfigHelper(ConfigHelper other) : this() {
      iD_ = other.iD_;
      lONGTEST_ = other.lONGTEST_;
      fLOATTEST_ = other.fLOATTEST_;
      bOOLTEST_ = other.bOOLTEST_;
      sTRTEST_ = other.sTRTEST_;
      aRRAYTEST_ = other.aRRAYTEST_.Clone();
      aRRAYINTTEST_ = other.aRRAYINTTEST_.Clone();
      mAPINTINTTEST_ = other.mAPINTINTTEST_.Clone();
      aRRAYARRAYINTTEST_ = other.aRRAYARRAYINTTEST_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ConfigHelper Clone() {
      return new ConfigHelper(this);
    }

    /// <summary>Field number for the "ID" field.</summary>
    public const int IDFieldNumber = 1;
    private int iD_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ID {
      get { return iD_; }
      set {
        iD_ = value;
      }
    }

    /// <summary>Field number for the "LONG_TEST" field.</summary>
    public const int LONGTESTFieldNumber = 2;
    private long lONGTEST_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long LONGTEST {
      get { return lONGTEST_; }
      set {
        lONGTEST_ = value;
      }
    }

    /// <summary>Field number for the "FLOAT_TEST" field.</summary>
    public const int FLOATTESTFieldNumber = 3;
    private float fLOATTEST_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float FLOATTEST {
      get { return fLOATTEST_; }
      set {
        fLOATTEST_ = value;
      }
    }

    /// <summary>Field number for the "BOOL_TEST" field.</summary>
    public const int BOOLTESTFieldNumber = 4;
    private bool bOOLTEST_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool BOOLTEST {
      get { return bOOLTEST_; }
      set {
        bOOLTEST_ = value;
      }
    }

    /// <summary>Field number for the "STR_TEST" field.</summary>
    public const int STRTESTFieldNumber = 5;
    private string sTRTEST_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string STRTEST {
      get { return sTRTEST_; }
      set {
        sTRTEST_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "ARRAY_TEST" field.</summary>
    public const int ARRAYTESTFieldNumber = 6;
    private static readonly pb::FieldCodec<int> _repeated_aRRAYTEST_codec
        = pb::FieldCodec.ForInt32(50);
    private readonly pbc::RepeatedField<int> aRRAYTEST_ = new pbc::RepeatedField<int>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<int> ARRAYTEST {
      get { return aRRAYTEST_; }
    }

    /// <summary>Field number for the "ARRAY_INT_TEST" field.</summary>
    public const int ARRAYINTTESTFieldNumber = 7;
    private static readonly pb::FieldCodec<int> _repeated_aRRAYINTTEST_codec
        = pb::FieldCodec.ForInt32(58);
    private readonly pbc::RepeatedField<int> aRRAYINTTEST_ = new pbc::RepeatedField<int>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<int> ARRAYINTTEST {
      get { return aRRAYINTTEST_; }
    }

    /// <summary>Field number for the "MAP_INT_INT_TEST" field.</summary>
    public const int MAPINTINTTESTFieldNumber = 8;
    private static readonly pbc::MapField<int, int>.Codec _map_mAPINTINTTEST_codec
        = new pbc::MapField<int, int>.Codec(pb::FieldCodec.ForInt32(8, 0), pb::FieldCodec.ForInt32(16, 0), 66);
    private readonly pbc::MapField<int, int> mAPINTINTTEST_ = new pbc::MapField<int, int>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::MapField<int, int> MAPINTINTTEST {
      get { return mAPINTINTTEST_; }
    }

    /// <summary>Field number for the "ARRAY_ARRAY_INT_TEST" field.</summary>
    public const int ARRAYARRAYINTTESTFieldNumber = 9;
    private static readonly pb::FieldCodec<global::Config._2DArray> _repeated_aRRAYARRAYINTTEST_codec
        = pb::FieldCodec.ForMessage(74, global::Config._2DArray.Parser);
    private readonly pbc::RepeatedField<global::Config._2DArray> aRRAYARRAYINTTEST_ = new pbc::RepeatedField<global::Config._2DArray>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Config._2DArray> ARRAYARRAYINTTEST {
      get { return aRRAYARRAYINTTEST_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ConfigHelper);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ConfigHelper other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (ID != other.ID) return false;
      if (LONGTEST != other.LONGTEST) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(FLOATTEST, other.FLOATTEST)) return false;
      if (BOOLTEST != other.BOOLTEST) return false;
      if (STRTEST != other.STRTEST) return false;
      if(!aRRAYTEST_.Equals(other.aRRAYTEST_)) return false;
      if(!aRRAYINTTEST_.Equals(other.aRRAYINTTEST_)) return false;
      if (!MAPINTINTTEST.Equals(other.MAPINTINTTEST)) return false;
      if(!aRRAYARRAYINTTEST_.Equals(other.aRRAYARRAYINTTEST_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (ID != 0) hash ^= ID.GetHashCode();
      if (LONGTEST != 0L) hash ^= LONGTEST.GetHashCode();
      if (FLOATTEST != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(FLOATTEST);
      if (BOOLTEST != false) hash ^= BOOLTEST.GetHashCode();
      if (STRTEST.Length != 0) hash ^= STRTEST.GetHashCode();
      hash ^= aRRAYTEST_.GetHashCode();
      hash ^= aRRAYINTTEST_.GetHashCode();
      hash ^= MAPINTINTTEST.GetHashCode();
      hash ^= aRRAYARRAYINTTEST_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (ID != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(ID);
      }
      if (LONGTEST != 0L) {
        output.WriteRawTag(16);
        output.WriteInt64(LONGTEST);
      }
      if (FLOATTEST != 0F) {
        output.WriteRawTag(29);
        output.WriteFloat(FLOATTEST);
      }
      if (BOOLTEST != false) {
        output.WriteRawTag(32);
        output.WriteBool(BOOLTEST);
      }
      if (STRTEST.Length != 0) {
        output.WriteRawTag(42);
        output.WriteString(STRTEST);
      }
      aRRAYTEST_.WriteTo(output, _repeated_aRRAYTEST_codec);
      aRRAYINTTEST_.WriteTo(output, _repeated_aRRAYINTTEST_codec);
      mAPINTINTTEST_.WriteTo(output, _map_mAPINTINTTEST_codec);
      aRRAYARRAYINTTEST_.WriteTo(output, _repeated_aRRAYARRAYINTTEST_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ID != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ID);
      }
      if (LONGTEST != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(LONGTEST);
      }
      if (FLOATTEST != 0F) {
        size += 1 + 4;
      }
      if (BOOLTEST != false) {
        size += 1 + 1;
      }
      if (STRTEST.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(STRTEST);
      }
      size += aRRAYTEST_.CalculateSize(_repeated_aRRAYTEST_codec);
      size += aRRAYINTTEST_.CalculateSize(_repeated_aRRAYINTTEST_codec);
      size += mAPINTINTTEST_.CalculateSize(_map_mAPINTINTTEST_codec);
      size += aRRAYARRAYINTTEST_.CalculateSize(_repeated_aRRAYARRAYINTTEST_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ConfigHelper other) {
      if (other == null) {
        return;
      }
      if (other.ID != 0) {
        ID = other.ID;
      }
      if (other.LONGTEST != 0L) {
        LONGTEST = other.LONGTEST;
      }
      if (other.FLOATTEST != 0F) {
        FLOATTEST = other.FLOATTEST;
      }
      if (other.BOOLTEST != false) {
        BOOLTEST = other.BOOLTEST;
      }
      if (other.STRTEST.Length != 0) {
        STRTEST = other.STRTEST;
      }
      aRRAYTEST_.Add(other.aRRAYTEST_);
      aRRAYINTTEST_.Add(other.aRRAYINTTEST_);
      mAPINTINTTEST_.Add(other.mAPINTINTTEST_);
      aRRAYARRAYINTTEST_.Add(other.aRRAYARRAYINTTEST_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            ID = input.ReadInt32();
            break;
          }
          case 16: {
            LONGTEST = input.ReadInt64();
            break;
          }
          case 29: {
            FLOATTEST = input.ReadFloat();
            break;
          }
          case 32: {
            BOOLTEST = input.ReadBool();
            break;
          }
          case 42: {
            STRTEST = input.ReadString();
            break;
          }
          case 50:
          case 48: {
            aRRAYTEST_.AddEntriesFrom(input, _repeated_aRRAYTEST_codec);
            break;
          }
          case 58:
          case 56: {
            aRRAYINTTEST_.AddEntriesFrom(input, _repeated_aRRAYINTTEST_codec);
            break;
          }
          case 66: {
            mAPINTINTTEST_.AddEntriesFrom(input, _map_mAPINTINTTEST_codec);
            break;
          }
          case 74: {
            aRRAYARRAYINTTEST_.AddEntriesFrom(input, _repeated_aRRAYARRAYINTTEST_codec);
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
