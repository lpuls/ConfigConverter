// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Data.proto
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace Config {

  /// <summary>Holder for reflection information generated from Data.proto</summary>
  public static partial class DataReflection {

    #region Descriptor
    /// <summary>File descriptor for Data.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static DataReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "CgpEYXRhLnByb3RvIvUBCgZTaGVldDESDQoFdGVzdEEYASABKAUSDQoFdGVz",
            "dEIYAiABKAkSDQoFdGVzdEMYAyABKAgSDQoFdGVzdEQYBCADKAUSDQoFdGVz",
            "dEUYBSADKAUSIQoFdGVzdEYYBiADKAsyEi5TaGVldDEuVGVzdEZFbnRyeRIh",
            "CgV0ZXN0RxgHIAMoCzISLlNoZWV0MS5UZXN0R0VudHJ5GiwKClRlc3RGRW50",
            "cnkSCwoDa2V5GAEgASgJEg0KBXZhbHVlGAIgASgFOgI4ARosCgpUZXN0R0Vu",
            "dHJ5EgsKA2tleRgBIAEoCRINCgV2YWx1ZRgCIAEoBToCOAFCCaoCBkNvbmZp",
            "Z2IGcHJvdG8z"));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { },
          new pbr::GeneratedClrTypeInfo(null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::Config.Sheet1), global::Config.Sheet1.Parser, new[]{ "TestA", "TestB", "TestC", "TestD", "TestE", "TestF", "TestG" }, null, null, new pbr::GeneratedClrTypeInfo[] { null, null, })
          }));
    }
    #endregion

  }
  #region Messages
  public sealed partial class Sheet1 : pb::IMessage<Sheet1> {
    private static readonly pb::MessageParser<Sheet1> _parser = new pb::MessageParser<Sheet1>(() => new Sheet1());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Sheet1> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Config.DataReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Sheet1() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Sheet1(Sheet1 other) : this() {
      testA_ = other.testA_;
      testB_ = other.testB_;
      testC_ = other.testC_;
      testD_ = other.testD_.Clone();
      testE_ = other.testE_.Clone();
      testF_ = other.testF_.Clone();
      testG_ = other.testG_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Sheet1 Clone() {
      return new Sheet1(this);
    }

    /// <summary>Field number for the "testA" field.</summary>
    public const int TestAFieldNumber = 1;
    private int testA_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int TestA {
      get { return testA_; }
      set {
        testA_ = value;
      }
    }

    /// <summary>Field number for the "testB" field.</summary>
    public const int TestBFieldNumber = 2;
    private string testB_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string TestB {
      get { return testB_; }
      set {
        testB_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "testC" field.</summary>
    public const int TestCFieldNumber = 3;
    private bool testC_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool TestC {
      get { return testC_; }
      set {
        testC_ = value;
      }
    }

    /// <summary>Field number for the "testD" field.</summary>
    public const int TestDFieldNumber = 4;
    private static readonly pb::FieldCodec<int> _repeated_testD_codec
        = pb::FieldCodec.ForInt32(34);
    private readonly pbc::RepeatedField<int> testD_ = new pbc::RepeatedField<int>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<int> TestD {
      get { return testD_; }
    }

    /// <summary>Field number for the "testE" field.</summary>
    public const int TestEFieldNumber = 5;
    private static readonly pb::FieldCodec<int> _repeated_testE_codec
        = pb::FieldCodec.ForInt32(42);
    private readonly pbc::RepeatedField<int> testE_ = new pbc::RepeatedField<int>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<int> TestE {
      get { return testE_; }
    }

    /// <summary>Field number for the "testF" field.</summary>
    public const int TestFFieldNumber = 6;
    private static readonly pbc::MapField<string, int>.Codec _map_testF_codec
        = new pbc::MapField<string, int>.Codec(pb::FieldCodec.ForString(10), pb::FieldCodec.ForInt32(16), 50);
    private readonly pbc::MapField<string, int> testF_ = new pbc::MapField<string, int>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::MapField<string, int> TestF {
      get { return testF_; }
    }

    /// <summary>Field number for the "testG" field.</summary>
    public const int TestGFieldNumber = 7;
    private static readonly pbc::MapField<string, int>.Codec _map_testG_codec
        = new pbc::MapField<string, int>.Codec(pb::FieldCodec.ForString(10), pb::FieldCodec.ForInt32(16), 58);
    private readonly pbc::MapField<string, int> testG_ = new pbc::MapField<string, int>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::MapField<string, int> TestG {
      get { return testG_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Sheet1);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Sheet1 other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (TestA != other.TestA) return false;
      if (TestB != other.TestB) return false;
      if (TestC != other.TestC) return false;
      if(!testD_.Equals(other.testD_)) return false;
      if(!testE_.Equals(other.testE_)) return false;
      if (!TestF.Equals(other.TestF)) return false;
      if (!TestG.Equals(other.TestG)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (TestA != 0) hash ^= TestA.GetHashCode();
      if (TestB.Length != 0) hash ^= TestB.GetHashCode();
      if (TestC != false) hash ^= TestC.GetHashCode();
      hash ^= testD_.GetHashCode();
      hash ^= testE_.GetHashCode();
      hash ^= TestF.GetHashCode();
      hash ^= TestG.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (TestA != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(TestA);
      }
      if (TestB.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(TestB);
      }
      if (TestC != false) {
        output.WriteRawTag(24);
        output.WriteBool(TestC);
      }
      testD_.WriteTo(output, _repeated_testD_codec);
      testE_.WriteTo(output, _repeated_testE_codec);
      testF_.WriteTo(output, _map_testF_codec);
      testG_.WriteTo(output, _map_testG_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (TestA != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(TestA);
      }
      if (TestB.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(TestB);
      }
      if (TestC != false) {
        size += 1 + 1;
      }
      size += testD_.CalculateSize(_repeated_testD_codec);
      size += testE_.CalculateSize(_repeated_testE_codec);
      size += testF_.CalculateSize(_map_testF_codec);
      size += testG_.CalculateSize(_map_testG_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Sheet1 other) {
      if (other == null) {
        return;
      }
      if (other.TestA != 0) {
        TestA = other.TestA;
      }
      if (other.TestB.Length != 0) {
        TestB = other.TestB;
      }
      if (other.TestC != false) {
        TestC = other.TestC;
      }
      testD_.Add(other.testD_);
      testE_.Add(other.testE_);
      testF_.Add(other.testF_);
      testG_.Add(other.testG_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            TestA = input.ReadInt32();
            break;
          }
          case 18: {
            TestB = input.ReadString();
            break;
          }
          case 24: {
            TestC = input.ReadBool();
            break;
          }
          case 34:
          case 32: {
            testD_.AddEntriesFrom(input, _repeated_testD_codec);
            break;
          }
          case 42:
          case 40: {
            testE_.AddEntriesFrom(input, _repeated_testE_codec);
            break;
          }
          case 50: {
            testF_.AddEntriesFrom(input, _map_testF_codec);
            break;
          }
          case 58: {
            testG_.AddEntriesFrom(input, _map_testG_codec);
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
