// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: Temp/Config.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace Config {

  /// <summary>Holder for reflection information generated from Temp/Config.proto</summary>
  public static partial class ConfigReflection {

    #region Descriptor
    /// <summary>File descriptor for Temp/Config.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static ConfigReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "ChFUZW1wL0NvbmZpZy5wcm90byJeCgVTcGF3bhIKCgJJRBgBIAEoBRINCgVS",
            "b3VuZBgCIAEoBRIRCglTcGF3blR5cGUYAyABKAUSCQoBWBgEIAEoBRIJCgFZ",
            "GAUgASgFEhEKCUFycmF5VGVzdBgGIAEoBSpzCgxGbG9hdGluZ1R5cGUSFQoR",
            "RmxvYXRpbmdUeXBlX05PTkUQABIJCgVTY29yZRABEgkKBUJsb2NrEAISCAoE",
            "VHJhcBAEEhIKDkluZmluaXRlR2xvdmVzEAUSDAoIVGhlV29ybGQQBhIKCgZU",
            "YXJnZXQQQEIJqgIGQ29uZmlnYgZwcm90bzM="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { },
          new pbr::GeneratedClrTypeInfo(new[] {typeof(global::Config.FloatingType), }, null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::Config.Spawn), global::Config.Spawn.Parser, new[]{ "ID", "Round", "SpawnType", "X", "Y", "ArrayTest" }, null, null, null, null)
          }));
    }
    #endregion

  }
  #region Enums
  public enum FloatingType {
    [pbr::OriginalName("FloatingType_NONE")] None = 0,
    [pbr::OriginalName("Score")] Score = 1,
    [pbr::OriginalName("Block")] Block = 2,
    [pbr::OriginalName("Trap")] Trap = 4,
    [pbr::OriginalName("InfiniteGloves")] InfiniteGloves = 5,
    [pbr::OriginalName("TheWorld")] TheWorld = 6,
    [pbr::OriginalName("Target")] Target = 64,
  }

  #endregion

  #region Messages
  public sealed partial class Spawn : pb::IMessage<Spawn> {
    private static readonly pb::MessageParser<Spawn> _parser = new pb::MessageParser<Spawn>(() => new Spawn());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Spawn> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Config.ConfigReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Spawn() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Spawn(Spawn other) : this() {
      iD_ = other.iD_;
      round_ = other.round_;
      spawnType_ = other.spawnType_;
      x_ = other.x_;
      y_ = other.y_;
      arrayTest_ = other.arrayTest_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Spawn Clone() {
      return new Spawn(this);
    }

    /// <summary>Field number for the "ID" field.</summary>
    public const int IDFieldNumber = 1;
    private int iD_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ID {
      get { return iD_; }
      set {
        iD_ = value;
      }
    }

    /// <summary>Field number for the "Round" field.</summary>
    public const int RoundFieldNumber = 2;
    private int round_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Round {
      get { return round_; }
      set {
        round_ = value;
      }
    }

    /// <summary>Field number for the "SpawnType" field.</summary>
    public const int SpawnTypeFieldNumber = 3;
    private int spawnType_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int SpawnType {
      get { return spawnType_; }
      set {
        spawnType_ = value;
      }
    }

    /// <summary>Field number for the "X" field.</summary>
    public const int XFieldNumber = 4;
    private int x_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int X {
      get { return x_; }
      set {
        x_ = value;
      }
    }

    /// <summary>Field number for the "Y" field.</summary>
    public const int YFieldNumber = 5;
    private int y_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Y {
      get { return y_; }
      set {
        y_ = value;
      }
    }

    /// <summary>Field number for the "ArrayTest" field.</summary>
    public const int ArrayTestFieldNumber = 6;
    private int arrayTest_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ArrayTest {
      get { return arrayTest_; }
      set {
        arrayTest_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Spawn);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Spawn other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (ID != other.ID) return false;
      if (Round != other.Round) return false;
      if (SpawnType != other.SpawnType) return false;
      if (X != other.X) return false;
      if (Y != other.Y) return false;
      if (ArrayTest != other.ArrayTest) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (ID != 0) hash ^= ID.GetHashCode();
      if (Round != 0) hash ^= Round.GetHashCode();
      if (SpawnType != 0) hash ^= SpawnType.GetHashCode();
      if (X != 0) hash ^= X.GetHashCode();
      if (Y != 0) hash ^= Y.GetHashCode();
      if (ArrayTest != 0) hash ^= ArrayTest.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (ID != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(ID);
      }
      if (Round != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Round);
      }
      if (SpawnType != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(SpawnType);
      }
      if (X != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(X);
      }
      if (Y != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(Y);
      }
      if (ArrayTest != 0) {
        output.WriteRawTag(48);
        output.WriteInt32(ArrayTest);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ID != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ID);
      }
      if (Round != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Round);
      }
      if (SpawnType != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(SpawnType);
      }
      if (X != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(X);
      }
      if (Y != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Y);
      }
      if (ArrayTest != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ArrayTest);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Spawn other) {
      if (other == null) {
        return;
      }
      if (other.ID != 0) {
        ID = other.ID;
      }
      if (other.Round != 0) {
        Round = other.Round;
      }
      if (other.SpawnType != 0) {
        SpawnType = other.SpawnType;
      }
      if (other.X != 0) {
        X = other.X;
      }
      if (other.Y != 0) {
        Y = other.Y;
      }
      if (other.ArrayTest != 0) {
        ArrayTest = other.ArrayTest;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            ID = input.ReadInt32();
            break;
          }
          case 16: {
            Round = input.ReadInt32();
            break;
          }
          case 24: {
            SpawnType = input.ReadInt32();
            break;
          }
          case 32: {
            X = input.ReadInt32();
            break;
          }
          case 40: {
            Y = input.ReadInt32();
            break;
          }
          case 48: {
            ArrayTest = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
