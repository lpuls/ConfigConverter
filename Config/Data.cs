// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Data.proto
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace Config {

  /// <summary>Holder for reflection information generated from Data.proto</summary>
  public static partial class DataReflection {

    #region Descriptor
    /// <summary>File descriptor for Data.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static DataReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "CgpEYXRhLnByb3RvIskBCgtTa2lsbFByZWZhYhIKCgJJRBgBIAEoBRISCgpB",
            "Y3Rpb25OYW1lGAIgASgJEhEKCVRvdGFsVGltZRgDIAEoBRIYChBTdGF0ZUNo",
            "YW5uZWxUaW1lGAQgASgFEhkKEVNwZWxsQmFja3dpbmdUaW1lGAUgASgFEhMK",
            "C0hpdFRpbWVMaXN0GAYgAygFEhYKDkhlcm9PZmZzZXRUaW1lGAcgAygFEhYK",
            "Dkhlcm9PZmZzZXRQb3NaGAggAygFEg0KBVNwZWVkGAkgAygFIqMBCgpEYXRh",
            "SGVscGVyEhMKC21lc3NhZ2VUeXBlGAEgAygJEjoKEFNraWxsUHJlZmFiX2Rp",
            "Y3QYAiADKAsyIC5EYXRhSGVscGVyLlNraWxsUHJlZmFiRGljdEVudHJ5GkQK",
            "FFNraWxsUHJlZmFiRGljdEVudHJ5EgsKA2tleRgBIAEoBRIbCgV2YWx1ZRgC",
            "IAEoCzIMLlNraWxsUHJlZmFiOgI4AUIJqgIGQ29uZmlnYgZwcm90bzM="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { },
          new pbr::GeneratedClrTypeInfo(null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::Config.SkillPrefab), global::Config.SkillPrefab.Parser, new[]{ "ID", "ActionName", "TotalTime", "StateChannelTime", "SpellBackwingTime", "HitTimeList", "HeroOffsetTime", "HeroOffsetPosZ", "Speed" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Config.DataHelper), global::Config.DataHelper.Parser, new[]{ "MessageType", "SkillPrefabDict" }, null, null, new pbr::GeneratedClrTypeInfo[] { null, })
          }));
    }
    #endregion

  }
  #region Messages
  public sealed partial class SkillPrefab : pb::IMessage<SkillPrefab> {
    private static readonly pb::MessageParser<SkillPrefab> _parser = new pb::MessageParser<SkillPrefab>(() => new SkillPrefab());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SkillPrefab> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Config.DataReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SkillPrefab() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SkillPrefab(SkillPrefab other) : this() {
      iD_ = other.iD_;
      actionName_ = other.actionName_;
      totalTime_ = other.totalTime_;
      stateChannelTime_ = other.stateChannelTime_;
      spellBackwingTime_ = other.spellBackwingTime_;
      hitTimeList_ = other.hitTimeList_.Clone();
      heroOffsetTime_ = other.heroOffsetTime_.Clone();
      heroOffsetPosZ_ = other.heroOffsetPosZ_.Clone();
      speed_ = other.speed_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SkillPrefab Clone() {
      return new SkillPrefab(this);
    }

    /// <summary>Field number for the "ID" field.</summary>
    public const int IDFieldNumber = 1;
    private int iD_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ID {
      get { return iD_; }
      set {
        iD_ = value;
      }
    }

    /// <summary>Field number for the "ActionName" field.</summary>
    public const int ActionNameFieldNumber = 2;
    private string actionName_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ActionName {
      get { return actionName_; }
      set {
        actionName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "TotalTime" field.</summary>
    public const int TotalTimeFieldNumber = 3;
    private int totalTime_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int TotalTime {
      get { return totalTime_; }
      set {
        totalTime_ = value;
      }
    }

    /// <summary>Field number for the "StateChannelTime" field.</summary>
    public const int StateChannelTimeFieldNumber = 4;
    private int stateChannelTime_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int StateChannelTime {
      get { return stateChannelTime_; }
      set {
        stateChannelTime_ = value;
      }
    }

    /// <summary>Field number for the "SpellBackwingTime" field.</summary>
    public const int SpellBackwingTimeFieldNumber = 5;
    private int spellBackwingTime_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int SpellBackwingTime {
      get { return spellBackwingTime_; }
      set {
        spellBackwingTime_ = value;
      }
    }

    /// <summary>Field number for the "HitTimeList" field.</summary>
    public const int HitTimeListFieldNumber = 6;
    private static readonly pb::FieldCodec<int> _repeated_hitTimeList_codec
        = pb::FieldCodec.ForInt32(50);
    private readonly pbc::RepeatedField<int> hitTimeList_ = new pbc::RepeatedField<int>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<int> HitTimeList {
      get { return hitTimeList_; }
    }

    /// <summary>Field number for the "HeroOffsetTime" field.</summary>
    public const int HeroOffsetTimeFieldNumber = 7;
    private static readonly pb::FieldCodec<int> _repeated_heroOffsetTime_codec
        = pb::FieldCodec.ForInt32(58);
    private readonly pbc::RepeatedField<int> heroOffsetTime_ = new pbc::RepeatedField<int>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<int> HeroOffsetTime {
      get { return heroOffsetTime_; }
    }

    /// <summary>Field number for the "HeroOffsetPosZ" field.</summary>
    public const int HeroOffsetPosZFieldNumber = 8;
    private static readonly pb::FieldCodec<int> _repeated_heroOffsetPosZ_codec
        = pb::FieldCodec.ForInt32(66);
    private readonly pbc::RepeatedField<int> heroOffsetPosZ_ = new pbc::RepeatedField<int>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<int> HeroOffsetPosZ {
      get { return heroOffsetPosZ_; }
    }

    /// <summary>Field number for the "Speed" field.</summary>
    public const int SpeedFieldNumber = 9;
    private static readonly pb::FieldCodec<int> _repeated_speed_codec
        = pb::FieldCodec.ForInt32(74);
    private readonly pbc::RepeatedField<int> speed_ = new pbc::RepeatedField<int>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<int> Speed {
      get { return speed_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SkillPrefab);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SkillPrefab other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (ID != other.ID) return false;
      if (ActionName != other.ActionName) return false;
      if (TotalTime != other.TotalTime) return false;
      if (StateChannelTime != other.StateChannelTime) return false;
      if (SpellBackwingTime != other.SpellBackwingTime) return false;
      if(!hitTimeList_.Equals(other.hitTimeList_)) return false;
      if(!heroOffsetTime_.Equals(other.heroOffsetTime_)) return false;
      if(!heroOffsetPosZ_.Equals(other.heroOffsetPosZ_)) return false;
      if(!speed_.Equals(other.speed_)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (ID != 0) hash ^= ID.GetHashCode();
      if (ActionName.Length != 0) hash ^= ActionName.GetHashCode();
      if (TotalTime != 0) hash ^= TotalTime.GetHashCode();
      if (StateChannelTime != 0) hash ^= StateChannelTime.GetHashCode();
      if (SpellBackwingTime != 0) hash ^= SpellBackwingTime.GetHashCode();
      hash ^= hitTimeList_.GetHashCode();
      hash ^= heroOffsetTime_.GetHashCode();
      hash ^= heroOffsetPosZ_.GetHashCode();
      hash ^= speed_.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (ID != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(ID);
      }
      if (ActionName.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(ActionName);
      }
      if (TotalTime != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(TotalTime);
      }
      if (StateChannelTime != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(StateChannelTime);
      }
      if (SpellBackwingTime != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(SpellBackwingTime);
      }
      hitTimeList_.WriteTo(output, _repeated_hitTimeList_codec);
      heroOffsetTime_.WriteTo(output, _repeated_heroOffsetTime_codec);
      heroOffsetPosZ_.WriteTo(output, _repeated_heroOffsetPosZ_codec);
      speed_.WriteTo(output, _repeated_speed_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ID != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ID);
      }
      if (ActionName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ActionName);
      }
      if (TotalTime != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(TotalTime);
      }
      if (StateChannelTime != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(StateChannelTime);
      }
      if (SpellBackwingTime != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(SpellBackwingTime);
      }
      size += hitTimeList_.CalculateSize(_repeated_hitTimeList_codec);
      size += heroOffsetTime_.CalculateSize(_repeated_heroOffsetTime_codec);
      size += heroOffsetPosZ_.CalculateSize(_repeated_heroOffsetPosZ_codec);
      size += speed_.CalculateSize(_repeated_speed_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SkillPrefab other) {
      if (other == null) {
        return;
      }
      if (other.ID != 0) {
        ID = other.ID;
      }
      if (other.ActionName.Length != 0) {
        ActionName = other.ActionName;
      }
      if (other.TotalTime != 0) {
        TotalTime = other.TotalTime;
      }
      if (other.StateChannelTime != 0) {
        StateChannelTime = other.StateChannelTime;
      }
      if (other.SpellBackwingTime != 0) {
        SpellBackwingTime = other.SpellBackwingTime;
      }
      hitTimeList_.Add(other.hitTimeList_);
      heroOffsetTime_.Add(other.heroOffsetTime_);
      heroOffsetPosZ_.Add(other.heroOffsetPosZ_);
      speed_.Add(other.speed_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            ID = input.ReadInt32();
            break;
          }
          case 18: {
            ActionName = input.ReadString();
            break;
          }
          case 24: {
            TotalTime = input.ReadInt32();
            break;
          }
          case 32: {
            StateChannelTime = input.ReadInt32();
            break;
          }
          case 40: {
            SpellBackwingTime = input.ReadInt32();
            break;
          }
          case 50:
          case 48: {
            hitTimeList_.AddEntriesFrom(input, _repeated_hitTimeList_codec);
            break;
          }
          case 58:
          case 56: {
            heroOffsetTime_.AddEntriesFrom(input, _repeated_heroOffsetTime_codec);
            break;
          }
          case 66:
          case 64: {
            heroOffsetPosZ_.AddEntriesFrom(input, _repeated_heroOffsetPosZ_codec);
            break;
          }
          case 74:
          case 72: {
            speed_.AddEntriesFrom(input, _repeated_speed_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class DataHelper : pb::IMessage<DataHelper> {
    private static readonly pb::MessageParser<DataHelper> _parser = new pb::MessageParser<DataHelper>(() => new DataHelper());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<DataHelper> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Config.DataReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DataHelper() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DataHelper(DataHelper other) : this() {
      messageType_ = other.messageType_.Clone();
      skillPrefabDict_ = other.skillPrefabDict_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DataHelper Clone() {
      return new DataHelper(this);
    }

    /// <summary>Field number for the "messageType" field.</summary>
    public const int MessageTypeFieldNumber = 1;
    private static readonly pb::FieldCodec<string> _repeated_messageType_codec
        = pb::FieldCodec.ForString(10);
    private readonly pbc::RepeatedField<string> messageType_ = new pbc::RepeatedField<string>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<string> MessageType {
      get { return messageType_; }
    }

    /// <summary>Field number for the "SkillPrefab_dict" field.</summary>
    public const int SkillPrefabDictFieldNumber = 2;
    private static readonly pbc::MapField<int, global::Config.SkillPrefab>.Codec _map_skillPrefabDict_codec
        = new pbc::MapField<int, global::Config.SkillPrefab>.Codec(pb::FieldCodec.ForInt32(8), pb::FieldCodec.ForMessage(18, global::Config.SkillPrefab.Parser), 18);
    private readonly pbc::MapField<int, global::Config.SkillPrefab> skillPrefabDict_ = new pbc::MapField<int, global::Config.SkillPrefab>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::MapField<int, global::Config.SkillPrefab> SkillPrefabDict {
      get { return skillPrefabDict_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as DataHelper);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(DataHelper other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!messageType_.Equals(other.messageType_)) return false;
      if (!SkillPrefabDict.Equals(other.SkillPrefabDict)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= messageType_.GetHashCode();
      hash ^= SkillPrefabDict.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      messageType_.WriteTo(output, _repeated_messageType_codec);
      skillPrefabDict_.WriteTo(output, _map_skillPrefabDict_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += messageType_.CalculateSize(_repeated_messageType_codec);
      size += skillPrefabDict_.CalculateSize(_map_skillPrefabDict_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(DataHelper other) {
      if (other == null) {
        return;
      }
      messageType_.Add(other.messageType_);
      skillPrefabDict_.Add(other.skillPrefabDict_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            messageType_.AddEntriesFrom(input, _repeated_messageType_codec);
            break;
          }
          case 18: {
            skillPrefabDict_.AddEntriesFrom(input, _map_skillPrefabDict_codec);
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
